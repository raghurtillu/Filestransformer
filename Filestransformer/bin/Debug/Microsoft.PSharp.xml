<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.PSharp</name>
    </assembly>
    <members>
        <member name="T:Microsoft.PSharp.ColdAttribute">
            <summary>
            Attribute for checking liveness properties in monitors.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.DeferEventsAttribute">
            <summary>
            Attribute for declaring what events should be deferred in
            a machine state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DeferEventsAttribute.Events">
            <summary>
            Event types.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DeferEventsAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.DeferEventsAttribute"/> class.
            </summary>
            <param name="eventTypes">Event types</param>
        </member>
        <member name="T:Microsoft.PSharp.EntryPointAttribute">
            <summary>
            Attribute for declaring the entry point to a P# program.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.HotAttribute">
            <summary>
            Attribute for checking liveness properties in monitors.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.IgnoreEventsAttribute">
            <summary>
            Attribute for declaring what events should be ignored in
            a machine state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.IgnoreEventsAttribute.Events">
            <summary>
            Event types.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IgnoreEventsAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.IgnoreEventsAttribute"/> class.
            </summary>
            <param name="eventTypes">Event types</param>
        </member>
        <member name="T:Microsoft.PSharp.OnEntryAttribute">
            <summary>
            Attribute for declaring what action to perform
            when entering a machine state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.OnEntryAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.OnEntryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.OnEntryAttribute"/> class.
            </summary>
            <param name="actionName">Action name</param>
        </member>
        <member name="T:Microsoft.PSharp.OnEventDoActionAttribute">
            <summary>
            Attribute for declaring what action a machine should perform
            when it receives an event in a given state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.OnEventDoActionAttribute.Event">
            <summary>
            Event type.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.OnEventDoActionAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.OnEventDoActionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.OnEventDoActionAttribute"/> class.
            </summary>
            <param name="eventType">Event type</param>
            <param name="actionName">Action name</param>
        </member>
        <member name="T:Microsoft.PSharp.OnEventGotoStateAttribute">
            <summary>
            Attribute for declaring which state a machine should transition to
            when it receives an event in a given state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.OnEventGotoStateAttribute.Event">
            <summary>
            Event type.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.OnEventGotoStateAttribute.State">
            <summary>
            State type.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.OnEventGotoStateAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.OnEventGotoStateAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.OnEventGotoStateAttribute"/> class.
            </summary>
            <param name="eventType">Event type</param>
            <param name="stateType">State type</param>
        </member>
        <member name="M:Microsoft.PSharp.OnEventGotoStateAttribute.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.OnEventGotoStateAttribute"/> class.
            </summary>
            <param name="eventType">Event type</param>
            <param name="stateType">State type</param>
            <param name="actionName">Name of action to perform on exit</param>
        </member>
        <member name="T:Microsoft.PSharp.OnEventPushStateAttribute">
            <summary>
            Attribute for declaring which state a machine should push transition to
            when it receives an event in a given state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.OnEventPushStateAttribute.Event">
            <summary>
            Event type.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.OnEventPushStateAttribute.State">
            <summary>
            State type.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.OnEventPushStateAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.OnEventPushStateAttribute"/> class.
            </summary>
            <param name="eventType">Event type</param>
            <param name="stateType">State type</param>
        </member>
        <member name="T:Microsoft.PSharp.OnExitAttribute">
            <summary>
            Attribute for declaring what action to perform
            when exiting a machine state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.OnExitAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.OnExitAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.OnExitAttribute"/> class.
            </summary>
            <param name="actionName">Action name</param>
        </member>
        <member name="T:Microsoft.PSharp.StartAttribute">
            <summary>
            Attribute for declaring that a state of a machine
            is the start one.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestAttribute">
            <summary>
            Attribute for declaring the entry point to
            a P# program test.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestInitAttribute">
            <summary>
            Attribute for declaring the initialization
            method to be called before testing starts.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestDisposeAttribute">
            <summary>
            Attribute for declaring a cleanup method to be
            called when all test iterations terminate.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestIterationDisposeAttribute">
            <summary>
            Attribute for declaring a cleanup method to be
            called when each test iteration terminates.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestRuntimeCreateAttribute">
            <summary>
            Attribute for declaring the factory method that creates
            the P# testing runtime. This is an advanced feature,
            only to be used for replacing the original P# testing
            runtime with an alternative implementation.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Configuration">
            <summary>
            The P# project configurations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.SolutionFilePath">
            <summary>
            The path to the solution file.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.OutputFilePath">
            <summary>
            The output path.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ProjectName">
            <summary>
            The name of the project to analyze.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.Timeout">
            <summary>
            Timeout in seconds.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.CompilationTarget">
            <summary>
            Requested compilation target.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.OptimizationTarget">
            <summary>
            Requested optimization target.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.CustomCompilerPassAssemblyPaths">
            <summary>
            List of assembly paths to used-defined compiler passes.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.AnalyzeDataFlow">
            <summary>
            Enables the data flow analysis.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.AnalyzeDataRaces">
            <summary>
            Enables the static data race analysis.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.DoStateTransitionAnalysis">
            <summary>
            Perform the state transition analysis.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ShowControlFlowInformation">
            <summary>
            Reports the control-flow information.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ShowDataFlowInformation">
            <summary>
            Reports the data-flow information.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ShowFullDataFlowInformation">
            <summary>
            Reports the full data-flow information.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.RewriteCSharpVersion">
            <summary>
            The version of CSharp to target in rewriting, if specified.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.RuntimeGeneration">
            <summary>
            The current runtime generation.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.AssemblyToBeAnalyzed">
            <summary>
            The assembly to be analyzed for bugs.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.TestingRuntimeAssembly">
            <summary>
            The assembly that contains the testing runtime.
            By default it is empty, which uses the default
            testing runtime of P#.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.TestMethodName">
            <summary>
            Test method to be used.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.SchedulingStrategy">
            <summary>
            Scheduling strategy to use with the P# tester.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ReductionStrategy">
            <summary>
            Reduction strategy to use with the P# tester.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.SchedulingIterations">
            <summary>
            Number of scheduling iterations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.RandomSchedulingSeed">
            <summary>
            Seed for random scheduling strategies.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.IncrementalSchedulingSeed">
            <summary>
            If true, the seed will increment in each
            testing iteration.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.PerformFullExploration">
            <summary>
            If true, the P# tester performs a full exploration,
            and does not stop when it finds a bug.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.MaxFairSchedulingSteps">
            <summary>
            The maximum scheduling steps to explore
            for fair schedulers.
            By default there is no bound.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.MaxUnfairSchedulingSteps">
            <summary>
            The maximum scheduling steps to explore
            for unfair schedulers.
            By default there is no bound.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Configuration.MaxSchedulingSteps">
            <summary>
            The maximum scheduling steps to explore
            for both fair and unfair schedulers.
            By default there is no bound.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.UserExplicitlySetMaxFairSchedulingSteps">
            <summary>
            True if the user has explicitly set the
            fair scheduling steps bound.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ParallelBugFindingTasks">
            <summary>
            Number of parallel bug-finding tasks.
            By default it is 1 task.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.RunAsParallelBugFindingTask">
            <summary>
            Runs this process as a parallel bug-finding task.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.TestingSchedulerEndPoint">
            <summary>
            The testing scheduler unique endpoint.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.TestingSchedulerProcessId">
            <summary>
            The testing scheduler process id.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.TestingProcessId">
            <summary>
            The unique testing process id.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ConsiderDepthBoundHitAsBug">
            <summary>
            If true, then the P# tester will consider an execution
            that hits the depth bound as buggy.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.PrioritySwitchBound">
            <summary>
            The priority switch bound. By default it is 2.
            Used by priority-based schedulers.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.DelayBound">
            <summary>
            Delay bound. By default it is 2.
            Used by delay-bounding schedulers.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.CoinFlipBound">
            <summary>
            Coin-flip bound. By default it is 2.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.TimeoutDelay">
            <summary>
            The timeout delay used during testing. By default it is 1.
            Increase to the make timeouts less frequent.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.SafetyPrefixBound">
            <summary>
            Safety prefix bound. By default it is 0.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.EnableLivenessChecking">
            <summary>
            Enables liveness checking during bug-finding.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.LivenessTemperatureThreshold">
            <summary>
            The liveness temperature threshold. If it is 0
            then it is disabled.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.EnableCycleDetection">
            <summary>
            Enables cycle-detection using state-caching
            for liveness checking.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.EnableUserDefinedStateHashing">
            <summary>
            If this option is enabled, then the user-defined state-hashing methods
            are used to improve the accurracy of state-caching for liveness checking.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.EnableMonitorsInProduction">
            <summary>
            Enables (safety) monitors in the production runtime.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.AttachDebugger">
            <summary>
            Attaches the debugger during trace replay.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.EnableNoApiCallAfterTransitionStmtAssertion">
            <summary>
            Enables the testing assertion that a raise/goto/push/pop transition must
            be the last API called in an event handler.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ScheduleFile">
            <summary>
            The schedule file to be replayed.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ScheduleTrace">
            <summary>
            The schedule trace to be replayed.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.EnableDataRaceDetection">
            <summary>
            Enables data-race detection during testing.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.RaceFound">
            <summary>
            True if a race is found.
            TODO: Does not belong here.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.EnableReadWriteTracing">
            <summary>
            Enables tracking line number information for reads and writes.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.EnableRaceDetectorLogging">
            <summary>
            Enables race detector logging.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ReportCodeCoverage">
            <summary>
            Enables code coverage reporting of a P# program.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ReportActivityCoverage">
            <summary>
            Enables activity coverage reporting of a P# program.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.DebugActivityCoverage">
            <summary>
            Enables activity coverage debugging.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.AdditionalCodeCoverageAssemblies">
            <summary>
            Additional assembly specifications to instrument for code coverage, besides those in the
            dependency graph between <see cref="F:Microsoft.PSharp.Configuration.AssemblyToBeAnalyzed"/> and the Microsoft.PSharp DLLs.
            Key is filename, value is whether it is a list file (true) or a single file (false).
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ContainerId">
            <summary>
            The unique container id.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.NumberOfContainers">
            <summary>
            Number of containers.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.RemoteApplicationFilePath">
            <summary>
            The path to the P# application to run remotely.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.IsVerbose">
            <summary>
            If true, then messages are logged.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ShowWarnings">
            <summary>
            Shows warnings.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.EnableDebugging">
            <summary>
            Enables debugging.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.EnableProfiling">
            <summary>
            Enables profiling.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.KeepTemporaryFiles">
            <summary>
            Keeps the temporary files.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.EnableColoredConsoleOutput">
            <summary>
            Enables colored console output.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.ThrowInternalExceptions">
            <summary>
            If true, then P# will throw any internal exceptions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Configuration.DisableEnvironmentExit">
            <summary>
            If true, then environment exit will be disabled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Configuration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Configuration"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Configuration.Create">
            <summary>
            Creates a new configuration with default values.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Configuration.WithVerbosityEnabled(System.Boolean)">
            <summary>
            Updates the configuration with verbose output enabled or disabled.
            </summary>
            <param name="isVerbose">If true, then messages are logged.</param>
        </member>
        <member name="M:Microsoft.PSharp.Configuration.WithVerbosityEnabled(System.Int32)">
            <summary>
            Updates the configuration with verbose output enabled or disabled.
            </summary>
            <param name="level">The verbosity level.</param>
        </member>
        <member name="M:Microsoft.PSharp.Configuration.WithStrategy(Microsoft.PSharp.Utilities.SchedulingStrategy)">
            <summary>
            Updates the configuration with the specified scheduling strategy.
            </summary>
            <param name="strategy">The scheduling strategy.</param>
        </member>
        <member name="M:Microsoft.PSharp.Configuration.WithNumberOfIterations(System.Int32)">
            <summary>
            Updates the configuration with the specified number of iterations to perform.
            </summary>
            <param name="iterations">The number of iterations to perform.</param>
        </member>
        <member name="M:Microsoft.PSharp.Configuration.WithMaxSteps(System.Int32)">
            <summary>
            Updates the configuration with the specified number of scheduling steps
            to perform per iteration (for both fair and unfair schedulers).
            </summary>
            <param name="maxSteps">The scheduling steps to perform per iteration.</param>
        </member>
        <member name="M:Microsoft.PSharp.Configuration.IsRewriteCSharpVersion(System.Int32,System.Int32)">
            <summary>
            Indicates whether the requested C# version is supported for for rewriting.
            </summary>
            <param name="major">The required major version.</param>
            <param name="minor">The required minor version.</param>
        </member>
        <member name="T:Microsoft.PSharp.IMachineRuntime">
            <summary>
            Interface of the P# runtime. It provides methods for creating and executing machines,
            sending events, checking specifications, generating nondeterministic values that are
            controlled during testing, as well as various other runtime utilities.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.IMachineRuntime.Logger">
            <summary>
            The installed logger.
            </summary>
        </member>
        <member name="E:Microsoft.PSharp.IMachineRuntime.OnFailure">
            <summary>
            Callback that is fired when the runtime throws an exception.
            </summary>
        </member>
        <member name="E:Microsoft.PSharp.IMachineRuntime.OnEventDropped">
            <summary>
            Callback that is fired when an event is dropped.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.CreateMachineId(System.Type,System.String)">
            <summary>
            Creates a fresh machine id that has not yet been bound to any machine.
            </summary>
            <param name="type">Type of the machine.</param>
            <param name="machineName">Optional machine name used for logging.</param>
            <returns>The result is the machine id.</returns>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.CreateMachineIdFromName(System.Type,System.String)">
            <summary>
            Creates a machine id that is uniquely tied to the specified unique name. The
            returned machine id can either be a fresh id (not yet bound to any machine),
            or it can be bound to a previously created machine. In the second case, this
            machine id can be directly used to communicate with the corresponding machine.
            </summary>
            <param name="type">Type of the machine.</param>
            <param name="machineName">Unique name used to create or get the machine id.</param>
            <returns>The result is the machine id.</returns>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.CreateMachine(System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and with
            the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be
            used to access its payload, and cannot be handled.
            </summary>
            <param name="type">Type of the machine.</param>
            <param name="e">Optional event used during initialization.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <returns>The result is the machine id.</returns>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.CreateMachine(System.Type,System.String,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and name, and
            with the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be
            used to access its payload, and cannot be handled.
            </summary>
            <param name="type">Type of the machine.</param>
            <param name="machineName">Optional machine name used for logging.</param>
            <param name="e">Optional event used during initialization.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <returns>The result is the machine id.</returns>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.CreateMachine(Microsoft.PSharp.MachineId,System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified type, using the specified <see cref="T:Microsoft.PSharp.MachineId"/>.
            This method optionally passes an <see cref="T:Microsoft.PSharp.Event"/> to the new machine, which can only
            be used to access its payload, and cannot be handled.
            </summary>
            <param name="mid">Unbound machine id.</param>
            <param name="type">Type of the machine.</param>
            <param name="e">Optional event used during initialization.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <returns>The result is the machine id.</returns>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.CreateMachineAndExecuteAsync(System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and with the
            specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used to
            access its payload, and cannot be handled. The method returns only when
            the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
            <param name="type">Type of the machine.</param>
            <param name="e">Optional event used during initialization.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <returns>Task that represents the asynchronous operation. The task result is the machine id.</returns>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.CreateMachineAndExecuteAsync(System.Type,System.String,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and name, and with
            the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used to
            access its payload, and cannot be handled. The method returns only when the
            machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
            <param name="type">Type of the machine.</param>
            <param name="machineName">Optional machine name used for logging.</param>
            <param name="e">Optional event used during initialization.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <returns>Task that represents the asynchronous operation. The task result is the machine id.</returns>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.CreateMachineAndExecuteAsync(Microsoft.PSharp.MachineId,System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/>, using the specified
            unbound machine id, and passes the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This
            event can only be used to access its payload, and cannot be handled. The method
            returns only when the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any)
            is handled.
            </summary>
            <param name="mid">Unbound machine id.</param>
            <param name="type">Type of the machine.</param>
            <param name="e">Optional event used during initialization.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <returns>Task that represents the asynchronous operation. The task result is the machine id.</returns>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.CreateMachineAndExecute(System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and with the
            specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used to
            access its payload, and cannot be handled. The method returns only when
            the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
            <param name="type">Type of the machine.</param>
            <param name="e">Optional event used during initialization.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <returns>Task that represents the asynchronous operation. The task result is the machine id.</returns>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.CreateMachineAndExecute(System.Type,System.String,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and name, and with
            the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used to
            access its payload, and cannot be handled. The method returns only when the
            machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
            <param name="type">Type of the machine.</param>
            <param name="machineName">Optional machine name used for logging.</param>
            <param name="e">Optional event used during initialization.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <returns>Task that represents the asynchronous operation. The task result is the machine id.</returns>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.CreateMachineAndExecute(Microsoft.PSharp.MachineId,System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/>, using the specified
            unbound machine id, and passes the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This
            event can only be used to access its payload, and cannot be handled. The method
            returns only when the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any)
            is handled.
            </summary>
            <param name="mid">Unbound machine id.</param>
            <param name="type">Type of the machine.</param>
            <param name="e">Optional event used during initialization.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <returns>Task that represents the asynchronous operation. The task result is the machine id.</returns>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.SendEvent(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a machine.
            </summary>
            <param name="target">The id of the target machine.</param>
            <param name="e">The event to send.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <param name="options">Optional configuration of a send operation.</param>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.SendEventAndExecuteAsync(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an <see cref="T:Microsoft.PSharp.Event"/> to a machine. Returns immediately if the target machine was already
            running. Otherwise blocks until the machine handles the event and reaches quiescense.
            </summary>
            <param name="target">The id of the target machine.</param>
            <param name="e">The event to send.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <param name="options">Optional configuration of a send operation.</param>
            <returns>Task that represents the asynchronous operation. The task result is true if
            the event was handled, false if the event was only enqueued.</returns>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.SendEventAndExecute(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an <see cref="T:Microsoft.PSharp.Event"/> to a machine. Returns immediately if the target machine was already
            running. Otherwise blocks until the machine handles the event and reaches quiescense.
            </summary>
            <param name="target">The id of the target machine.</param>
            <param name="e">The event to send.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <param name="options">Optional configuration of a send operation.</param>
            <returns>Task that represents the asynchronous operation. The task result is true if
            the event was handled, false if the event was only enqueued.</returns>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.RegisterMonitor(System.Type)">
            <summary>
            Registers a new specification monitor of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">Type of the monitor.</param>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.InvokeMonitor``1(Microsoft.PSharp.Event)">
            <summary>
            Invokes the specified monitor with the specified <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
            <typeparam name="T">Type of the monitor.</typeparam>
            <param name="e">Event</param>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.InvokeMonitor(System.Type,Microsoft.PSharp.Event)">
            <summary>
            Invokes the specified monitor with the specified <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
            <param name="type">Type of the monitor.</param>
            <param name="e">Event</param>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.Random">
            <summary>
            Returns a nondeterministic boolean choice, that can be controlled
            during analysis or testing.
            </summary>
            <returns>The nondeterministic boolean choice.</returns>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.FairRandom(System.String,System.String,System.Int32)">
            <summary>
            Returns a fair nondeterministic boolean choice, that can be
            controlled during analysis or testing.
            </summary>
            <param name="callerMemberName">CallerMemberName</param>
            <param name="callerFilePath">CallerFilePath</param>
            <param name="callerLineNumber">CallerLineNumber</param>
            <returns>The controlled nondeterministic choice.</returns>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.Random(System.Int32)">
            <summary>
            Returns a nondeterministic boolean choice, that can be controlled
            during analysis or testing. The value is used to generate a number
            in the range [0..maxValue), where 0 triggers true.
            </summary>
            <param name="maxValue">The max value.</param>
            <returns>The nondeterministic boolean choice.</returns>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.RandomInteger(System.Int32)">
            <summary>
            Returns a nondeterministic integer choice, that can be
            controlled during analysis or testing. The value is used
            to generate an integer in the range [0..maxValue).
            </summary>
            <param name="maxValue">The max value.</param>
            <returns>The nondeterministic integer choice.</returns>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.Assert(System.Boolean)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <param name="s">The message to print if the assertion fails.</param>
            <param name="arg0">The first argument.</param>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <param name="s">The message to print if the assertion fails.</param>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <param name="s">The message to print if the assertion fails.</param>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
            <param name="arg2">The third argument.</param>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <param name="s">The message to print if the assertion fails.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.GetCurrentOperationGroupId(Microsoft.PSharp.MachineId)">
            <summary>
            Returns the operation group id of the specified machine id. Returns <see cref="F:System.Guid.Empty"/>
            if the id is not set, or if the <see cref="T:Microsoft.PSharp.MachineId"/> is not associated with this runtime.
            During testing, the runtime asserts that the specified machine is currently executing.
            </summary>
            <param name="currentMachineId">The id of the currently executing machine.</param>
            <returns>The unique identifier.</returns>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.SetLogger(Microsoft.PSharp.IO.ILogger)">
            <summary>
            Installs the specified <see cref="T:Microsoft.PSharp.IO.ILogger"/>.
            </summary>
            <param name="logger">The logger to install.</param>
        </member>
        <member name="M:Microsoft.PSharp.IMachineRuntime.Stop">
            <summary>
            Terminates the runtime and notifies each active machine to halt execution.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.IO.Debug">
            <summary>
            Static class implementing debug reporting methods.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.IO.Debug.IsEnabled">
            <summary>
            Checks if debugging is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.Debug.Write(System.String,System.Object)">
            <summary>
            Writes the debugging information, followed by the current line terminator,
            to the output stream. The print occurs only if debugging is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.Debug.Write(System.String,System.Object,System.Object)">
            <summary>
            Writes the debugging information, followed by the current line terminator,
            to the output stream. The print occurs only if debugging is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.Debug.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the debugging information, followed by the current line terminator,
            to the output stream. The print occurs only if debugging is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.Debug.Write(System.String,System.Object[])">
            <summary>
            Writes the debugging information, followed by the current line terminator,
            to the output stream. The print occurs only if debugging is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.Debug.WriteLine(System.String,System.Object)">
            <summary>
            Writes the debugging information, followed by the current line terminator,
            to the output stream. The print occurs only if debugging is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.Debug.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Writes the debugging information, followed by the current line terminator,
            to the output stream. The print occurs only if debugging is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.Debug.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the debugging information, followed by the current line terminator,
            to the output stream. The print occurs only if debugging is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.Debug.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the debugging information, followed by the current line terminator,
            to the output stream. The print occurs only if debugging is enabled.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.IO.Error">
            <summary>
            Static class implementing error reporting methods.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.Error.Report(System.String,System.Object[])">
            <summary>
            Reports a generic error to the user.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.Error.ReportAndExit(System.String)">
            <summary>
            Reports a generic error to the user and exits.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.Error.ReportAndExit(System.String,System.Object[])">
            <summary>
            Reports a generic error to the user and exits.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.Error.Write(System.ConsoleColor,System.String)">
            <summary>
             Writes the specified string value to the output stream.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.IO.ConsoleLogger">
            <summary>
            Logger that writes text to the console.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.ConsoleLogger.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.IO.ConsoleLogger"/> class.
            </summary>
            <param name="isVerbose">If true, then messages are logged.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ConsoleLogger.Write(System.String)">
            <summary>
            Writes the specified string value.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.ConsoleLogger.Write(System.String,System.Object)">
            <summary>
            Writes the text representation of the specified argument.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.ConsoleLogger.Write(System.String,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified arguments.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.ConsoleLogger.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified arguments.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.ConsoleLogger.Write(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.ConsoleLogger.WriteLine(System.String)">
            <summary>
            Writes the specified string value, followed by the
            current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.ConsoleLogger.WriteLine(System.String,System.Object)">
            <summary>
            Writes the text representation of the specified argument, followed by the
            current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.ConsoleLogger.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified arguments, followed by the
            current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.ConsoleLogger.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified arguments, followed by the
            current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.ConsoleLogger.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.ConsoleLogger.Dispose">
            <summary>
            Disposes the logger.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.IO.DisposingLogger">
            <summary>
            Logger that disposes all written text.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.IO.DisposingLogger.IsVerbose">
            <summary>
            If true, then messages are logged. This logger ignores
            this value and always disposes any written text.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.Write(System.String)">
            <summary>
            Writes the specified string value.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.Write(System.String,System.Object)">
            <summary>
            Writes the text representation of the specified argument.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.Write(System.String,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified arguments.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified arguments.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.Write(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects.
            </summary>
            <param name="format">Text</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.WriteLine(System.String)">
            <summary>
            Writes the specified string value, followed by the
            current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.WriteLine(System.String,System.Object)">
            <summary>
            Writes the text representation of the specified argument, followed by the
            current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified arguments, followed by the
            current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified arguments, followed by the
            current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects,
            followed by the current line terminator.
            </summary>
            <param name="format">Text</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnEnqueue(Microsoft.PSharp.MachineId,System.String)">
            <summary>
            Called when an event is about to be enqueued to a machine.
            </summary>
            <param name="machineId">Id of the machine that the event is being enqueued to.</param>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnDequeue(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when an event is dequeued by a machine.
            </summary>
            <param name="machineId">Id of the machine that the event is being dequeued by.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnDefault(Microsoft.PSharp.MachineId,System.String)">
            <summary>
            Called when the default event handler for a state is about to be executed.
            </summary>
            <param name="machineId">Id of the machine that the state will execute in.</param>
            <param name="currStateName">Name of the current state of the machine.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnGoto(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine transitions states via a 'goto'.
            </summary>
            <param name="machineId">Id of the machine.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="newStateName">The target state of goto.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnPush(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine is being pushed to a state.
            </summary>
            <param name="machineId">Id of the machine being pushed to the state.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="newStateName">The state the machine is pushed to.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnPop(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine has been popped from a state.
            </summary>
            <param name="machineId">Id of the machine that the pop executed in.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="restoredStateName">The name of the state being restored, if any.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnPopUnhandledEvent(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            When an event cannot be handled in the current state, its exit handler is executed and then the state is
            popped and any previous "current state" is reentered. This handler is called when that pop has been done.
            </summary>
            <param name="machineId">Id of the machine that the pop executed in.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="eventName">The name of the event that cannot be handled.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnReceive(Microsoft.PSharp.MachineId,System.String,System.String,System.Boolean)">
            <summary>
            Called when an event is received by a machine.
            </summary>
            <param name="machineId">Id of the machine that received the event.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="eventName">The name of the event.</param>
            <param name="wasBlocked">The machine was waiting for one or more specific events, and <paramref name="eventName"/> was one of them.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnWait(Microsoft.PSharp.MachineId,System.String,System.Type)">
            <summary>
            Called when a machine waits to receive an event of a specified type.
            </summary>
            <param name="machineId">Id of the machine that is entering the wait state.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="eventType">The type of the event being waited for.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnWait(Microsoft.PSharp.MachineId,System.String,System.Type[])">
            <summary>
            Called when a machine waits to receive an event of one of the specified types.
            </summary>
            <param name="machineId">Id of the machine that is entering the wait state.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="eventTypes">The types of the events being waited for, if any.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnSend(Microsoft.PSharp.MachineId,Microsoft.PSharp.MachineId,System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Called when an event is sent to a target machine.
            </summary>
            <param name="targetMachineId">Id of the target machine.</param>
            <param name="senderId">The machine that sent the event, if any.</param>
            <param name="senderStateName">The name of the current state of the sender machine, if any.</param>
            <param name="eventName">The event being sent.</param>
            <param name="opGroupId">Id used to identify the send operation.</param>
            <param name="isTargetHalted">Is the target machine halted.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnCreateMachine(Microsoft.PSharp.MachineId,Microsoft.PSharp.MachineId)">
            <summary>
            Called when a machine has been created.
            </summary>
            <param name="machineId">The id of the machine that has been created.</param>
            <param name="creator">Id of the creator machine, null otherwise.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnCreateMonitor(System.String,Microsoft.PSharp.MachineId)">
            <summary>
            Called when a monitor has been created.
            </summary>
            <param name="monitorTypeName">The name of the type of the monitor that has been created.</param>
            <param name="monitorId">The id of the monitor that has been created.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnCreateTimer(Microsoft.PSharp.Timers.TimerInfo)">
            <summary>
            Called when a machine timer has been created.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnStopTimer(Microsoft.PSharp.Timers.TimerInfo)">
            <summary>
            Called when a machine timer has been stopped.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnHalt(Microsoft.PSharp.MachineId,System.Int32)">
            <summary>
            Called when a machine has been halted.
            </summary>
            <param name="machineId">The id of the machine that has been halted.</param>
            <param name="inboxSize">Approximate size of the machine inbox.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnRandom(Microsoft.PSharp.MachineId,System.Object)">
            <summary>
            Called when a random result has been obtained.
            </summary>
            <param name="machineId">The id of the source machine, if any; otherwise, the runtime itself was the source.</param>
            <param name="result">The random result (may be bool or int).</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnMachineState(Microsoft.PSharp.MachineId,System.String,System.Boolean)">
            <summary>
            Called when a machine enters or exits a state.
            </summary>
            <param name="machineId">The id of the machine entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited.</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnMachineEvent(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine raises an event.
            </summary>
            <param name="machineId">The id of the machine raising the event.</param>
            <param name="currStateName">The name of the current state of the machine raising the event.</param>
            <param name="eventName">The name of the event being raised.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnMachineAction(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine executes an action.
            </summary>
            <param name="machineId">The id of the machine executing the action.</param>
            <param name="currStateName">The name of the state in which the action is being executed.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnMachineExceptionThrown(Microsoft.PSharp.MachineId,System.String,System.String,System.Exception)">
            <summary>
            Called when a machine throws an exception
            </summary>
            <param name="machineId">The id of the machine that threw the exception.</param>
            <param name="currStateName">The name of the current machine state.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnMachineExceptionHandled(Microsoft.PSharp.MachineId,System.String,System.String,System.Exception)">
            <summary>
            Called when a machine's OnException method is used to handle a thrown exception
            </summary>
            <param name="machineId">The id of the machine that threw the exception.</param>
            <param name="currStateName">The name of the current machine state.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnMonitorState(System.String,Microsoft.PSharp.MachineId,System.String,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Called when a monitor enters or exits a state.
            </summary>
            <param name="monitorTypeName">The name of the monitor entering or exiting the state.</param>
            <param name="monitorId">The id of the monitor entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited; if <paramref name="isInHotState"/>
                is not null, then the temperature is appended to the statename in brackets, e.g. "stateName[hot]".</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
            <param name="isInHotState">If true, the monitor is in a hot state; if false, the monitor is in a cold state;
                else no liveness state is available.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnMonitorEvent(System.String,Microsoft.PSharp.MachineId,System.String,System.String,System.Boolean)">
            <summary>
            Called when a monitor is about to process or has raised an event.
            </summary>
            <param name="monitorTypeName">Name of type of the monitor that will process or has raised the event.</param>
            <param name="monitorId">Id of the monitor that will process or has raised the event.</param>
            <param name="currStateName">The name of the state in which the event is being raised.</param>
            <param name="eventName">The name of the event.</param>
            <param name="isProcessing">If true, the monitor is processing the event; otherwise it has raised it.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnMonitorAction(System.String,Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a monitor executes an action.
            </summary>
            <param name="monitorTypeName">Name of type of the monitor that is executing the action.</param>
            <param name="monitorId">Id of the monitor that is executing the action.</param>
            <param name="currStateName">The name of the state in which the action is being executed.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnError(System.String)">
            <summary>
            Called for general error reporting via pre-constructed text.
            </summary>
            <param name="text">The text of the error report.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.OnStrategyError(Microsoft.PSharp.Utilities.SchedulingStrategy,System.String)">
            <summary>
            Called for errors detected by a specific scheduling strategy.
            </summary>
            <param name="strategy">The scheduling strategy that was used.</param>
            <param name="strategyDescription">More information about the scheduling strategy.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.DisposingLogger.Dispose">
            <summary>
            Disposes the logger.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.IO.ILogger">
            <summary>
            Interface of the P# runtime logger.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.IO.ILogger.IsVerbose">
            <summary>
            If true, then messages are logged.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.Write(System.String)">
            <summary>
            Writes the specified string value.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.Write(System.String,System.Object)">
            <summary>
            Writes the text representation of the specified argument.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.Write(System.String,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified arguments.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified arguments.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.Write(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.WriteLine(System.String)">
            <summary>
            Writes the specified string value, followed by the
            current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.WriteLine(System.String,System.Object)">
            <summary>
            Writes the text representation of the specified argument, followed by the
            current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified arguments, followed by the
            current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified arguments, followed by the
            current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnEnqueue(Microsoft.PSharp.MachineId,System.String)">
            <summary>
            Called when an event is about to be enqueued to a machine.
            </summary>
            <param name="machineId">Id of the machine that the event is being enqueued to.</param>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnDequeue(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when an event is dequeued by a machine.
            </summary>
            <param name="machineId">Id of the machine that the event is being dequeued by.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnDefault(Microsoft.PSharp.MachineId,System.String)">
            <summary>
            Called when the default event handler for a state is about to be executed.
            </summary>
            <param name="machineId">Id of the machine that the state will execute in.</param>
            <param name="currStateName">Name of the current state of the machine.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnGoto(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine transitions states via a 'goto'.
            </summary>
            <param name="machineId">Id of the machine.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="newStateName">The target state of goto.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnPush(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine is being pushed to a state.
            </summary>
            <param name="machineId">Id of the machine being pushed to the state.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="newStateName">The state the machine is pushed to.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnPop(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine has been popped from a state.
            </summary>
            <param name="machineId">Id of the machine that the pop executed in.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="restoredStateName">The name of the state being restored, if any.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnPopUnhandledEvent(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            When an event cannot be handled in the current state, its exit handler is executed and then the state is
            popped and any previous "current state" is reentered. This handler is called when that pop has been done.
            </summary>
            <param name="machineId">Id of the machine that the pop executed in.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="eventName">The name of the event that cannot be handled.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnReceive(Microsoft.PSharp.MachineId,System.String,System.String,System.Boolean)">
            <summary>
            Called when an event is received by a machine.
            </summary>
            <param name="machineId">Id of the machine that received the event.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="eventName">The name of the event.</param>
            <param name="wasBlocked">The machine was waiting for one or more specific events,
                and <paramref name="eventName"/> was one of them</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnWait(Microsoft.PSharp.MachineId,System.String,System.Type)">
            <summary>
            Called when a machine waits to receive an event of a specified type.
            </summary>
            <param name="machineId">Id of the machine that is entering the wait state.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="eventType">The type of the event being waited for.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnWait(Microsoft.PSharp.MachineId,System.String,System.Type[])">
            <summary>
            Called when a machine waits to receive an event of one of the specified types.
            </summary>
            <param name="machineId">Id of the machine that is entering the wait state.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="eventTypes">The types of the events being waited for, if any.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnSend(Microsoft.PSharp.MachineId,Microsoft.PSharp.MachineId,System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Called when an event is sent to a target machine.
            </summary>
            <param name="targetMachineId">Id of the target machine.</param>
            <param name="senderId">The id of the machine that sent the event, if any.</param>
            <param name="senderStateName">The name of the current state of the sender machine, if any.</param>
            <param name="eventName">The event being sent.</param>
            <param name="opGroupId">Id used to identify the send operation.</param>
            <param name="isTargetHalted">Is the target machine halted.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnCreateMachine(Microsoft.PSharp.MachineId,Microsoft.PSharp.MachineId)">
            <summary>
            Called when a machine has been created.
            </summary>
            <param name="machineId">The id of the machine that has been created.</param>
            <param name="creator">Id of the creator machine, null otherwise.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnCreateMonitor(System.String,Microsoft.PSharp.MachineId)">
            <summary>
            Called when a monitor has been created.
            </summary>
            <param name="monitorTypeName">The name of the type of the monitor that has been created.</param>
            <param name="monitorId">The id of the monitor that has been created.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnCreateTimer(Microsoft.PSharp.Timers.TimerInfo)">
            <summary>
            Called when a machine timer has been created.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnStopTimer(Microsoft.PSharp.Timers.TimerInfo)">
            <summary>
            Called when a machine timer has been stopped.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnHalt(Microsoft.PSharp.MachineId,System.Int32)">
            <summary>
            Called when a machine has been halted.
            </summary>
            <param name="machineId">The id of the machine that has been halted.</param>
            <param name="inboxSize">Approximate size of the machine inbox.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnRandom(Microsoft.PSharp.MachineId,System.Object)">
            <summary>
            Called when a random result has been obtained.
            </summary>
            <param name="machineId">The id of the source machine, if any; otherwise, the runtime itself was the source.</param>
            <param name="result">The random result (may be bool or int).</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnMachineState(Microsoft.PSharp.MachineId,System.String,System.Boolean)">
            <summary>
            Called when a machine enters or exits a state.
            </summary>
            <param name="machineId">The id of the machine entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited.</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnMachineEvent(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine raises an event.
            </summary>
            <param name="machineId">The id of the machine raising the event.</param>
            <param name="currStateName">The name of the current state of the machine raising the event.</param>
            <param name="eventName">The name of the event being raised.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnMachineAction(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine executes an action.
            </summary>
            <param name="machineId">The id of the machine executing the action.</param>
            <param name="currStateName">The name of the state in which the action is being executed.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnMachineExceptionThrown(Microsoft.PSharp.MachineId,System.String,System.String,System.Exception)">
            <summary>
            Called when a machine throws an exception
            </summary>
            <param name="machineId">The id of the machine that threw the exception.</param>
            <param name="currStateName">The name of the current machine state.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnMachineExceptionHandled(Microsoft.PSharp.MachineId,System.String,System.String,System.Exception)">
            <summary>
            Called when a machine's OnException method is used to handle a thrown exception
            </summary>
            <param name="machineId">The id of the machine that threw the exception.</param>
            <param name="currStateName">The name of the current machine state.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnMonitorState(System.String,Microsoft.PSharp.MachineId,System.String,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Called when a monitor enters or exits a state.
            </summary>
            <param name="monitorTypeName">The name of the monitor entering or exiting the state.</param>
            <param name="monitorId">The id of the monitor entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited; if <paramref name="isInHotState"/>
                is not null, then the temperature is appended to the statename in brackets, e.g. "stateName[hot]".</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
            <param name="isInHotState">If true, the monitor is in a hot state; if false, the monitor is in a cold state;
                else no liveness state is available.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnMonitorEvent(System.String,Microsoft.PSharp.MachineId,System.String,System.String,System.Boolean)">
            <summary>
            Called when a monitor is about to process or has raised an event.
            </summary>
            <param name="monitorTypeName">Name of type of the monitor that will process or has raised the event.</param>
            <param name="monitorId">Id of the monitor that will process or has raised the event.</param>
            <param name="currStateName">The name of the state in which the event is being raised.</param>
            <param name="eventName">The name of the event.</param>
            <param name="isProcessing">If true, the monitor is processing the event; otherwise it has raised it.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnMonitorAction(System.String,Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a monitor executes an action.
            </summary>
            <param name="monitorTypeName">Name of type of the monitor that is executing the action.</param>
            <param name="monitorId">Id of the monitor that is executing the action.</param>
            <param name="currStateName">The name of the state in which the action is being executed.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnError(System.String)">
            <summary>
            Called for general error reporting via pre-constructed text.
            </summary>
            <param name="text">The text of the error report.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.ILogger.OnStrategyError(Microsoft.PSharp.Utilities.SchedulingStrategy,System.String)">
            <summary>
            Called for errors detected by a specific scheduling strategy.
            </summary>
            <param name="strategy">The scheduling strategy that was used.</param>
            <param name="strategyDescription">More information about the scheduling strategy.</param>
        </member>
        <member name="T:Microsoft.PSharp.IO.InMemoryLogger">
            <summary>
            Thread safe logger that writes text in-memory.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.IO.InMemoryLogger.Writer">
            <summary>
            Underlying string writer.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.IO.InMemoryLogger.Lock">
            <summary>
            Serializes access to the string writer.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.InMemoryLogger.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.IO.InMemoryLogger"/> class.
            </summary>
            <param name="isVerbose">If true, then messages are logged.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.InMemoryLogger.Write(System.String)">
            <summary>
            Writes the specified string value.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.InMemoryLogger.Write(System.String,System.Object)">
            <summary>
            Writes the text representation of the specified argument.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.InMemoryLogger.Write(System.String,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified arguments.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.InMemoryLogger.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified arguments.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.InMemoryLogger.Write(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects.
            </summary>
            <param name="format">Text</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.InMemoryLogger.WriteLine(System.String)">
            <summary>
            Writes the specified string value, followed by the
            current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.InMemoryLogger.WriteLine(System.String,System.Object)">
            <summary>
            Writes the text representation of the specified argument, followed by the
            current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.InMemoryLogger.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified arguments, followed by the
            current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.InMemoryLogger.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified arguments, followed by the
            current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.InMemoryLogger.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects,
            followed by the current line terminator.
            </summary>
            <param name="format">Text</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.InMemoryLogger.ToString">
            <summary>
            Returns the logged text as a string.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.InMemoryLogger.Dispose">
            <summary>
            Disposes the logger.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.IO.LogWriter">
            <summary>
            Text writer that writes to the specified logger.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.IO.LogWriter.Logger">
            <summary>
            The installed logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.#ctor(Microsoft.PSharp.IO.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.IO.LogWriter"/> class.
            </summary>
            <param name="logger">ILogger</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.Boolean)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.Char)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.Char[])">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.Decimal)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.Double)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.Single)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.Int32)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.Int64)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.Object)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.String,System.Object)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.String,System.Object,System.Object)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.String,System.Object[])">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.String)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.UInt32)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.Write(System.UInt64)">
            <summary>
            Writes the specified input to the runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine">
            <summary>
            Writes a new line to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.Boolean)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.Char)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.Char[])">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.Decimal)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.Double)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.Single)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.Int32)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.Int64)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.Object)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.String,System.Object)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.String)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.UInt32)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.WriteLine(System.UInt64)">
            <summary>
            Writes the specified input to the runtime logger,
            followed by the current line terminator.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.IO.LogWriter.Encoding">
            <summary>
            The character encoding in which the output is written.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.LogWriter.ToString">
            <summary>
            Returns the logged text as a string.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.IO.MachineLogger">
            <summary>
            An implementation of <see cref="T:Microsoft.PSharp.IO.ILogger"/> that by default passes all logging
            commands to the variants of the <see cref="M:Microsoft.PSharp.IO.MachineLogger.Write(System.String)"/> method.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.IO.MachineLogger.IsVerbose">
            <summary>
            If true, then messages are logged. The default value is false.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.IO.MachineLogger"/> class.
            </summary>
            <param name="isVerbose">If true, then messages are logged. The default value is false.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.Write(System.String)">
            <summary>
            Writes the specified string value.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.Write(System.String,System.Object)">
            <summary>
            Writes the text representation of the specified argument.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.Write(System.String,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified arguments.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified arguments.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.Write(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects.
            </summary>
            <param name="format">Text</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.WriteLine(System.String)">
            <summary>
            Writes the specified string value, followed by the
            current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.WriteLine(System.String,System.Object)">
            <summary>
            Writes the text representation of the specified argument, followed by the
            current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified arguments, followed by the
            current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified arguments, followed by the
            current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects,
            followed by the current line terminator.
            </summary>
            <param name="format">Text</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnEnqueue(Microsoft.PSharp.MachineId,System.String)">
            <summary>
            Called when an event is about to be enqueued to a machine.
            </summary>
            <param name="machineId">Id of the machine that the event is being enqueued to.</param>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnEnqueueString(Microsoft.PSharp.MachineId,System.String)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnEnqueue(Microsoft.PSharp.MachineId,System.String)"/> event and its parameters.
            </summary>
            <param name="machineId">Id of the machine that the event is being enqueued to.</param>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnDequeue(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when an event is dequeued by a machine.
            </summary>
            <param name="machineId">Id of the machine that the event is being dequeued by.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnDequeueString(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnDequeue(Microsoft.PSharp.MachineId,System.String,System.String)"/> event and its parameters.
            </summary>
            <param name="machineId">Id of the machine that the event is being dequeued by.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnDefault(Microsoft.PSharp.MachineId,System.String)">
            <summary>
            Called when the default event handler for a state is about to be executed.
            </summary>
            <param name="machineId">Id of the machine that the state will execute in.</param>
            <param name="currStateName">Name of the current state of the machine.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnDefaultString(Microsoft.PSharp.MachineId,System.String)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnDefault(Microsoft.PSharp.MachineId,System.String)"/> event and its parameters.
            </summary>
            <param name="machineId">Id of the machine that the state will execute in.</param>
            <param name="currStateName">Name of the current state of the machine.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnGoto(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine transitions states via a 'goto'.
            </summary>
            <param name="machineId">Id of the machine.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="newStateName">The target state of goto.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnGotoString(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnGoto(Microsoft.PSharp.MachineId,System.String,System.String)"/> event and its parameters.
            </summary>
            <param name="machineId">Id of the machine.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="newStateName">The target state of goto.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnPush(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine is being pushed to a state.
            </summary>
            <param name="machineId">Id of the machine being pushed to the state.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="newStateName">The state the machine is pushed to.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnPushString(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnPush(Microsoft.PSharp.MachineId,System.String,System.String)"/> event and its parameters.
            </summary>
            <param name="machineId">Id of the machine being pushed to the state.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="newStateName">The state the machine is pushed to.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnPop(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine has been popped from a state.
            </summary>
            <param name="machineId">Id of the machine that the pop executed in.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="restoredStateName">The name of the state being re-entered, if any</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnPopString(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnPop(Microsoft.PSharp.MachineId,System.String,System.String)"/> event and its parameters.
            </summary>
            <param name="machineId">Id of the machine that the pop executed in.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="restoredStateName">The name of the state being re-entered, if any</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnPopUnhandledEvent(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            When an event cannot be handled in the current state, its exit handler is executed and then the state is
            popped and any previous "current state" is reentered. This handler is called when that pop has been done.
            </summary>
            <param name="machineId">Id of the machine that the pop executed in.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="eventName">The name of the event that cannot be handled.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnPopUnhandledEventString(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnPopUnhandledEvent(Microsoft.PSharp.MachineId,System.String,System.String)"/> event and its parameters.
            </summary>
            <param name="machineId">Id of the machine that the pop executed in.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="eventName">The name of the event that cannot be handled.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnReceive(Microsoft.PSharp.MachineId,System.String,System.String,System.Boolean)">
            <summary>
            Called when an event is received by a machine.
            </summary>
            <param name="machineId">Id of the machine that received the event.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="eventName">The name of the event.</param>
            <param name="wasBlocked">The machine was waiting for one or more specific events,
                and <paramref name="eventName"/> was one of them</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnReceiveString(Microsoft.PSharp.MachineId,System.String,System.String,System.Boolean)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnReceive(Microsoft.PSharp.MachineId,System.String,System.String,System.Boolean)"/> event and its parameters.
            </summary>
            <param name="machineId">Id of the machine that received the event.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="eventName">The name of the event.</param>
            <param name="wasBlocked">The machine was waiting for one or more specific events,
                and <paramref name="eventName"/> was one of them</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnWait(Microsoft.PSharp.MachineId,System.String,System.Type)">
            <summary>
            Called when a machine waits to receive an event of a specified type.
            </summary>
            <param name="machineId">Id of the machine that is entering the wait state.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="eventType">The type of the event being waited for.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnWaitString(Microsoft.PSharp.MachineId,System.String,System.Type)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnWait(Microsoft.PSharp.MachineId,System.String,System.Type)"/> event and its parameters.
            </summary>
            <param name="machineId">Id of the machine that is entering the wait state.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="eventType">The type of the event being waited for.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnWait(Microsoft.PSharp.MachineId,System.String,System.Type[])">
            <summary>
            Called when a machine waits to receive an event of one of the specified types.
            </summary>
            <param name="machineId">Id of the machine that is entering the wait state.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="eventTypes">The types of the events being waited for, if any.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnWaitString(Microsoft.PSharp.MachineId,System.String,System.Type[])">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnWait(Microsoft.PSharp.MachineId,System.String,System.Type[])"/> event and its parameters.
            </summary>
            <param name="machineId">Id of the machine that is entering the wait state.</param>
            <param name="currStateName">The name of the current state of the machine, if any.</param>
            <param name="eventTypes">The types of the events being waited for, if any.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnSend(Microsoft.PSharp.MachineId,Microsoft.PSharp.MachineId,System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Called when an event is sent to a target machine.
            </summary>
            <param name="targetMachineId">Id of the target machine.</param>
            <param name="senderId">The id of the machine that sent the event, if any.</param>
            <param name="senderStateName">The name of the current state of the sender machine, if any.</param>
            <param name="eventName">The event being sent.</param>
            <param name="opGroupId">Id used to identify the send operation.</param>
            <param name="isTargetHalted">Is the target machine halted.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnSendString(Microsoft.PSharp.MachineId,Microsoft.PSharp.MachineId,System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnSend(Microsoft.PSharp.MachineId,Microsoft.PSharp.MachineId,System.String,System.String,System.Guid,System.Boolean)"/> event and its parameters.
            </summary>
            <param name="targetMachineId">Id of the target machine.</param>
            <param name="senderId">The id of the machine that sent the event, if any.</param>
            <param name="senderStateName">The name of the current state of the sender machine, if any.</param>
            <param name="eventName">The event being sent.</param>
            <param name="opGroupId">Id used to identify the send operation.</param>
            <param name="isTargetHalted">Is the target machine halted.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnCreateMachine(Microsoft.PSharp.MachineId,Microsoft.PSharp.MachineId)">
            <summary>
            Called when a machine has been created.
            </summary>
            <param name="machineId">The id of the machine that has been created.</param>
            <param name="creator">Id of the creator machine, null otherwise.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnCreateMachineString(Microsoft.PSharp.MachineId,Microsoft.PSharp.MachineId)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnCreateMachine(Microsoft.PSharp.MachineId,Microsoft.PSharp.MachineId)"/> event and its parameters.
            </summary>
            <param name="machineId">The id of the machine that has been created.</param>
            <param name="creator">Id of the creator machine, null otherwise.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnCreateMonitor(System.String,Microsoft.PSharp.MachineId)">
            <summary>
            Called when a monitor has been created.
            </summary>
            <param name="monitorTypeName">The name of the type of the monitor that has been created.</param>
            <param name="monitorId">The id of the monitor that has been created.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnCreateMonitorString(System.String,Microsoft.PSharp.MachineId)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnCreateMonitor(System.String,Microsoft.PSharp.MachineId)"/> event and its parameters.
            </summary>
            <param name="monitorTypeName">The name of the type of the monitor that has been created.</param>
            <param name="monitorId">The id of the monitor that has been created.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnCreateTimer(Microsoft.PSharp.Timers.TimerInfo)">
            <summary>
            Called when a machine timer has been created.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnCreateTimerString(Microsoft.PSharp.Timers.TimerInfo)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnCreateTimer(Microsoft.PSharp.Timers.TimerInfo)"/> event and its parameters.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnStopTimer(Microsoft.PSharp.Timers.TimerInfo)">
            <summary>
            Called when a machine timer has been stopped.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnStopTimerString(Microsoft.PSharp.Timers.TimerInfo)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnStopTimer(Microsoft.PSharp.Timers.TimerInfo)"/> event and its parameters.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnHalt(Microsoft.PSharp.MachineId,System.Int32)">
            <summary>
            Called when a machine has been halted.
            </summary>
            <param name="machineId">The id of the machine that has been halted.</param>
            <param name="inboxSize">Approximate size of the machine inbox.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnHaltString(Microsoft.PSharp.MachineId,System.Int32)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnHalt(Microsoft.PSharp.MachineId,System.Int32)"/> event and its parameters.
            </summary>
            <param name="machineId">The id of the machine that has been halted.</param>
            <param name="inboxSize">Approximate size of the machine inbox.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnRandom(Microsoft.PSharp.MachineId,System.Object)">
            <summary>
            Called when a random result has been obtained.
            </summary>
            <param name="machineId">The id of the source machine, if any; otherwise, the runtime itself was the source.</param>
            <param name="result">The random result (may be bool or int).</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnRandomString(Microsoft.PSharp.MachineId,System.Object)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnRandom(Microsoft.PSharp.MachineId,System.Object)"/> event and its parameters.
            </summary>
            <param name="machineId">The id of the source machine, if any; otherwise, the runtime itself was the source.</param>
            <param name="result">The random result (may be bool or int).</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnMachineState(Microsoft.PSharp.MachineId,System.String,System.Boolean)">
            <summary>
            Called when a machine enters or exits a state.
            </summary>
            <param name="machineId">The id of the machine entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited.</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnMachineStateString(Microsoft.PSharp.MachineId,System.String,System.Boolean)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnMachineState(Microsoft.PSharp.MachineId,System.String,System.Boolean)"/> event and its parameters.
            </summary>
            <param name="machineId">The id of the machine entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited.</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnMachineEvent(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine raises an event.
            </summary>
            <param name="machineId">The id of the machine raising the event.</param>
            <param name="currStateName">The name of the state in which the action is being executed.</param>
            <param name="eventName">The name of the event being raised.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnMachineEventString(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnMachineEvent(Microsoft.PSharp.MachineId,System.String,System.String)"/> event and its parameters.
            </summary>
            <param name="machineId">The id of the machine raising the event.</param>
            <param name="currStateName">The name of the state in which the action is being executed.</param>
            <param name="eventName">The name of the event being raised.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnMachineAction(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a machine executes an action.
            </summary>
            <param name="machineId">The id of the machine executing the action.</param>
            <param name="currStateName">The name of the state in which the action is being executed.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnMachineActionString(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnMachineAction(Microsoft.PSharp.MachineId,System.String,System.String)"/> event and its parameters.
            </summary>
            <param name="machineId">The id of the machine executing the action.</param>
            <param name="currStateName">The name of the state in which the action is being executed.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnMachineExceptionThrown(Microsoft.PSharp.MachineId,System.String,System.String,System.Exception)">
            <summary>
            Called when a machine throws an exception
            </summary>
            <param name="machineId">The id of the machine that threw the exception.</param>
            <param name="currStateName">The name of the current machine state.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnMachineExceptionThrownString(Microsoft.PSharp.MachineId,System.String,System.String,System.Exception)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnMachineExceptionThrown(Microsoft.PSharp.MachineId,System.String,System.String,System.Exception)"/> event and its parameters.
            </summary>
            <param name="machineId">The id of the machine that threw the exception.</param>
            <param name="currStateName">The name of the current machine state.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnMachineExceptionHandled(Microsoft.PSharp.MachineId,System.String,System.String,System.Exception)">
            <summary>
            Called when a machine's OnException method is used to handle a thrown exception
            </summary>
            <param name="machineId">The id of the machine that threw the exception.</param>
            <param name="currStateName">The name of the current machine state.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnMachineExceptionHandledString(Microsoft.PSharp.MachineId,System.String,System.String,System.Exception)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnMachineExceptionHandled(Microsoft.PSharp.MachineId,System.String,System.String,System.Exception)"/> event and its parameters.
            </summary>
            <param name="machineId">The id of the machine that threw the exception.</param>
            <param name="currStateName">The name of the current machine state.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnMonitorState(System.String,Microsoft.PSharp.MachineId,System.String,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Called when a monitor enters or exits a state.
            </summary>
            <param name="monitorTypeName">The name of the type of the monitor entering or exiting the state</param>
            <param name="monitorId">The ID of the monitor entering or exiting the state</param>
            <param name="stateName">The name of the state being entered or exited; if <paramref name="isInHotState"/>
                is not null, then the temperature is appended to the statename in brackets, e.g. "stateName[hot]".</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
            <param name="isInHotState">If true, the monitor is in a hot state; if false, the monitor is in a cold state;
                else no liveness state is available.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnMonitorStateString(System.String,Microsoft.PSharp.MachineId,System.String,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnMonitorState(System.String,Microsoft.PSharp.MachineId,System.String,System.Boolean,System.Nullable{System.Boolean})"/> event and its parameters.
            </summary>
            <param name="monitorTypeName">The name of the type of the monitor entering or exiting the state</param>
            <param name="monitorId">The ID of the monitor entering or exiting the state</param>
            <param name="stateName">The name of the state being entered or exited; if <paramref name="isInHotState"/>
                is not null, then the temperature is appended to the statename in brackets, e.g. "stateName[hot]".</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
            <param name="isInHotState">If true, the monitor is in a hot state; if false, the monitor is in a cold state;
                else no liveness state is available.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnMonitorEvent(System.String,Microsoft.PSharp.MachineId,System.String,System.String,System.Boolean)">
            <summary>
            Called when a monitor is about to process or has raised an event.
            </summary>
            <param name="monitorTypeName">Name of type of the monitor that will process or has raised the event.</param>
            <param name="monitorId">ID of the monitor that will process or has raised the event</param>
            <param name="currStateName">The name of the state in which the event is being raised.</param>
            <param name="eventName">The name of the event.</param>
            <param name="isProcessing">If true, the monitor is processing the event; otherwise it has raised it.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnMonitorEventString(System.String,Microsoft.PSharp.MachineId,System.String,System.String,System.Boolean)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnMonitorEvent(System.String,Microsoft.PSharp.MachineId,System.String,System.String,System.Boolean)"/> event and its parameters.
            </summary>
            <param name="monitorTypeName">Name of type of the monitor that will process or has raised the event.</param>
            <param name="monitorId">ID of the monitor that will process or has raised the event</param>
            <param name="currStateName">The name of the state in which the event is being raised.</param>
            <param name="eventName">The name of the event.</param>
            <param name="isProcessing">If true, the monitor is processing the event; otherwise it has raised it.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnMonitorAction(System.String,Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Called when a monitor executes an action.
            </summary>
            <param name="monitorTypeName">Name of type of the monitor that is executing the action.</param>
            <param name="monitorId">ID of the monitor that is executing the action</param>
            <param name="currStateName">The name of the state in which the action is being executed.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnMonitorActionString(System.String,Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnMonitorAction(System.String,Microsoft.PSharp.MachineId,System.String,System.String)"/> event and its parameters.
            </summary>
            <param name="monitorTypeName">Name of type of the monitor that is executing the action.</param>
            <param name="monitorId">ID of the monitor that is executing the action</param>
            <param name="currStateName">The name of the state in which the action is being executed.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnError(System.String)">
            <summary>
            Called for general error reporting via pre-constructed text.
            </summary>
            <param name="text">The text of the error report.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnErrorString(System.String)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnError(System.String)"/> event and its parameters.
            </summary>
            <param name="text">The text of the error report.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.OnStrategyError(Microsoft.PSharp.Utilities.SchedulingStrategy,System.String)">
            <summary>
            Called for errors detected by a specific scheduling strategy.
            </summary>
            <param name="strategy">The scheduling strategy that was used.</param>
            <param name="strategyDescription">More information about the scheduling strategy.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.FormatOnStrategyErrorString(Microsoft.PSharp.Utilities.SchedulingStrategy,System.String)">
            <summary>
            Returns a string formatted for the <see cref="M:Microsoft.PSharp.IO.MachineLogger.OnStrategyError(Microsoft.PSharp.Utilities.SchedulingStrategy,System.String)"/> event and its parameters.
            </summary>
            <param name="strategy">The scheduling strategy that was used.</param>
            <param name="strategyDescription">More information about the scheduling strategy.</param>
        </member>
        <member name="M:Microsoft.PSharp.IO.MachineLogger.Dispose">
            <summary>
            Disposes the logger.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.IO.Output">
            <summary>
            Static class implementing output methods.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.IO.Output.Logger">
            <summary>
            The underlying logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.Output.Write(System.String)">
            <summary>
             Writes the specified string value to the output stream.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.Output.Write(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array
            of objects to the output stream.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.Output.WriteLine(System.String)">
            <summary>
            Writes the specified string value, followed by the
            current line terminator, to the output stream.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.IO.Output.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array
            of objects, followed by the current line terminator, to
            the output stream.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Net.INetworkProvider">
            <summary>
            Interface for a P# network provider.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Net.INetworkProvider.RemoteCreateMachine(System.Type,System.String,System.String,Microsoft.PSharp.Event)">
            <summary>
            Creates a new remote machine of the specified type
            and with the specified event. An optional friendly
            name can be specified. If the friendly name is null
            or the empty string, a default value will be given.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Net.INetworkProvider.RemoteSend(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event)">
            <summary>
            Sends an event to the specified remote machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Net.INetworkProvider.GetLocalEndpoint">
            <summary>
            Returns the local endpoint.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Net.LocalNetworkProvider">
            <summary>
            The local P# network provider.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Net.LocalNetworkProvider.Runtime">
            <summary>
            Instance of the P# runtime.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Net.LocalNetworkProvider.LocalEndpoint">
            <summary>
            The local endpoint.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Net.LocalNetworkProvider.#ctor(Microsoft.PSharp.IMachineRuntime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Net.LocalNetworkProvider"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Net.LocalNetworkProvider.Microsoft#PSharp#Net#INetworkProvider#RemoteCreateMachine(System.Type,System.String,System.String,Microsoft.PSharp.Event)">
            <summary>
            Creates a new remote machine of the specified type
            and with the specified event. An optional friendly
            name can be specified. If the friendly name is null
            or the empty string, a default value will be given.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Net.LocalNetworkProvider.Microsoft#PSharp#Net#INetworkProvider#RemoteSend(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event)">
            <summary>
            Sends an asynchronous event to a machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Net.LocalNetworkProvider.Microsoft#PSharp#Net#INetworkProvider#GetLocalEndpoint">
            <summary>
            Returns the local endpoint.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Net.LocalNetworkProvider.Dispose">
            <summary>
            Disposes the network provider.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.PSharpRuntime">
            <summary>
            The runtime for creating and executing machines.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.Create">
            <summary>
            Creates a new runtime.
            </summary>
            <returns>The created runtime.</returns>
        </member>
        <member name="M:Microsoft.PSharp.PSharpRuntime.Create(Microsoft.PSharp.Configuration)">
            <summary>
            Creates a new runtime with the specified <see cref="T:Microsoft.PSharp.Configuration"/>.
            </summary>
            <param name="configuration">The runtime configuration to use.</param>
            <returns>The created runtime.</returns>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.ActionBinding">
            <summary>
            Defines an action binding.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.ActionBinding.Name">
            <summary>
            Name of the action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ActionBinding.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Runtime.ActionBinding"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.DeferAction">
            <summary>
            Defines a defer action.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.EventActionHandler">
            <summary>
            An abstract event handler.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.EventWaitHandler">
            <summary>
            Defines an event wait handler.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.EventWaitHandler.EventType">
            <summary>
            Type of the event to handle.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.EventWaitHandler.Predicate">
            <summary>
            Handle the event only if the
            predicate evaluates to true.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.EventWaitHandler.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Runtime.EventWaitHandler"/> class.
            </summary>
            <param name="eventType">Event type</param>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.EventWaitHandler.#ctor(System.Type,System.Func{Microsoft.PSharp.Event,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Runtime.EventWaitHandler"/> class.
            </summary>
            <param name="eventType">Event type</param>
            <param name="predicate">Predicate</param>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.GotoStateTransition">
            <summary>
            Defines a goto state transition.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.GotoStateTransition.TargetState">
            <summary>
            The target state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.GotoStateTransition.Lambda">
            <summary>
            An optional lambda function that executes after the
            on-exit handler of the exiting state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.GotoStateTransition.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Runtime.GotoStateTransition"/> class.
            </summary>
            <param name="targetState">The target state.</param>
            <param name="lambda">Lambda function that executes after the on-exit handler of the exiting state.</param>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.GotoStateTransition.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Runtime.GotoStateTransition"/> class.
            </summary>
            <param name="targetState">The target state.</param>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.IgnoreAction">
            <summary>
            Defines a skip action binding (for ignore).
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.PushStateTransition">
            <summary>
            Defines a push state transition.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.PushStateTransition.TargetState">
            <summary>
            The target state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.PushStateTransition.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Runtime.PushStateTransition"/> class.
            </summary>
            <param name="targetState">The target state.</param>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.EventQueue">
            <summary>
            Implements a queue of events.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.EventQueue.MachineStateManager">
            <summary>
            Manages the state of the machine that owns this queue.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.EventQueue.Queue">
            <summary>
            The internal queue.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.EventQueue.RaisedEvent">
            <summary>
            The raised event and its metadata, or null if no event has been raised.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.EventQueue.EventWaitTypes">
            <summary>
            Map from the types of events that the owner of the queue is waiting to receive
            to an optional predicate. If an event of one of these types is enqueued, then
            if there is no predicate, or if there is a predicate and evaluates to true, then
            the event is received, else the event is deferred.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.EventQueue.ReceiveCompletionSource">
            <summary>
            Task completion source that contains the event obtained using an explicit receive.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.EventQueue.IsClosed">
            <summary>
            Checks if the queue is accepting new events.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Runtime.EventQueue.Size">
            <summary>
            The size of the queue.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Runtime.EventQueue.IsEventRaised">
            <summary>
            Checks if an event has been raised.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.EventQueue.#ctor(Microsoft.PSharp.Runtime.IMachineStateManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Runtime.EventQueue"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.EventQueue.Enqueue(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Enqueues the specified event and its optional metadata.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.EventQueue.Dequeue">
            <summary>
            Dequeues the next event, if there is one available.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.EventQueue.Raise(Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Enqueues the specified raised event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.EventQueue.ReceiveAsync(System.Type,System.Func{Microsoft.PSharp.Event,System.Boolean})">
            <summary>
            Waits to receive an event of the specified type that satisfies an optional predicate.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.EventQueue.ReceiveAsync(System.Type[])">
            <summary>
            Waits to receive an event of the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.EventQueue.ReceiveAsync(System.Tuple{System.Type,System.Func{Microsoft.PSharp.Event,System.Boolean}}[])">
            <summary>
            Waits to receive an event of the specified types that satisfy the specified predicates.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.EventQueue.ReceiveAsync(System.Collections.Generic.Dictionary{System.Type,System.Func{Microsoft.PSharp.Event,System.Boolean}})">
            <summary>
            Waits for an event to be enqueued based on the conditions defined in the event wait types.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.EventQueue.GetCachedState">
            <summary>
            Returns the cached state of the queue.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.EventQueue.Close">
            <summary>
            Closes the queue, which stops any further event enqueues.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.EventQueue.Dispose(System.Boolean)">
            <summary>
            Disposes the queue resources.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.EventQueue.Dispose">
            <summary>
            Disposes the queue resources.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.IEventQueue">
            <summary>
            Interface of a queue of events.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Runtime.IEventQueue.Size">
            <summary>
            The size of the queue.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Runtime.IEventQueue.IsEventRaised">
            <summary>
            Checks if an event has been raised.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.IEventQueue.Enqueue(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Enqueues the specified event and its optional metadata.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.IEventQueue.Dequeue">
            <summary>
            Dequeues the next event, if there is one available.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.IEventQueue.Raise(Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Enqueues the specified raised event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.IEventQueue.ReceiveAsync(System.Type,System.Func{Microsoft.PSharp.Event,System.Boolean})">
            <summary>
            Waits to receive an event of the specified type that satisfies an optional predicate.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.IEventQueue.ReceiveAsync(System.Type[])">
            <summary>
            Waits to receive an event of the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.IEventQueue.ReceiveAsync(System.Tuple{System.Type,System.Func{Microsoft.PSharp.Event,System.Boolean}}[])">
            <summary>
            Waits to receive an event of the specified types that satisfy the specified predicates.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.IEventQueue.GetCachedState">
            <summary>
            Returns the cached state of the queue.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.IEventQueue.Close">
            <summary>
            Closes the queue, which stops any further event enqueues.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.EventOriginInfo">
            <summary>
            Contains the origin information of an <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Runtime.EventOriginInfo.SenderMachineId">
            <summary>
            The sender machine id.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Runtime.EventOriginInfo.SenderMachineName">
            <summary>
            The sender machine name.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Runtime.EventOriginInfo.SenderStateName">
            <summary>
            The sender machine state name.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.EventOriginInfo.#ctor(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Runtime.EventOriginInfo"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.AssertionFailureException">
            <summary>
            The exception that is thrown by the P# runtime upon assertion failure.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.AssertionFailureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> class.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.AssertionFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> class.
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.ExecutionCanceledException">
            <summary>
            The exception that is thrown in a P# machine upon cancellation
            of execution by the P# runtime.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ExecutionCanceledException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Runtime.ExecutionCanceledException"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.MachineActionExceptionFilterException">
            <summary>
            The exception that is thrown by the P# runtime upon a machine action failure.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineActionExceptionFilterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Runtime.MachineActionExceptionFilterException"/> class.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineActionExceptionFilterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Runtime.MachineActionExceptionFilterException"/> class.
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.OnEventDroppedHandler">
            <summary>
            Handles the <see cref="E:Microsoft.PSharp.IMachineRuntime.OnEventDropped"/> event.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.OnExceptionOutcome">
            <summary>
            The outcome when a machine throws an exception.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.OnExceptionOutcome.ThrowException">
            <summary>
            Throw the exception causing the runtime to fail.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.OnExceptionOutcome.HandledException">
            <summary>
            The exception was handled and Machine should continue execution.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.OnExceptionOutcome.HaltMachine">
            <summary>
            Halt the machine (do not throw the exception).
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.OnFailureHandler">
            <summary>
            Handles the <see cref="E:Microsoft.PSharp.IMachineRuntime.OnFailure"/> event.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.RuntimeException">
            <summary>
            An exception that is thrown by the P# runtime.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.RuntimeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Runtime.RuntimeException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.RuntimeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Runtime.RuntimeException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.RuntimeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Runtime.RuntimeException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.RuntimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Runtime.RuntimeException"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.UnhandledEventException">
            <summary>
            Signals that a machine received an unhandled event.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.UnhandledEventException.CurrentStateName">
            <summary>
            Name of the current state of the machine.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.UnhandledEventException.UnhandledEvent">
            <summary>
             The event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.UnhandledEventException.#ctor(System.String,Microsoft.PSharp.Event,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Runtime.UnhandledEventException"/> class.
            </summary>
            <param name="currentStateName">Current state name.</param>
            <param name="unhandledEvent">The event that was unhandled.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.MachineRuntime">
            <summary>
            Runtime for executing machines asynchronously.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.MachineRuntime.Configuration">
            <summary>
            The configuration used by the runtime.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.MachineRuntime.MachineIdCounter">
            <summary>
            Monotonically increasing machine id counter.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.MachineRuntime.IsRunning">
            <summary>
            Records if the runtime is running.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.MachineRuntime.MachineMap">
            <summary>
            Map from unique machine ids to machines.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Runtime.MachineRuntime.Logger">
            <summary>
            The installed logger.
            </summary>
        </member>
        <member name="E:Microsoft.PSharp.Runtime.MachineRuntime.OnFailure">
            <summary>
            Callback that is fired when the P# program throws an exception.
            </summary>
        </member>
        <member name="E:Microsoft.PSharp.Runtime.MachineRuntime.OnEventDropped">
            <summary>
            Callback that is fired when a P# event is dropped.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.#ctor(Microsoft.PSharp.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Runtime.MachineRuntime"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.CreateMachineId(System.Type,System.String)">
            <summary>
            Creates a fresh machine id that has not yet been bound to any machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.CreateMachineIdFromName(System.Type,System.String)">
            <summary>
            Creates a machine id that is uniquely tied to the specified unique name. The
            returned machine id can either be a fresh id (not yet bound to any machine),
            or it can be bound to a previously created machine. In the second case, this
            machine id can be directly used to communicate with the corresponding machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.CreateMachine(System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and with
            the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be
            used to access its payload, and cannot be handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.CreateMachine(System.Type,System.String,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and name, and
            with the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be
            used to access its payload, and cannot be handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.CreateMachine(Microsoft.PSharp.MachineId,System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified type, using the specified <see cref="T:Microsoft.PSharp.MachineId"/>.
            This method optionally passes an <see cref="T:Microsoft.PSharp.Event"/> to the new machine, which can only
            be used to access its payload, and cannot be handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.CreateMachineAndExecuteAsync(System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and with the
            specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used to
            access its payload, and cannot be handled. The method returns only when
            the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.CreateMachineAndExecuteAsync(System.Type,System.String,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and name, and with
            the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used to
            access its payload, and cannot be handled. The method returns only when the
            machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.CreateMachineAndExecuteAsync(Microsoft.PSharp.MachineId,System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/>, using the specified
            unbound machine id, and passes the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This
            event can only be used to access its payload, and cannot be handled. The method
            returns only when the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any)
            is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.CreateMachineAndExecute(System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and with the
            specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used to
            access its payload, and cannot be handled. The method returns only when
            the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.CreateMachineAndExecute(System.Type,System.String,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and name, and with
            the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used to
            access its payload, and cannot be handled. The method returns only when the
            machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.CreateMachineAndExecute(Microsoft.PSharp.MachineId,System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/>, using the specified
            unbound machine id, and passes the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This
            event can only be used to access its payload, and cannot be handled. The method
            returns only when the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any)
            is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.SendEvent(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.SendEventAndExecuteAsync(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an <see cref="T:Microsoft.PSharp.Event"/> to a machine. Returns immediately if the target machine was already
            running. Otherwise blocks until the machine handles the event and reaches quiescense.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.SendEventAndExecute(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an <see cref="T:Microsoft.PSharp.Event"/> to a machine. Returns immediately if the target machine was already
            running. Otherwise blocks until the machine handles the event and reaches quiescense.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.RegisterMonitor(System.Type)">
            <summary>
            Registers a new specification monitor of the specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.InvokeMonitor``1(Microsoft.PSharp.Event)">
            <summary>
            Invokes the specified monitor with the specified <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.InvokeMonitor(System.Type,Microsoft.PSharp.Event)">
            <summary>
            Invokes the specified monitor with the specified <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.Random">
            <summary>
            Returns a nondeterministic boolean choice, that can be controlled
            during analysis or testing.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.FairRandom(System.String,System.String,System.Int32)">
            <summary>
            Returns a fair nondeterministic boolean choice, that can be
            controlled during analysis or testing.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.Random(System.Int32)">
            <summary>
            Returns a nondeterministic boolean choice, that can be controlled
            during analysis or testing. The value is used to generate a number
            in the range [0..maxValue), where 0 triggers true.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.RandomInteger(System.Int32)">
            <summary>
            Returns a nondeterministic integer, that can be controlled during
            analysis or testing. The value is used to generate an integer in
            the range [0..maxValue).
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.GetCurrentOperationGroupId(Microsoft.PSharp.MachineId)">
            <summary>
            Returns the operation group id of the specified machine. During testing,
            the runtime asserts that the specified machine is currently executing.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.Stop">
            <summary>
            Terminates the runtime and notifies each active machine to halt execution.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.CreateMachine(Microsoft.PSharp.MachineId,System.Type,System.String,Microsoft.PSharp.Event,Microsoft.PSharp.Machine,System.Guid)">
            <summary>
            Creates a new <see cref="T:Microsoft.PSharp.Machine"/> of the specified <see cref="T:System.Type"/>.
            </summary>
            <returns>MachineId</returns>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.CreateMachineAndExecuteAsync(Microsoft.PSharp.MachineId,System.Type,System.String,Microsoft.PSharp.Event,Microsoft.PSharp.Machine,System.Guid)">
            <summary>
            Creates a new <see cref="T:Microsoft.PSharp.Machine"/> of the specified <see cref="T:System.Type"/>. The
            method returns only when the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/>
            (if any) is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.SendEvent(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.Runtime.AsyncMachine,System.Guid,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.SendEventAndExecuteAsync(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.Runtime.AsyncMachine,System.Guid,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a machine. Returns immediately if the target machine was
            already running. Otherwise blocks until the machine handles the event and reaches quiescense.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.CreateMachineTimer(Microsoft.PSharp.Timers.TimerInfo,Microsoft.PSharp.Machine)">
            <summary>
            Creates a new timer that sends a <see cref="T:Microsoft.PSharp.Timers.TimerElapsedEvent"/> to its owner machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.TryCreateMonitor(System.Type)">
            <summary>
            Tries to create a new <see cref="T:Microsoft.PSharp.Monitor"/> of the specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.Monitor(System.Type,Microsoft.PSharp.Runtime.AsyncMachine,Microsoft.PSharp.Event)">
            <summary>
            Invokes the specified <see cref="T:Microsoft.PSharp.Monitor"/> with the specified <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.Assert(System.Boolean)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.GetNondeterministicBooleanChoice(Microsoft.PSharp.Runtime.AsyncMachine,System.Int32)">
            <summary>
            Returns a nondeterministic boolean choice, that can be
            controlled during analysis or testing.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.GetFairNondeterministicBooleanChoice(Microsoft.PSharp.Runtime.AsyncMachine,System.String)">
            <summary>
            Returns a fair nondeterministic boolean choice, that can be
            controlled during analysis or testing.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.GetNondeterministicIntegerChoice(Microsoft.PSharp.Runtime.AsyncMachine,System.Int32)">
            <summary>
            Returns a nondeterministic integer choice, that can be
            controlled during analysis or testing.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.GetMachineFromId``1(Microsoft.PSharp.MachineId)">
            <summary>
            Gets the machine of type <typeparamref name="TMachine"/> with the specified id,
            or null if no such machine exists.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.NotifyEnteredState(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that a machine entered a state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.NotifyEnteredState(Microsoft.PSharp.Monitor)">
            <summary>
            Notifies that a monitor entered a state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.NotifyExitedState(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that a machine exited a state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.NotifyExitedState(Microsoft.PSharp.Monitor)">
            <summary>
            Notifies that a monitor exited a state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.NotifyInvokedAction(Microsoft.PSharp.Machine,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a machine invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.NotifyCompletedAction(Microsoft.PSharp.Machine,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a machine completed invoking an action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.NotifyInvokedOnEntryAction(Microsoft.PSharp.Machine,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a machine invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.NotifyCompletedOnEntryAction(Microsoft.PSharp.Machine,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a machine completed invoking an action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.NotifyInvokedOnExitAction(Microsoft.PSharp.Machine,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a machine invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.NotifyCompletedOnExitAction(Microsoft.PSharp.Machine,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a machine completed invoking an action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.NotifyInvokedAction(Microsoft.PSharp.Monitor,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a monitor invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.NotifyRaisedEvent(Microsoft.PSharp.Machine,Microsoft.PSharp.Event,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine raised an <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.NotifyRaisedEvent(Microsoft.PSharp.Monitor,Microsoft.PSharp.Event,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a monitor raised an <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.NotifyDequeuedEvent(Microsoft.PSharp.Machine,Microsoft.PSharp.Event,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine dequeued an <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.NotifyPop(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that a machine invoked pop.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.NotifyReceiveCalled(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that a machine called Receive.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.NotifyHandleRaisedEvent(Microsoft.PSharp.Machine,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a machine is handling a raised <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.NotifyWaitEvent(Microsoft.PSharp.Machine,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Notifies that a machine is waiting to receive an event of one of the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.NotifyReceivedEvent(Microsoft.PSharp.Machine,Microsoft.PSharp.Event,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine enqueued an event that it was waiting to receive.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.NotifyReceivedEventWithoutWaiting(Microsoft.PSharp.Machine,Microsoft.PSharp.Event,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine received an event without waiting because the event
            was already in the inbox when the machine invoked the receive statement.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.NotifyHalted(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that a machine has halted.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.NotifyDefaultEventHandlerCheck(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that the inbox of the specified machine is about to be
            checked to see if the default event handler should fire.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.NotifyDefaultHandlerFired(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that the default handler of the specified machine has been fired.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.SetLogger(Microsoft.PSharp.IO.ILogger)">
            <summary>
            Installs the specified <see cref="T:Microsoft.PSharp.IO.ILogger"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.RaiseOnFailureEvent(System.Exception)">
            <summary>
            Raises the <see cref="E:Microsoft.PSharp.Runtime.MachineRuntime.OnFailure"/> event with the specified <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.TryHandleDroppedEvent(Microsoft.PSharp.Event,Microsoft.PSharp.MachineId)">
            <summary>
            Tries to handle the specified dropped <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.WrapAndThrowException(System.Exception,System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception
            containing the specified exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.Dispose(System.Boolean)">
            <summary>
            Disposes runtime resources.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineRuntime.Dispose">
            <summary>
            Disposes runtime resources.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.AsyncMachine">
            <summary>
            Implements a machine that can execute asynchronously.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Runtime.AsyncMachine.Runtime">
            <summary>
            The runtime that executes this machine.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Runtime.AsyncMachine.Id">
            <summary>
            The unique machine id.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Runtime.AsyncMachine.OperationGroupId">
            <summary>
            Id used to identify subsequent operations performed by this machine.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Runtime.AsyncMachine.Logger">
            <summary>
            The logger installed to the P# runtime.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.AsyncMachine.Initialize(Microsoft.PSharp.Runtime.MachineRuntime,Microsoft.PSharp.MachineId)">
            <summary>
            Initializes this machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.AsyncMachine.GetCachedState">
            <summary>
            Returns the cached state of this machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.AsyncMachine.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.AsyncMachine.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.AsyncMachine.ToString">
            <summary>
            Returns a string that represents the current machine.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.DequeueStatus">
            <summary>
            The status returned as the result of a dequeue operation.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.DequeueStatus.Success">
            <summary>
            An event was successfully dequeued.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.DequeueStatus.Raised">
            <summary>
            The raised event was dequeued.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.DequeueStatus.Default">
            <summary>
            The default event was dequeued.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.DequeueStatus.NotAvailable">
            <summary>
            No event available to dequeue.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.EnqueueStatus">
            <summary>
            The status returned as the result of an enqueue operation.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.EnqueueStatus.EventHandlerRunning">
            <summary>
            The event handler is already running.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.EnqueueStatus.EventHandlerNotRunning">
            <summary>
            The event handler is not running.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.EnqueueStatus.Received">
            <summary>
            The event was used to wake a machine at a receive statement.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.EnqueueStatus.NextEventUnavailable">
            <summary>
            There is no next event available to dequeue and handle.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.EnqueueStatus.Dropped">
            <summary>
            The event was dropped.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.IMachineStateManager">
            <summary>
            Interface for managing the state of a machine.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Runtime.IMachineStateManager.IsEventHandlerRunning">
            <summary>
            True if the event handler of the machine is running, else false.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Runtime.IMachineStateManager.OperationGroupId">
            <summary>
            Id used to identify subsequent operations performed by the machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.IMachineStateManager.GetCachedState">
            <summary>
            Returns the cached state of the machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.IMachineStateManager.IsEventIgnoredInCurrentState(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Checks if the specified event is ignored in the current machine state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.IMachineStateManager.IsEventDeferredInCurrentState(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Checks if the specified event is deferred in the current machine state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.IMachineStateManager.IsDefaultHandlerInstalledInCurrentState">
            <summary>
            Checks if a default handler is installed in the current machine state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.IMachineStateManager.OnEnqueueEvent(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies the machine that an event has been enqueued.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.IMachineStateManager.OnRaiseEvent(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies the machine that an event has been raised.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.IMachineStateManager.OnWaitEvent(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Notifies the machine that it is waiting to receive an event of one of the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.IMachineStateManager.OnReceiveEvent(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies the machine that an event it was waiting to receive has been enqueued.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.IMachineStateManager.OnReceiveEventWithoutWaiting(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies the machine that an event it was waiting to receive was already in the
            event queue when the machine invoked the receive statement.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.IMachineStateManager.OnDropEvent(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies the machine that an event has been dropped.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.IMachineStateManager.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.IMachineStateManager.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.IMachineStateManager.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.IMachineStateManager.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.MachineFactory">
            <summary>
            Factory for creating machines.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.MachineFactory.MachineConstructorCache">
            <summary>
            Cache storing machine constructors.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineFactory.Create(System.Type)">
            <summary>
            Creates a new <see cref="T:Microsoft.PSharp.Machine"/> of the specified type.
            </summary>
            <param name="type">Type of the machine.</param>
            <returns>The created machine.</returns>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineFactory.IsCached(System.Type)">
            <summary>
            Checks if the constructor of the specified machine type exists in the cache.
            </summary>
            <param name="type">Type of the machine.</param>
            <returns>True if the constructor exists, else false.</returns>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.MachineStateManager">
            <summary>
            Manages the state of a machine.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.MachineStateManager.Runtime">
            <summary>
            The runtime that executes the machine being managed.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.MachineStateManager.Machine">
            <summary>
            The machine being managed.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Runtime.MachineStateManager.IsEventHandlerRunning">
            <summary>
            True if the event handler of the machine is running, else false.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Runtime.MachineStateManager.OperationGroupId">
            <summary>
            Id used to identify subsequent operations performed by the machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineStateManager.#ctor(Microsoft.PSharp.Runtime.MachineRuntime,Microsoft.PSharp.Machine,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Runtime.MachineStateManager"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineStateManager.GetCachedState">
            <summary>
            Returns the cached state of the machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineStateManager.IsEventIgnoredInCurrentState(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Checks if the specified event is ignored in the current machine state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineStateManager.IsEventDeferredInCurrentState(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Checks if the specified event is deferred in the current machine state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineStateManager.IsDefaultHandlerInstalledInCurrentState">
            <summary>
            Checks if a default handler is installed in the current machine state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineStateManager.OnEnqueueEvent(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies the machine that an event has been enqueued.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineStateManager.OnRaiseEvent(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies the machine that an event has been raised.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineStateManager.OnWaitEvent(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Notifies the machine that it is waiting to receive an event of one of the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineStateManager.OnReceiveEvent(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies the machine that an event it was waiting to receive has been enqueued.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineStateManager.OnReceiveEventWithoutWaiting(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies the machine that an event it was waiting to receive was already in the
            event queue when the machine invoked the receive statement.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineStateManager.OnDropEvent(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies the machine that an event has been dropped.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineStateManager.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineStateManager.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineStateManager.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.MachineStateManager.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Runtime.ProductionRuntime">
            <summary>
            Runtime for executing machines in production.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Runtime.ProductionRuntime.Monitors">
            <summary>
            List of monitors in the program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Runtime.ProductionRuntime"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.#ctor(Microsoft.PSharp.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Runtime.ProductionRuntime"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.CreateMachineIdFromName(System.Type,System.String)">
            <summary>
            Creates a machine id that is uniquely tied to the specified unique name. The
            returned machine id can either be a fresh id (not yet bound to any machine),
            or it can be bound to a previously created machine. In the second case, this
            machine id can be directly used to communicate with the corresponding machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.CreateMachine(System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and with
            the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be
            used to access its payload, and cannot be handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.CreateMachine(System.Type,System.String,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and name, and
            with the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be
            used to access its payload, and cannot be handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.CreateMachine(Microsoft.PSharp.MachineId,System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified type, using the specified <see cref="T:Microsoft.PSharp.MachineId"/>.
            This method optionally passes an <see cref="T:Microsoft.PSharp.Event"/> to the new machine, which can only
            be used to access its payload, and cannot be handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.CreateMachineAndExecuteAsync(System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and with the
            specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used to
            access its payload, and cannot be handled. The method returns only when
            the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.CreateMachineAndExecuteAsync(System.Type,System.String,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and name, and with
            the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used to
            access its payload, and cannot be handled. The method returns only when the
            machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.CreateMachineAndExecuteAsync(Microsoft.PSharp.MachineId,System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/>, using the specified
            unbound machine id, and passes the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This
            event can only be used to access its payload, and cannot be handled. The method
            returns only when the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any)
            is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.CreateMachineAndExecute(System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and with the
            specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used to
            access its payload, and cannot be handled. The method returns only when
            the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.CreateMachineAndExecute(System.Type,System.String,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and name, and with
            the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used to
            access its payload, and cannot be handled. The method returns only when the
            machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.CreateMachineAndExecute(Microsoft.PSharp.MachineId,System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/>, using the specified
            unbound machine id, and passes the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This
            event can only be used to access its payload, and cannot be handled. The method
            returns only when the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any)
            is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.SendEvent(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.SendEventAndExecuteAsync(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an <see cref="T:Microsoft.PSharp.Event"/> to a machine. Returns immediately if the target machine was already
            running. Otherwise blocks until the machine handles the event and reaches quiescense.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.SendEventAndExecute(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an <see cref="T:Microsoft.PSharp.Event"/> to a machine. Returns immediately if the target machine was already
            running. Otherwise blocks until the machine handles the event and reaches quiescense.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.GetCurrentOperationGroupId(Microsoft.PSharp.MachineId)">
            <summary>
            Returns the operation group id of the specified machine. Returns <see cref="F:System.Guid.Empty"/>
            if the id is not set, or if the <see cref="T:Microsoft.PSharp.MachineId"/> is not associated with this runtime.
            During testing, the runtime asserts that the specified machine is currently executing.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.CreateMachine(Microsoft.PSharp.MachineId,System.Type,System.String,Microsoft.PSharp.Event,Microsoft.PSharp.Machine,System.Guid)">
            <summary>
            Creates a new <see cref="T:Microsoft.PSharp.Machine"/> of the specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.CreateMachineAndExecuteAsync(Microsoft.PSharp.MachineId,System.Type,System.String,Microsoft.PSharp.Event,Microsoft.PSharp.Machine,System.Guid)">
            <summary>
            Creates a new <see cref="T:Microsoft.PSharp.Machine"/> of the specified <see cref="T:System.Type"/>. The
            method returns only when the created machine reaches quiescence.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.CreateMachine(Microsoft.PSharp.MachineId,System.Type,System.String,Microsoft.PSharp.Machine,System.Guid)">
            <summary>
            Creates a new <see cref="T:Microsoft.PSharp.Machine"/> of the specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.SendEvent(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.Runtime.AsyncMachine,System.Guid,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.SendEventAndExecuteAsync(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.Runtime.AsyncMachine,System.Guid,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a machine. Returns immediately if the target machine was
            already running. Otherwise blocks until the machine handles the event and reaches quiescense.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.EnqueueEvent(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.Runtime.AsyncMachine,System.Guid,Microsoft.PSharp.Machine@)">
            <summary>
            Enqueues an event to the machine with the specified id.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.RunMachineEventHandler(Microsoft.PSharp.Machine,Microsoft.PSharp.Event,System.Boolean)">
            <summary>
            Runs a new asynchronous machine event handler.
            This is a fire and forget invocation.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.RunMachineEventHandlerAsync(Microsoft.PSharp.Machine,Microsoft.PSharp.Event,System.Boolean)">
            <summary>
            Runs a new asynchronous machine event handler.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.CreateMachineTimer(Microsoft.PSharp.Timers.TimerInfo,Microsoft.PSharp.Machine)">
            <summary>
            Creates a new timer that sends a <see cref="T:Microsoft.PSharp.Timers.TimerElapsedEvent"/> to its owner machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.TryCreateMonitor(System.Type)">
            <summary>
            Tries to create a new <see cref="T:Microsoft.PSharp.Monitor"/> of the specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.Monitor(System.Type,Microsoft.PSharp.Runtime.AsyncMachine,Microsoft.PSharp.Event)">
            <summary>
            Invokes the specified <see cref="T:Microsoft.PSharp.Monitor"/> with the specified <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.GetNondeterministicBooleanChoice(Microsoft.PSharp.Runtime.AsyncMachine,System.Int32)">
            <summary>
            Returns a nondeterministic boolean choice, that can be
            controlled during analysis or testing.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.GetFairNondeterministicBooleanChoice(Microsoft.PSharp.Runtime.AsyncMachine,System.String)">
            <summary>
            Returns a fair nondeterministic boolean choice, that can be
            controlled during analysis or testing.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.GetNondeterministicIntegerChoice(Microsoft.PSharp.Runtime.AsyncMachine,System.Int32)">
            <summary>
            Returns a nondeterministic integer choice, that can be
            controlled during analysis or testing.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.NotifyEnteredState(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that a machine entered a state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.NotifyEnteredState(Microsoft.PSharp.Monitor)">
            <summary>
            Notifies that a monitor entered a state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.NotifyExitedState(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that a machine exited a state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.NotifyExitedState(Microsoft.PSharp.Monitor)">
            <summary>
            Notifies that a monitor exited a state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.NotifyInvokedAction(Microsoft.PSharp.Machine,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a machine invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.NotifyInvokedOnEntryAction(Microsoft.PSharp.Machine,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a machine invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.NotifyInvokedOnExitAction(Microsoft.PSharp.Machine,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a machine invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.NotifyInvokedAction(Microsoft.PSharp.Monitor,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a monitor invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.NotifyRaisedEvent(Microsoft.PSharp.Machine,Microsoft.PSharp.Event,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine raised an <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.NotifyRaisedEvent(Microsoft.PSharp.Monitor,Microsoft.PSharp.Event,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a monitor raised an <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.NotifyDequeuedEvent(Microsoft.PSharp.Machine,Microsoft.PSharp.Event,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine dequeued an <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.NotifyWaitEvent(Microsoft.PSharp.Machine,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Notifies that a machine is waiting to receive an event of one of the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.NotifyReceivedEvent(Microsoft.PSharp.Machine,Microsoft.PSharp.Event,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine enqueued an event that it was waiting to receive.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.NotifyReceivedEventWithoutWaiting(Microsoft.PSharp.Machine,Microsoft.PSharp.Event,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine received an event without waiting because the event
            was already in the inbox when the machine invoked the receive statement.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Runtime.ProductionRuntime.Dispose(System.Boolean)">
            <summary>
            Disposes runtime resources.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Default">
            <summary>
            The default event.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Default.Event">
            <summary>
            Gets an instance of the default event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Default.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Default"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Event">
            <summary>
            Abstract class representing an event.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.EventInfo">
            <summary>
            Contains an <see cref="T:Microsoft.PSharp.Event"/>, and its associated metadata.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.EventInfo.EventName">
            <summary>
            Event name.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.EventInfo.OriginInfo">
            <summary>
            Information regarding the event origin.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.EventInfo.MustHandle">
            <summary>
            True if this event must always be handled, else false.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.EventInfo.Assert">
            <summary>
            Specifies that there must not be more than N instances of the
            event in the inbox queue of the receiver machine.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.EventInfo.Assume">
            <summary>
            Speciﬁes that during testing, an execution that increases the cardinality of the
            event beyond N in the receiver machine inbox queue must not be generated.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.EventInfo.HashedState">
            <summary>
            User-defined hash of the event payload. The default value is 0. Set it to a custom value
            to improve the accuracy of liveness checking when state-caching is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.EventInfo.SendStep">
            <summary>
            The step from which this event was sent.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.EventInfo.#ctor(Microsoft.PSharp.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.EventInfo"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.EventInfo.#ctor(Microsoft.PSharp.Event,Microsoft.PSharp.Runtime.EventOriginInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.EventInfo"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.GotoStateEvent">
            <summary>
            The goto state event.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.GotoStateEvent.State">
            <summary>
            Type of the state to transition to.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.GotoStateEvent.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.GotoStateEvent"/> class.
            </summary>
            <param name="s">Type of the state.</param>
        </member>
        <member name="T:Microsoft.PSharp.Halt">
            <summary>
            The halt event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Halt.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Halt"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.PushStateEvent">
            <summary>
            The push state event.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.PushStateEvent.State">
            <summary>
            Type of the state to transition to.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.PushStateEvent.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.PushStateEvent"/> class.
            </summary>
            <param name="s">Type of the state.</param>
        </member>
        <member name="T:Microsoft.PSharp.WildCardEvent">
            <summary>
            The wild card event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.WildCardEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.WildCardEvent"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Machine">
            <summary>
            Implements an asynchronous communicating state machine. Inherit from this class
            to declare states, state transitions and event handlers.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.StateTypeMap">
            <summary>
            Map from machine types to a set of all possible states types.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.StateMap">
            <summary>
            Map from machine types to a set of all available states.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.MachineActionMap">
            <summary>
            Map from machine types to a set of all available actions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.MachineStateCached">
            <summary>
            Checks if the machine state is cached.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Machine.StateManager">
            <summary>
            Manages the state of the machine.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.StateStack">
            <summary>
            A stack of machine states. The state on the top of
            the stack represents the current state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.ActionHandlerStack">
            <summary>
            A stack of maps that determine event handling action for
            each event type. These maps do not keep transition handlers.
            This stack has always the same height as StateStack.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.GotoTransitions">
            <summary>
            Dictionary containing all the current goto state transitions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.PushTransitions">
            <summary>
            Dictionary containing all the current push state transitions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.ActionMap">
            <summary>
            Map from action names to actions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.Inbox">
            <summary>
            The inbox of the machine. Incoming events are enqueued here.
            Events are dequeued to be processed.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.Timers">
            <summary>
            Map that contains the active timers.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.IsHalted">
            <summary>
            Is the machine halted.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.IsPopInvoked">
            <summary>
            Is pop invoked in the current action.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Machine.OnExceptionRequestedGracefulHalt">
            <summary>
            User OnException asked for the machine to be gracefully halted
            (suppressing the exception)
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Machine.CurrentState">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current state.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Machine.CurrentActionHandlerMap">
            <summary>
            Gets the current action handler map.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Machine.CurrentStateName">
            <summary>
            Gets the name of the current state.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Machine.ReceivedEvent">
            <summary>
            Gets the latest received <see cref="T:Microsoft.PSharp.Event"/>, or null if
            no <see cref="T:Microsoft.PSharp.Event"/> has been received.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Machine.OperationGroupId">
            <summary>
            Id used to identify subsequent operations performed by this machine. This value is
            initially either <see cref="F:System.Guid.Empty"/> or the <see cref="T:System.Guid"/> specified upon
            machine creation. This value is automatically set to the operation group id of the
            last dequeue, raise or receive operation, if it is not <see cref="F:System.Guid.Empty"/>.
            This value can also be manually set using the property.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Machine.HashedState">
            <summary>
            User-defined hashed state of the machine. Override to improve the
            accuracy of liveness checking when state-caching is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Machine"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Initialize(Microsoft.PSharp.Runtime.MachineRuntime,Microsoft.PSharp.MachineId,Microsoft.PSharp.Runtime.IMachineStateManager,Microsoft.PSharp.Runtime.IEventQueue)">
            <summary>
            Initializes this machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.CreateMachine(System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified type and with the specified
            optional <see cref="T:Microsoft.PSharp.Event"/>. This <see cref="T:Microsoft.PSharp.Event"/> can only be
            used to access its payload, and cannot be handled.
            </summary>
            <param name="type">Type of the machine.</param>
            <param name="e">Optional initialization event.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <returns>The unique machine id.</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.CreateMachine(System.Type,System.String,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified type and name, and with the
            specified optional <see cref="T:Microsoft.PSharp.Event"/>. This <see cref="T:Microsoft.PSharp.Event"/> can
            only be used to access its payload, and cannot be handled.
            </summary>
            <param name="type">Type of the machine.</param>
            <param name="friendlyName">Optional friendly machine name used for logging.</param>
            <param name="e">Optional initialization event.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <returns>The unique machine id.</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.CreateMachine(Microsoft.PSharp.MachineId,System.Type,System.String,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and name, using the specified
            unbound machine id, and passes the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event
            can only be used to access its payload, and cannot be handled.
            </summary>
            <param name="mid">Unbound machine id.</param>
            <param name="type">Type of the machine.</param>
            <param name="friendlyName">Optional friendly machine name used for logging.</param>
            <param name="e">Optional initialization event.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Send(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a machine.
            </summary>
            <param name="mid">The id of the target machine.</param>
            <param name="e">The event to send.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
            <param name="options">Optional configuration of a send operation.</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Raise(Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Raises an <see cref="T:Microsoft.PSharp.Event"/> internally at the end of the current action.
            </summary>
            <param name="e">The event to raise.</param>
            <param name="opGroupId">Optional id that can be used to identify this operation.</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Receive(System.Type,System.Func{Microsoft.PSharp.Event,System.Boolean})">
            <summary>
            Waits to receive an <see cref="T:Microsoft.PSharp.Event"/> of the specified type
            that satisfies an optional predicate.
            </summary>
            <param name="eventType">The event type.</param>
            <param name="predicate">The optional predicate.</param>
            <returns>The received event.</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Receive(System.Type[])">
            <summary>
            Waits to receive an <see cref="T:Microsoft.PSharp.Event"/> of the specified types.
            </summary>
            <param name="eventTypes">The event types to wait for.</param>
            <returns>The received event.</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Receive(System.Tuple{System.Type,System.Func{Microsoft.PSharp.Event,System.Boolean}}[])">
            <summary>
            Waits to receive an <see cref="T:Microsoft.PSharp.Event"/> of the specified types
            that satisfy the specified predicates.
            </summary>
            <param name="events">Event types and predicates.</param>
            <returns>The received event.</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Goto``1">
            <summary>
            Transitions the machine to the specified <see cref="T:Microsoft.PSharp.MachineState"/>
            at the end of the current action.
            </summary>
            <typeparam name="S">Type of the state.</typeparam>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Goto(System.Type)">
            <summary>
            Transitions the machine to the specified <see cref="T:Microsoft.PSharp.MachineState"/>
            at the end of the current action.
            </summary>
            <param name="s">Type of the state.</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Push``1">
            <summary>
            Transitions the machine to the specified <see cref="T:Microsoft.PSharp.MachineState"/>
            at the end of the current action, pushing current state on the stack.
            </summary>
            <typeparam name="S">Type of the state.</typeparam>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Push(System.Type)">
            <summary>
            Transitions the machine to the specified <see cref="T:Microsoft.PSharp.MachineState"/>
            at the end of the current action, pushing current state on the stack.
            </summary>
            <param name="s">Type of the state.</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Pop">
            <summary>
            Pops the current <see cref="T:Microsoft.PSharp.MachineState"/> from the state stack
            at the end of the current action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.StartTimer(System.TimeSpan,System.Object)">
            <summary>
            Starts a timer that sends a <see cref="T:Microsoft.PSharp.Timers.TimerElapsedEvent"/> to this machine after the
            specified due time. The timer accepts an optional payload to be used during timeout.
            The timer is automatically disposed after it timeouts. To manually stop and dispose
            the timer, invoke the <see cref="M:Microsoft.PSharp.Machine.StopTimer(Microsoft.PSharp.Timers.TimerInfo)"/> method.
            </summary>
            <param name="dueTime">The amount of time to wait before sending the first timeout event.</param>
            <param name="payload">Optional payload of the timeout event.</param>
            <returns>Handle that contains information about the timer.</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.StartPeriodicTimer(System.TimeSpan,System.TimeSpan,System.Object)">
            <summary>
            Starts a periodic timer that sends a <see cref="T:Microsoft.PSharp.Timers.TimerElapsedEvent"/> to this machine
            after the specified due time, and then repeats after each specified period. The timer
            accepts an optional payload to be used during timeout. The timer can be stopped by
            invoking the <see cref="M:Microsoft.PSharp.Machine.StopTimer(Microsoft.PSharp.Timers.TimerInfo)"/> method.
            </summary>
            <param name="dueTime">The amount of time to wait before sending the first timeout event.</param>
            <param name="period">The time interval between timeout events.</param>
            <param name="payload">Optional payload of the timeout event.</param>
            <returns>Handle that contains information about the timer.</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.StopTimer(Microsoft.PSharp.Timers.TimerInfo)">
            <summary>
            Stops and disposes the specified timer.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Random">
            <summary>
            Returns a nondeterministic boolean choice, that can be
            controlled during analysis or testing.
            </summary>
            <returns>The controlled nondeterministic choice.</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Random(System.Int32)">
            <summary>
            Returns a nondeterministic boolean choice, that can be
            controlled during analysis or testing. The value is used
            to generate a number in the range [0..maxValue), where 0
            triggers true.
            </summary>
            <param name="maxValue">The max value.</param>
            <returns>The controlled nondeterministic choice.</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.FairRandom(System.String,System.String,System.Int32)">
            <summary>
            Returns a fair nondeterministic boolean choice, that can be
            controlled during analysis or testing.
            </summary>
            <returns>The controlled nondeterministic choice.</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.RandomInteger(System.Int32)">
            <summary>
            Returns a nondeterministic integer, that can be controlled during
            analysis or testing. The value is used to generate an integer in
            the range [0..maxValue).
            </summary>
            <param name="maxValue">The max value.</param>
            <returns>The controlled nondeterministic integer.</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Monitor``1(Microsoft.PSharp.Event)">
            <summary>
            Invokes the specified monitor with the specified <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
            <typeparam name="T">Type of the monitor.</typeparam>
            <param name="e">The event to send.</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Monitor(System.Type,Microsoft.PSharp.Event)">
            <summary>
            Invokes the specified monitor with the specified event.
            </summary>
            <param name="type">Type of the monitor.</param>
            <param name="e">The event to send.</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Assert(System.Boolean)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Enqueue(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Enqueues the specified event and its metadata.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.RunEventHandlerAsync">
            <summary>
            Runs the event handler. The handler terminates if there
            is no next event to process or if the machine is halted.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.HandleEvent(Microsoft.PSharp.Event)">
            <summary>
            Handles the specified <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.Do(System.String)">
            <summary>
            Invokes an action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.ExecuteCurrentStateOnEntry">
            <summary>
            Executes the on entry action of the current state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.ExecuteCurrentStateOnExit(System.String)">
            <summary>
            Executes the on exit action of the current state.
            </summary>
            <param name="eventHandlerExitActionName">Action name</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.InvokeOnFailureExceptionFilter(Microsoft.PSharp.Runtime.CachedAction,System.Exception)">
            <summary>
            An exception filter that calls OnFailure, which can choose to fast-fail the app
            to get a full dump.
            </summary>
            <param name="action">The machine action being executed when the failure occurred.</param>
            <param name="ex">The exception being tested.</param>
        </member>
        <member name="M:Microsoft.PSharp.Machine.ExecuteAction(Microsoft.PSharp.Runtime.CachedAction)">
            <summary>
            Executes the specified action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.GotoState(System.Type,System.String)">
            <summary>
            Performs a goto transition to the specified state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.PushState(System.Type)">
            <summary>
            Performs a push transition to the specified state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.PopState">
            <summary>
            Performs a pop transition from the current state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.DoStatePush(Microsoft.PSharp.MachineState)">
            <summary>
            Configures the state transitions of the machine when a state is pushed into the stack.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.DoStatePop">
            <summary>
            Configures the state transitions of the machine
            when a state is popped.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.IsEventIgnoredInCurrentState(Microsoft.PSharp.Event)">
            <summary>
            Checks if the specified event is ignored in the current machine state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.IsEventDeferredInCurrentState(Microsoft.PSharp.Event)">
            <summary>
            Checks if the specified event is deferred in the current machine state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.IsDefaultHandlerInstalledInCurrentState">
            <summary>
            Checks if a default handler is installed in current state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.GetCachedState">
            <summary>
            Returns the cached state of this machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.GotoStartState(Microsoft.PSharp.Event)">
            <summary>
            Transitions to the start state, and executes the
            entry action, if there is any.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.InitializeStateInformation">
            <summary>
            Initializes information about the states of the machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.RegisterTimer(System.TimeSpan,System.TimeSpan,System.Object)">
            <summary>
            Registers a new timer using the specified configuration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.UnregisterTimer(Microsoft.PSharp.Timers.TimerInfo)">
            <summary>
            Unregisters the specified timer.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.GetStateTypeAtStackIndex(System.Int32)">
            <summary>
            Returns the type of the state at the specified state
            stack index, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.ExtractStateTypes(System.Type)">
            <summary>
            Processes a type, looking for machine states.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.GetActionWithName(System.String)">
            <summary>
            Returns the action with the specified name.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.GetAllStates">
            <summary>
            Returns the set of all states in the machine (for code coverage).
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.GetAllStateEventPairs">
            <summary>
            Returns the set of all (states, registered event) pairs in the machine (for code coverage).
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.AssertStateValidity">
            <summary>
            Check machine for state related errors.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.ReportUnhandledException(System.Exception,System.String)">
            <summary>
            Wraps the unhandled exception inside an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/>
            exception, and throws it to the user.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.OnUnhandledEventExceptionHandler(System.String,Microsoft.PSharp.Runtime.UnhandledEventException)">
            <summary>
            Invokes user callback when a machine receives an event it cannot handle
            </summary>
            <param name="methodName">The handler (outermost) that threw the exception.</param>
            <param name="ex">The exception thrown by the machine.</param>
            <returns>False if the exception should continue to get thrown, true if the machine should gracefully halt.</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.OnExceptionHandler(System.String,System.Exception)">
            <summary>
            Invokes user callback when a machine throws an exception.
            </summary>
            <param name="methodName">The handler (outermost) that threw the exception.</param>
            <param name="ex">The exception thrown by the machine.</param>
            <returns>False if the exception should continue to get thrown, true if it was handled in this method.</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.OnException(System.String,System.Exception)">
            <summary>
            User callback when a machine throws an exception.
            </summary>
            <param name="methodName">The handler (outermost) that threw the exception.</param>
            <param name="ex">The exception thrown by the machine.</param>
            <returns>The action that the runtime should take.</returns>
        </member>
        <member name="M:Microsoft.PSharp.Machine.OnEventDequeueAsync(Microsoft.PSharp.Event)">
            <summary>
            User callback that is invoked when the machine successfully dequeues
            an event from its inbox. This method is not called when the dequeue
            happens via a Receive statement.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.OnEventHandledAsync(Microsoft.PSharp.Event)">
            <summary>
            User callback that is invoked when the machine finishes handling a dequeued event,
            unless the handler of the dequeued event raised an event or caused the machine to
            halt (either normally or due to an exception). Unless this callback raises an event,
            the machine will either become idle or dequeue the next event from its inbox.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.OnHalt">
            <summary>
            User callback that is invoked when a machine halts.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.ResetCaches">
            <summary>
            Resets the static caches.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Machine.HaltMachine">
            <summary>
            Halts the machine.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.MachineId">
            <summary>
            Unique machine id.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.MachineId.Runtime">
            <summary>
            The runtime that executes the machine with this id.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineId.Value">
            <summary>
            Unique id, when <see cref="F:Microsoft.PSharp.MachineId.NameValue"/> is empty.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineId.NameValue">
            <summary>
            Unique id, when non-empty.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineId.Type">
            <summary>
            Type of the machine with this id.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineId.Name">
            <summary>
            Name of the machine used for logging.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineId.Generation">
            <summary>
            Generation of the runtime that created this machine id.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineId.Endpoint">
            <summary>
            Endpoint.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.MachineId.IsNameUsedForHashing">
            <summary>
            True if <see cref="F:Microsoft.PSharp.MachineId.NameValue"/> is used as the unique id, else false.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineId.#ctor(System.Type,System.String,Microsoft.PSharp.Runtime.MachineRuntime,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.MachineId"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineId.Bind(Microsoft.PSharp.Runtime.MachineRuntime)">
            <summary>
            Bind the machine id.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineId.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineId.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineId.ToString">
            <summary>
            Returns a string that represents the current machine id.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineId.Equals(Microsoft.PSharp.MachineId)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.PSharp.MachineId"/> is equal
            to the current <see cref="T:Microsoft.PSharp.MachineId"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineId.CompareTo(Microsoft.PSharp.MachineId)">
            <summary>
            Compares the specified <see cref="T:Microsoft.PSharp.MachineId"/> with the current
            <see cref="T:Microsoft.PSharp.MachineId"/> for ordering or sorting purposes.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.MachineState">
            <summary>
            Abstract class representing a state of a P# machine.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.MachineState.EntryAction">
            <summary>
            The entry action of the state.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.MachineState.ExitAction">
            <summary>
            The exit action of the state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineState.GotoTransitions">
            <summary>
            Dictionary containing all the goto state transitions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineState.PushTransitions">
            <summary>
            Dictionary containing all the push state transitions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineState.ActionBindings">
            <summary>
            Dictionary containing all the action bindings.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineState.IgnoredEvents">
            <summary>
            Set of ignored event types.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MachineState.DeferredEvents">
            <summary>
            Set of deferred event types.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.MachineState.IsStart">
            <summary>
            True if this is the start state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.MachineState"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.InitializeState">
            <summary>
            Initializes the state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.InstallGotoTransitions(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares goto event handlers, if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.InheritGotoTransitions(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits goto event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.InstallPushTransitions(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares push event handlers, if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.InheritPushTransitions(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits push event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.InstallActionHandlers(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares action event handlers, if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.InheritActionHandlers(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits action event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.InstallIgnoreHandlers(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares ignore event handlers, if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.InheritIgnoreHandlers(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits ignore event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.InstallDeferHandlers(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares defer event handlers, if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.InheritDeferHandlers(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits defer event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.CheckEventHandlerAlreadyDeclared(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Checks if an event handler has been already declared.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MachineState.CheckEventHandlerAlreadyInherited(System.Type,System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Checks if an event handler has been already inherited.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.SingleStateMachine">
            <summary>
            Abstract class representing a single-state machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.SingleStateMachine.HandleInitOnEntry">
            <summary>
            Initilizes the state machine on creation.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.SingleStateMachine.InitOnEntry(Microsoft.PSharp.Event)">
            <summary>
            Initilizes the state machine on creation.
            </summary>
            <param name="e">Initial event provided on machine creation, or null otherwise.</param>
        </member>
        <member name="M:Microsoft.PSharp.SingleStateMachine.HandleProcessEvent">
            <summary>
            Process incoming event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.SingleStateMachine.ProcessEvent(Microsoft.PSharp.Event)">
            <summary>
            Process incoming event.
            </summary>
            <param name="e">Event.</param>
        </member>
        <member name="M:Microsoft.PSharp.SingleStateMachine.TerminatingOnEntry">
            <summary>
            Halts the machine.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.StateGroup">
            <summary>
            Abstract class used for representing a group of related states.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.SendOptions">
            <summary>
            Represents a send event configuration that is used during testing.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.SendOptions.Default">
            <summary>
            The default send options.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.SendOptions.MustHandle">
            <summary>
            True if this event must always be handled, else false.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.SendOptions.Assert">
            <summary>
            Specifies that there must not be more than N instances of the
            event in the inbox queue of the receiver machine.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.SendOptions.Assume">
            <summary>
            Speciﬁes that during testing, an execution that increases the cardinality of the
            event beyond N in the receiver machine inbox queue must not be generated.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.SendOptions.HashedState">
            <summary>
            User-defined hash of the event payload. The default value is 0. Set it to a custom value
            to improve the accuracy of liveness checking when state-caching is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.SendOptions.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.SendOptions"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.SendOptions.ToString">
            <summary>
            A string that represents the current options.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Monitor">
            <summary>
            Abstract class representing a P# monitor.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Monitor.StateTypeMap">
            <summary>
            Map from monitor types to a set of all
            possible states types.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Monitor.StateMap">
            <summary>
            Map from monitor types to a set of all
            available states.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Monitor.MonitorActionMap">
            <summary>
            Map from monitor types to a set of all
            available actions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Monitor.Runtime">
            <summary>
            The runtime that executes this monitor.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Monitor.State">
            <summary>
            The monitor state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Monitor.GotoTransitions">
            <summary>
            Dictionary containing all the current goto state transitions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Monitor.ActionBindings">
            <summary>
            Dictionary containing all the current action bindings.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Monitor.ActionMap">
            <summary>
            Map from action names to actions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Monitor.IgnoredEvents">
            <summary>
            Set of currently ignored event types.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Monitor.LivenessTemperature">
            <summary>
            A counter that increases in each step of the execution,
            as long as the monitor remains in a hot state. If the
            temperature reaches the specified limit, then a potential
            liveness bug has been found.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Monitor.Id">
            <summary>
            The unique monitor id.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Monitor.Name">
            <summary>
            Gets the name of this monitor.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Monitor.Logger">
            <summary>
            The logger installed to the P# runtime.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Monitor.CurrentState">
            <summary>
            Gets the current state.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Monitor.CurrentStateName">
            <summary>
            Gets the current state name.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Monitor.CurrentStateNameWithTemperature">
            <summary>
            Gets the current state name with temperature.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.GetHotState">
            <summary>
            Returns a nullable boolean indicating liveness temperature: true for hot, false for cold, else null.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Monitor.ReceivedEvent">
            <summary>
            Gets the latest received event, or null if no event
            has been received.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Monitor"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.Initialize(Microsoft.PSharp.Runtime.MachineRuntime,Microsoft.PSharp.MachineId)">
            <summary>
            Initializes this monitor.
            </summary>
            <param name="runtime">The runtime that executes this monitor.</param>
            <param name="mid">The monitor id.</param>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.Goto``1">
            <summary>
            Returns from the execution context, and transitions
            the monitor to the given <see cref="T:Microsoft.PSharp.MonitorState"/>.
            </summary>
            <typeparam name="S">Type of the state.</typeparam>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.Goto(System.Type)">
            <summary>
            Returns from the execution context, and transitions
            the monitor to the given <see cref="T:Microsoft.PSharp.MonitorState"/>.
            </summary>
            <param name="s">Type of the state.</param>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.Raise(Microsoft.PSharp.Event)">
            <summary>
            Raises an <see cref="T:Microsoft.PSharp.Event"/> internally and returns from the execution context.
            </summary>
            <param name="e">The event to raise.</param>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.Assert(System.Boolean)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.MonitorEvent(Microsoft.PSharp.Event)">
            <summary>
            Notifies the monitor to handle the received event.
            </summary>
            <param name="e">The event to monitor.</param>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.HandleEvent(Microsoft.PSharp.Event)">
            <summary>
            Handles the given event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.Do(System.String)">
            <summary>
            Invokes an action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.ExecuteCurrentStateOnEntry">
            <summary>
            Executes the on entry function of the current state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.ExecuteCurrentStateOnExit(System.String)">
            <summary>
            Executes the on exit function of the current state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.ExecuteAction(System.Reflection.MethodInfo)">
            <summary>
            Executes the specified action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.GotoState(System.Type,System.String)">
            <summary>
            Performs a goto transition to the given state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.CanHandleEvent(System.Type)">
            <summary>
            Checks if the state can handle the given event type. An event
            can be handled if it is deferred, or leads to a transition or
            action binding.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.CheckLivenessTemperature">
            <summary>
            Checks the liveness temperature of the monitor and report
            a potential liveness bug if the temperature passes the
            specified threshold. Only works in a liveness monitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.CheckLivenessTemperature(System.Int32)">
            <summary>
            Checks the liveness temperature of the monitor and report
            a potential liveness bug if the temperature passes the
            specified threshold. Only works in a liveness monitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.IsInHotState">
            <summary>
            Returns true if the monitor is in a hot state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.IsInHotState(System.String@)">
            <summary>
            Returns true if the monitor is in a hot state. Also outputs
            the name of the current state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.IsInColdState">
            <summary>
            Returns true if the monitor is in a cold state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.IsInColdState(System.String@)">
            <summary>
            Returns true if the monitor is in a cold state. Also outputs
            the name of the current state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.GetHashedState">
            <summary>
            Returns the hashed state of this monitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.GetCachedState">
            <summary>
            Returns the cached state of this monitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.ToString">
            <summary>
            Returns a string that represents the current monitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.GotoStartState">
            <summary>
            Transitions to the start state, and executes the
            entry action, if there is any.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.InitializeStateInformation">
            <summary>
            Initializes information about the states of the monitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.ExtractStateTypes(System.Type)">
            <summary>
            Processes a type, looking for monitor states.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.ConfigureStateTransitions(Microsoft.PSharp.MonitorState)">
            <summary>
            Configures the state transitions of the monitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.GetActionWithName(System.String)">
            <summary>
            Returns the action with the specified name.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.AssertStateValidity">
            <summary>
            Check monitor for state related errors.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.ReportUnhandledException(System.Exception,System.String)">
            <summary>
            Wraps the unhandled exception inside an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/>
            exception, and throws it to the user.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.GetAllStates">
            <summary>
            Returns the set of all states in the monitor (for code coverage).
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.GetAllStateEventPairs">
            <summary>
            Returns the set of all (states, registered event) pairs in the monitor (for code coverage).
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Monitor.ResetCaches">
            <summary>
            Resets the static caches.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.MonitorState">
            <summary>
            Abstract class representing a state of a P# monitor.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.MonitorState.EntryAction">
            <summary>
            The entry action of the state.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.MonitorState.ExitAction">
            <summary>
            The exit action of the state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MonitorState.GotoTransitions">
            <summary>
            Dictionary containing all the goto state transitions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MonitorState.ActionBindings">
            <summary>
            Dictionary containing all the action bindings.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.MonitorState.IgnoredEvents">
            <summary>
            Set of ignored event types.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.MonitorState.IsStart">
            <summary>
            True if this is the start state.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.MonitorState.IsHot">
            <summary>
            Returns true if this is a hot state.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.MonitorState.IsCold">
            <summary>
            Returns true if this is a cold state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MonitorState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.MonitorState"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.MonitorState.InitializeState">
            <summary>
            Initializes the state.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Timers.IMachineTimer">
            <summary>
            Interface of a timer that can send timeout events to its owner machine.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Timers.IMachineTimer.Info">
            <summary>
            Stores information about this timer.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Timers.MachineTimer">
            <summary>
            A timer that can send timeout events to its owner machine.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Timers.MachineTimer.Info">
            <summary>
            Stores information about this timer.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Timers.MachineTimer.Owner">
            <summary>
            The machine that owns this timer.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Timers.MachineTimer.InternalTimer">
            <summary>
            The internal timer.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Timers.MachineTimer.TimeoutEvent">
            <summary>
            The timeout event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Timers.MachineTimer.#ctor(Microsoft.PSharp.Timers.TimerInfo,Microsoft.PSharp.Machine)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Timers.MachineTimer"/> class.
            </summary>
            <param name="info">Stores information about this timer.</param>
            <param name="owner">The machine that owns this timer.</param>
        </member>
        <member name="M:Microsoft.PSharp.Timers.MachineTimer.HandleTimeout(System.Object)">
            <summary>
            Handles the timeout.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Timers.MachineTimer.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal
            to the current System.Object.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Timers.MachineTimer.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Timers.MachineTimer.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Timers.MachineTimer.Equals(Microsoft.PSharp.Timers.MachineTimer)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.PSharp.MachineId"/> is equal
            to the current <see cref="T:Microsoft.PSharp.MachineId"/>.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.PSharp.Timers.MachineTimer.Dispose">
            <summary>
            Disposes the resources held by this timer.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Timers.TimerElapsedEvent">
            <summary>
            Defines a timer elapsed event that is sent from a timer to the machine that owns the timer.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Timers.TimerElapsedEvent.Info">
            <summary>
            Stores information about the timer.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Timers.TimerElapsedEvent.#ctor(Microsoft.PSharp.Timers.TimerInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Timers.TimerElapsedEvent"/> class.
            </summary>
            <param name="info">Stores information about the timer.</param>
        </member>
        <member name="T:Microsoft.PSharp.Timers.TimerInfo">
            <summary>
            Stores information about a timer that can send timeout events to its owner machine.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Timers.TimerInfo.Id">
            <summary>
            The unique id of the timer.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Timers.TimerInfo.OwnerId">
            <summary>
            The id of the machine that owns the timer.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Timers.TimerInfo.DueTime">
            <summary>
            The amount of time to wait before sending the first timeout event.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Timers.TimerInfo.Period">
            <summary>
            The time interval between timeout events.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Timers.TimerInfo.Payload">
            <summary>
            The optional payload of the timer. This is null if there is no payload.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Timers.TimerInfo.#ctor(Microsoft.PSharp.MachineId,System.TimeSpan,System.TimeSpan,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Timers.TimerInfo"/> class.
            </summary>
            <param name="ownerId">The id of the machine that owns this timer.</param>
            <param name="dueTime">The amount of time to wait before sending the first timeout event.</param>
            <param name="period">The time interval between timeout events.</param>
            <param name="payload">Optional payload of the timeout event.</param>
        </member>
        <member name="M:Microsoft.PSharp.Timers.TimerInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Timers.TimerInfo.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Timers.TimerInfo.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Timers.TimerInfo.Equals(Microsoft.PSharp.Timers.TimerInfo)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.PSharp.Timers.TimerInfo"/> is equal
            to the current <see cref="T:Microsoft.PSharp.Timers.TimerInfo"/>.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Utilities.ErrorReporter">
            <summary>
            Reports errors and warnings to the user.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.ErrorReporter.Configuration">
            <summary>
            Configuration.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.Utilities.ErrorReporter.Logger">
            <summary>
            The installed logger.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.ErrorReporter.#ctor(Microsoft.PSharp.Configuration,Microsoft.PSharp.IO.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Utilities.ErrorReporter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.ErrorReporter.WriteErrorLine(System.String)">
            <summary>
            Reports an error, followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.ErrorReporter.WriteWarningLine(System.String)">
            <summary>
            Reports a warning, followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.ErrorReporter.Write(System.String,System.ConsoleColor)">
            <summary>
            Writes the specified string value.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Utilities.NameResolver">
            <summary>
            Utility class for resolving names.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.NameResolver.StateNamesCache">
            <summary>
            Cache of state names.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.NameResolver.GetQualifiedStateName(System.Type)">
            <summary>
            Returns the qualified (i.e. <see cref="T:Microsoft.PSharp.StateGroup"/>) name of the specified
            machine or monitor state, or the empty string if there is no such name.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.NameResolver.GetStateNameForLogging(System.Type)">
            <summary>
            Returns the state name to be used for logging purposes.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Utilities.Profiler">
            <summary>
            The P# profiler.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.Profiler.StartMeasuringExecutionTime">
            <summary>
            Starts measuring execution time.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.Profiler.StopMeasuringExecutionTime">
            <summary>
            Stops measuring execution time.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.Profiler.Results">
            <summary>
            Returns profilling results.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Utilities.BaseCommandLineOptions">
            <summary>
            The P# base command line options.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.BaseCommandLineOptions.Configuration">
            <summary>
            Configuration.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.BaseCommandLineOptions.Options">
            <summary>
            Command line options.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.BaseCommandLineOptions.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.Utilities.BaseCommandLineOptions"/> class.
            </summary>
            <param name="args">Array of arguments</param>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.BaseCommandLineOptions.Parse">
            <summary>
            Parses the command line options and returns a configuration.
            </summary>
            <returns>Configuration</returns>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.BaseCommandLineOptions.ParseOption(System.String)">
            <summary>
            Parses the given option.
            </summary>
            <param name="option">Option</param>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.BaseCommandLineOptions.CheckForParsingErrors">
            <summary>
            Checks for parsing errors.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.BaseCommandLineOptions.UpdateConfiguration">
            <summary>
            Updates the configuration depending on the
            user specified options.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.BaseCommandLineOptions.ShowHelp">
            <summary>
            Shows help.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.Utilities.BaseCommandLineOptions.IsMatch(System.String,System.String)">
            <summary>
            Checks if the given input is a matches the specified pattern.
            </summary>
            <param name="input">The input to match.</param>
            <param name="pattern">The pattern to match.</param>
            <returns>True if the input matches the pattern.</returns>
        </member>
        <member name="T:Microsoft.PSharp.Utilities.CompilationTarget">
            <summary>
            P# compilation target.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.CompilationTarget.Execution">
            <summary>
            Enables execution compilation target.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.CompilationTarget.Library">
            <summary>
            Enables library compilation target.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.CompilationTarget.Testing">
            <summary>
            Enables testing compilation target.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.CompilationTarget.Remote">
            <summary>
            Enables remote compilation target.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Utilities.OptimizationTarget">
            <summary>
            P# compilation optimization target.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.OptimizationTarget.Debug">
            <summary>
            Enables debug optimization target.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.OptimizationTarget.Release">
            <summary>
            Enables release optimization target.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Utilities.ReductionStrategy">
            <summary>
            Type of reduction strategy.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.ReductionStrategy.None">
            <summary>
            No reduction.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.ReductionStrategy.OmitSchedulingPoints">
            <summary>
            Reduction strategy that omits scheduling points.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.ReductionStrategy.ForceSchedule">
            <summary>
            Reduction strategy that forces scheduling points.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.Utilities.SchedulingStrategy">
            <summary>
            P# runtime scheduling strategy.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.Interactive">
            <summary>
            Interactive scheduling.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.Replay">
            <summary>
            Replay scheduling.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.Portfolio">
            <summary>
            Portfolio scheduling.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.Random">
            <summary>
            Random scheduling.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.ProbabilisticRandom">
            <summary>
            Probabilistic random-walk scheduling.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.PCT">
            <summary>
            Prioritized scheduling.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.FairPCT">
            <summary>
            Prioritized scheduling with Random tail.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.DFS">
            <summary>
            Depth-first search scheduling.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.IDDFS">
            <summary>
            Depth-first search scheduling with
            iterative deepening.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.DPOR">
            <summary>
            Dynamic partial-order reduction (DPOR) scheduling.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.RDPOR">
            <summary>
            Randomized dynamic partial-order reduction (rDPOR) scheduling.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.DelayBounding">
            <summary>
            Delay-bounding scheduling.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.Utilities.SchedulingStrategy.RandomDelayBounding">
            <summary>
            Random delay-bounding scheduling.
            </summary>
        </member>
    </members>
</doc>
