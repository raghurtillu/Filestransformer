<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.PSharp.TestingServices</name>
    </assembly>
    <members>
        <member name="T:Microsoft.PSharp.TestingServices.AbstractTestingEngine">
            <summary>
            The P# abstract testing engine.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.AbstractTestingEngine.Configuration">
            <summary>
            Configuration.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.AbstractTestingEngine.Assembly">
            <summary>
            The P# assembly to analyze.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.AbstractTestingEngine.RuntimeAssembly">
            <summary>
            The assembly that provides the P# runtime to use
            during testing. If its null, the engine uses the
            default P# testing runtime.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.AbstractTestingEngine.TestRuntimeFactoryMethod">
            <summary>
            The P# test runtime factory method.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.AbstractTestingEngine.TestInitMethod">
            <summary>
            The P# test initialization method.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.AbstractTestingEngine.TestDisposeMethod">
            <summary>
            The P# test dispose method.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.AbstractTestingEngine.TestIterationDisposeMethod">
            <summary>
            The P# test dispose method per iteration.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.AbstractTestingEngine.TestAction">
            <summary>
            The action to test.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.AbstractTestingEngine.TestFunction">
            <summary>
            The function to test.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.AbstractTestingEngine.TestName">
            <summary>
            The name of the test.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.AbstractTestingEngine.PerIterationCallbacks">
            <summary>
            Set of callbacks to invoke at the end
            of each iteration.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.AbstractTestingEngine.Logger">
            <summary>
            The installed logger.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.AbstractTestingEngine.Strategy">
            <summary>
            The bug-finding scheduling strategy.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.AbstractTestingEngine.RandomNumberGenerator">
            <summary>
            Random number generator used by the scheduling strategies.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.AbstractTestingEngine.ErrorReporter">
            <summary>
            The error reporter.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.AbstractTestingEngine.Profiler">
            <summary>
            The profiler.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.AbstractTestingEngine.CancellationTokenSource">
            <summary>
            The testing task cancellation token source.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.AbstractTestingEngine.PrintGuard">
            <summary>
            A guard for printing info.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.AbstractTestingEngine.TestReport">
            <summary>
            Data structure containing information
            gathered during testing.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.AbstractTestingEngine.Reporter">
            <summary>
            Interface for registering runtime operations.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.AbstractTestingEngine.Run">
            <summary>
            Runs the P# testing engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.AbstractTestingEngine.CreateTestingTask">
            <summary>
            Creates a new testing task.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.AbstractTestingEngine.Stop">
            <summary>
            Stops the P# testing engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.AbstractTestingEngine.TryEmitTraces(System.String,System.String)">
            <summary>
            Tries to emit the testing traces, if any.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.AbstractTestingEngine.RegisterPerIterationCallBack(System.Action{System.Int32})">
            <summary>
            Registers a callback to invoke at the end of each iteration. The callback takes as
            a parameter an integer representing the current iteration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.AbstractTestingEngine.Report">
            <summary>
            Returns a report with the testing results.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.AbstractTestingEngine.#ctor(Microsoft.PSharp.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.AbstractTestingEngine"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.AbstractTestingEngine.#ctor(Microsoft.PSharp.Configuration,System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.AbstractTestingEngine"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.AbstractTestingEngine.#ctor(Microsoft.PSharp.Configuration,System.Action{Microsoft.PSharp.IMachineRuntime})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.AbstractTestingEngine"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.AbstractTestingEngine.Initialize(Microsoft.PSharp.Configuration)">
            <summary>
            Initialized the testing engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.AbstractTestingEngine.FindRuntimeFactoryMethod">
            <summary>
            Finds the testing runtime factory method, if one is provided.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.AbstractTestingEngine.FindEntryPoint">
            <summary>
            Finds the entry point to the P# program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.AbstractTestingEngine.FindTestMethod(System.Type)">
            <summary>
            Finds the test method with the specified attribute.
            Returns null if no such method is found.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.AbstractTestingEngine.FindTestMethodsWithAttribute(System.Type,System.Reflection.BindingFlags,System.Reflection.Assembly)">
            <summary>
            Finds the test methods with the specified attribute in the given assembly.
            Returns an empty list if no such methods are found.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.AbstractTestingEngine.GetScheduleForReplay(System.Boolean@)">
            <summary>
            Returns the schedule to replay.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.AbstractTestingEngine.GetOutputDirectory">
            <summary>
            Returns (and creates if it does not exist) the output directory.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.AbstractTestingEngine.CreateRuntimeTracesDirectory">
            <summary>
            Creates the runtime traces directory.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.AbstractTestingEngine.GetRuntimeTracesDirectory">
            <summary>
            Returns the runtime traces directory.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.AbstractTestingEngine.CleanTemporaryFiles">
            <summary>
            Cleans the temporary files.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.AbstractTestingEngine.SetLogger(Microsoft.PSharp.IO.ILogger)">
            <summary>
            Installs the specified <see cref="T:Microsoft.PSharp.IO.ILogger"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.AbstractTestingEngine.SetRandomNumberGenerator">
            <summary>
            Sets the random number generator to be used by the scheduling strategy.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.BugFindingEngine">
            <summary>
            The P# bug-finding engine.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.BugFindingEngine.ReadableTrace">
            <summary>
            The readable trace, if any.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.BugFindingEngine.BugTrace">
            <summary>
            The bug trace, if any.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.BugFindingEngine.ReproducableTrace">
            <summary>
            The reproducable trace, if any.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.BugFindingEngine.Create(Microsoft.PSharp.Configuration,System.Action{Microsoft.PSharp.IMachineRuntime})">
            <summary>
            Creates a new P# bug-finding engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.BugFindingEngine.Create(Microsoft.PSharp.Configuration,System.Func{Microsoft.PSharp.IMachineRuntime,System.Threading.Tasks.Task})">
            <summary>
            Creates a new P# bug-finding engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.BugFindingEngine.Create(Microsoft.PSharp.Configuration)">
            <summary>
            Creates a new P# bug-finding engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.BugFindingEngine.Create(Microsoft.PSharp.Configuration,System.Reflection.Assembly)">
            <summary>
            Creates a new P# bug-finding engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.BugFindingEngine.TryEmitTraces(System.String,System.String)">
            <summary>
            Tries to emit the testing traces, if any.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.BugFindingEngine.Report">
            <summary>
            Returns a report with the testing results.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.BugFindingEngine.#ctor(Microsoft.PSharp.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.BugFindingEngine"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.BugFindingEngine.#ctor(Microsoft.PSharp.Configuration,System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.BugFindingEngine"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.BugFindingEngine.#ctor(Microsoft.PSharp.Configuration,System.Action{Microsoft.PSharp.IMachineRuntime})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.BugFindingEngine"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.BugFindingEngine.#ctor(Microsoft.PSharp.Configuration,System.Func{Microsoft.PSharp.IMachineRuntime,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.BugFindingEngine"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.BugFindingEngine.Initialize">
            <summary>
            Initializes the bug-finding engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.BugFindingEngine.CreateTestingTask">
            <summary>
            Creates a new testing task.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.BugFindingEngine.RunNextIteration(System.Int32)">
            <summary>
            Runs the next testing iteration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.BugFindingEngine.GatherIterationStatistics(Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime)">
            <summary>
            Gathers the exploration strategy statistics for the latest testing iteration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.BugFindingEngine.ConstructReproducableTrace(Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime)">
            <summary>
            Constructs a reproducable trace.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.BugFindingEngine.ShouldPrintIteration(System.Int32)">
            <summary>
            Returns true if the engine should print the current iteration.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.ITestingEngine">
            <summary>
            Interface of a P# testing engine.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.ITestingEngine.TestReport">
            <summary>
            Data structure containing information
            gathered during testing.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.ITestingEngine.Reporter">
            <summary>
            Interface for registering runtime operations.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.ITestingEngine.Run">
            <summary>
            Runs the P# testing engine.
            </summary>
            <returns>ITestingEngine</returns>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.ITestingEngine.Stop">
            <summary>
            Stops the P# testing engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.ITestingEngine.TryEmitTraces(System.String,System.String)">
            <summary>
            Tries to emit the testing traces, if any.
            </summary>
            <param name="directory">Directory name</param>
            <param name="file">File name</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.ITestingEngine.RegisterPerIterationCallBack(System.Action{System.Int32})">
            <summary>
            Registers a callback to invoke at the end
            of each iteration. The callback takes as
            a parameter an integer representing the
            current iteration.
            </summary>
            <param name="callback">Callback</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.ITestingEngine.Report">
            <summary>
            Returns a report with the testing results.
            </summary>
            <returns>Report</returns>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.ReplayEngine">
            <summary>
            The P# replay engine.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.ReplayEngine.InternalError">
            <summary>
            Text describing an internal replay error.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.ReplayEngine.Create(Microsoft.PSharp.Configuration)">
            <summary>
            Creates a new P# replaying engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.ReplayEngine.Create(Microsoft.PSharp.Configuration,System.Reflection.Assembly)">
            <summary>
            Creates a new P# replaying engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.ReplayEngine.Create(Microsoft.PSharp.Configuration,System.Action{Microsoft.PSharp.IMachineRuntime})">
            <summary>
            Creates a new P# replaying engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.ReplayEngine.Create(Microsoft.PSharp.Configuration,System.Action{Microsoft.PSharp.IMachineRuntime},System.String)">
            <summary>
            Creates a new P# replaying engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.ReplayEngine.Create(Microsoft.PSharp.Configuration,System.Func{Microsoft.PSharp.IMachineRuntime,System.Threading.Tasks.Task})">
            <summary>
            Creates a new P# replaying engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.ReplayEngine.Create(Microsoft.PSharp.Configuration,System.Func{Microsoft.PSharp.IMachineRuntime,System.Threading.Tasks.Task},System.String)">
            <summary>
            Creates a new P# replaying engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.ReplayEngine.Report">
            <summary>
            Returns a report with the testing results.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.ReplayEngine.#ctor(Microsoft.PSharp.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.ReplayEngine"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.ReplayEngine.#ctor(Microsoft.PSharp.Configuration,System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.ReplayEngine"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.ReplayEngine.#ctor(Microsoft.PSharp.Configuration,System.Action{Microsoft.PSharp.IMachineRuntime})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.ReplayEngine"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.ReplayEngine.#ctor(Microsoft.PSharp.Configuration,System.Func{Microsoft.PSharp.IMachineRuntime,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.ReplayEngine"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.ReplayEngine.CreateTestingTask">
            <summary>
            Creates a new testing task.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.TestingEngineFactory">
            <summary>
            The P# testing engine factory.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.TestingEngineFactory.CreateBugFindingEngine(Microsoft.PSharp.Configuration)">
            <summary>
            Creates a new P# bug-finding engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.TestingEngineFactory.CreateBugFindingEngine(Microsoft.PSharp.Configuration,System.Reflection.Assembly)">
            <summary>
            Creates a new P# bug-finding engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.TestingEngineFactory.CreateBugFindingEngine(Microsoft.PSharp.Configuration,System.Action{Microsoft.PSharp.IMachineRuntime})">
            <summary>
            Creates a new P# bug-finding engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.TestingEngineFactory.CreateReplayEngine(Microsoft.PSharp.Configuration)">
            <summary>
            Creates a new P# replay engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.TestingEngineFactory.CreateReplayEngine(Microsoft.PSharp.Configuration,System.Reflection.Assembly)">
            <summary>
            Creates a new P# replay engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.TestingEngineFactory.CreateReplayEngine(Microsoft.PSharp.Configuration,System.Action{Microsoft.PSharp.IMachineRuntime})">
            <summary>
            Creates a new P# replay engine.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.RaceDetection.RaceDetectionEngine.MachineState">
            <summary>
            The machine shadow state. M[mId] will get us the instrumentation
            state for a machine with id mId.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.RaceDetection.RaceDetectionEngine.VarState">
            <summary>
            The variable shadow state. V[(objHandle, offset)] will get us the instrumentation
            state for a read/write to objHandle at offset.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.RaceDetection.RaceDetectionEngine.EventState">
            <summary>
            An auxiliary data structure to help enforce the "deq-happens-after-enq" rule
            At a deq, look up the vector clock snapshot captured at the corresponding enqueue
            as EventState[seq#], where the enqueue has global sequence number seq#
            We use the seq# to disambiguate multiple posts with the same source, target and event object
            since in P#, the reuse of events is permitted.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.RaceDetection.RaceDetectionEngine.DescriptiveName">
            <summary>
            Track the names of machines. Used when we report races
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.RaceDetection.RaceDetectionEngine.Log">
            <summary>
            A logger and configuration from the runtime to report races
            found (and possibly debug logs).
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.RaceDetection.RaceDetectionEngine.Config">
            <summary>
            Configuration.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.RaceDetection.RaceDetectionEngine.TestReport">
            <summary>
            The test report.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.RaceDetection.RaceDetectionEngine.Runtime">
            <summary>
            We need a reference to the runtime to query it for the currently
            executing machine's Id at read/write operations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.RaceDetection.RaceDetectionEngine.EnqueueCount">
            <summary>
            Counter to track the number of enqueue operations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.RaceDetection.RaceDetectionEngine.DequeueCount">
            <summary>
            Counter to track the number of dequeue operations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.RaceDetection.RaceDetectionEngine.ReadCount">
            <summary>
            Counter to track the number of read operations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.RaceDetection.RaceDetectionEngine.WriteCount">
            <summary>
            Counter to track the number of write operations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.RaceDetection.RaceDetectionEngine.CreateCount">
            <summary>
            Counter to track the number of create machine operations.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.RaceDetectionEngine.#ctor(Microsoft.PSharp.Configuration,Microsoft.PSharp.IO.ILogger,Microsoft.PSharp.TestingServices.TestReport)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.RaceDetection.RaceDetectionEngine"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.RaceDetectionEngine.RegisterRuntime(Microsoft.PSharp.IMachineRuntime)">
            <summary>
            Registers the testing runtime.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.RaceDetection.Util.Epoch">
            <summary>
            The epochs used by the FastTrack algorithm.
            Adapted from https://github.com/stephenfreund/RoadRunner/blob/master/src/tools/util/Epoch.java
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.RaceDetection.Util.Epoch.Zero">
            <summary>
            The zero epoch.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.RaceDetection.Util.Epoch.ReadShared">
            <summary>
            Denotes if the epoch represents a read shared variable,
            in which case we switch to full-width vector clocks.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.Epoch.MId(System.Int64)">
            <summary>
            Returns the MId for an epoch.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.Epoch.Clock(System.Int64)">
            <summary>
            Returns the Clock for an epoch.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.Epoch.MakeEpoch(System.Int64,System.Int64)">
            <summary>
            Obtains an epoch c@t from machine identifier t and clock c.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.Epoch.MakeEpoch(Microsoft.PSharp.MachineId,System.Int64)">
            <summary>
            Obtains an epoch c@t from machineId t = mId.Value and clock c.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.Epoch.Tick(System.Int64)">
            <summary>
            Increments the clock for this epoch by 1.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.Epoch.Tick(System.Int64,System.Int64)">
            <summary>
            Increments the clock for this epoch by amount.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.Epoch.Leq(System.Int64,System.Int64)">
            <summary>
            Checks if this epoch occurs earlier than the other.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.Epoch.Max(System.Int64,System.Int64)">
            <summary>
            Returns the epoch that is the join of the two passed in.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.Epoch.ToString(System.Int64)">
            <summary>
            Following the FastTrack convention, represent an epoch as
            m:c where m is the machine Id and c is its clock.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock">
            <summary>
            The class representing vector clocks.
            Adapted from the roadrunner tool:
            "The ROADRUNNER Dynamic Analysis Framework for Concurrent Programs" by Flanagan and Freund in PASTE '10.
            (See: https://github.com/stephenfreund/RoadRunner/blob/master/src/tools/util/VectorClock.java)
            Maps each machine(Id) to its clock. The clock is represented as an Epoch c@t.
            Here, c is the clock value and t the identifier for the machine
            We re-encode the mId into the value so that comparisons between epochs and VCs
            are direct. Currently used by the SystematicTestingRuntime which does not
            run machines concurrently. Future (multi-threaded) clients will need to call the APIs with
            exclusive access to certain parameters/this (as indicated in the comments)
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock.Empty">
            <summary>
            Use for all VCs that start with an empty array.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock.#ctor(Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock.MakeVC(System.Int64)">
            <summary>
            size >= 0.
            Requires exclusive access to this.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock.Copy(Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock)">
            <summary>
            Copies the other vector clock into this.
            Requires: exclusive access to this and other.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock.Max(Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock)">
            <summary>
            this = this ⨆ other.
            Requires: exclusive access to this and other.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock.Leq(Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock)">
            <summary>
            Returns true if this ≤ other. Requires: exclusive access to this and other.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock.AnyGt(Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock)">
            <summary>
            Returns true if any clock in this.Values is greater than in other.Values.
            Requires: exclusive access to this and other.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock.NextGT(Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock,System.Int32)">
            <summary>
            Returns the first index i >= start such that this.Values[i] > other.Values[i],
            -1 is no such index exists.
            Requires: exclusive access to this and other.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock.Tick(System.Int64)">
            <summary>
            Increments the clock component for mId.
            Requires: exclusive access to this.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock.SetComponent(System.Int64,System.Int64)">
            <summary>
            Sets the clock component for mId to v.
            Here, v is an epoch, not a simple long.
            Requires: exclusive access to this.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock.SetComponent(System.UInt64,System.Int64)">
            <summary>
            Sets the clock component for mId to v.
            Here, v is an epoch, not a simple long.
            Requires: exclusive access to this.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock.ToString">
            <summary>
            Requires: exclusive access to this.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock.GetComponent(System.Int64)">
            <summary>
            Gets the clock component for mId, as an epoch. Requires: exclusive access to this.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock.Size">
            <summary>
            Gets the size of our VC. Requires: exclusive access to this.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock.ClearFrom(System.Int64[],System.Int32)">
            <summary>
            Clears the clock values from pos to end.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.RaceDetection.Util.VectorClock.EnsureCapacity(System.Int64)">
            <summary>
            Grows our clock to be as long as len
            sets the added entries to 0@0.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.IRegisterRuntimeOperation">
            <summary>
            Interface to register interesting runtime operations.
            For race detection, the interesting operations are:
            1. Reads and writes to the (shared) heap
            2. Enqueues (posts) and dequeues (action begins)
            3. Creation of a new machine
            In addition, this interface also allows clients to query
            the runtime for the currently running machine, and whether
            the runtime is in an action.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.IRegisterRuntimeOperation.InAction">
            <summary>
            InAction[machineId.Value] = true iff the runtime executing an action
            in machine with Id machineId
            Reads and writes are instrumented only provided we're in an action.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.IRegisterRuntimeOperation.InMonitor">
            <summary>
            InMonitor = -1 iff the runtime is not inside a monitor
            and the monitor id otherwise
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.IRegisterRuntimeOperation.RegisterRead(System.UInt64,System.String,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.Boolean)">
            <summary>
            Process a read to a heap location.
            </summary>
            <param name="source">The machine performing the read</param>
            <param name="sourceInformation"> Line number of this read</param>
            <param name="location">The base address for the heap location read</param>
            <param name="objHandle">The object handle</param>
            <param name="offset">The offset</param>
            <param name="isVolatile">Was the location declared volatile?</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.IRegisterRuntimeOperation.RegisterWrite(System.UInt64,System.String,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.Boolean)">
            <summary>
            Process a write to a heap location.
            </summary>
            <param name="source">The machine performing the write</param>
            <param name="sourceInformation"> Line number of this write</param>
            <param name="location">The base address for the heap location written</param>
            <param name="objHandle">The object handle</param>
            <param name="offset">The offset</param>
            <param name="isVolatile">Was the location declared volatile?</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.IRegisterRuntimeOperation.RegisterEnqueue(Microsoft.PSharp.MachineId,Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,System.UInt64)">
            <summary>
            Process the enqueue of an event by a machine.
            </summary>
            <param name="source">The id of the machine that is the origin of the enqueue/post</param>
            <param name="target">The id of the machine receiving the event</param>
            <param name="e">The event sent</param>
            <param name="sequenceNumber">Is n if this is the n'th enqueue</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.IRegisterRuntimeOperation.RegisterDequeue(Microsoft.PSharp.MachineId,Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,System.UInt64)">
            <summary>
            Process the deq and begin of an action by a machine.
            </summary>
            <param name="source">The id of the machine that originally posted the event</param>
            <param name="target">The id of the machine processing the event</param>
            <param name="e">The event being processed</param>
            <param name="sequenceNumber">Is n if this is the n'th enqueue</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.IRegisterRuntimeOperation.RegisterCreateMachine(Microsoft.PSharp.MachineId,Microsoft.PSharp.MachineId)">
            <summary>
            Update the internal data structures and vector clocks when a machine creates another machine.
            </summary>
            <param name="source">The id of the machine that is the creator.</param>
            <param name="target">The id of the machine that is freshly created.</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.IRegisterRuntimeOperation.RegisterRuntime(Microsoft.PSharp.IMachineRuntime)">
            <summary>
            Set the runtime an implementer should forward TryGetCurrentMachineId calls to.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.IRegisterRuntimeOperation.TryGetCurrentMachineId(System.UInt64@)">
            <summary>
            Return true if the runtime is currently executing a machine's action.
            If it is, write its id to the out parameter as a ulong.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.IRegisterRuntimeOperation.ClearAll">
            <summary>
            Clear the internal state the reporter maintains.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineEventQueue">
            <summary>
            Implements a queue of events that is used by a serialized machine during testing.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineEventQueue.MachineStateManager">
            <summary>
            Manages the state of the machine that owns this queue.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineEventQueue.Machine">
            <summary>
            The machine that owns this queue.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineEventQueue.Queue">
            <summary>
            The internal queue that contains events with their metadata.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineEventQueue.RaisedEvent">
            <summary>
            The raised event and its metadata, or null if no event has been raised.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineEventQueue.EventWaitTypes">
            <summary>
            Map from the types of events that the owner of the queue is waiting to receive
            to an optional predicate. If an event of one of these types is enqueued, then
            if there is no predicate, or if there is a predicate and evaluates to true, then
            the event is received, else the event is deferred.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineEventQueue.ReceiveCompletionSource">
            <summary>
            Task completion source that contains the event obtained using an explicit receive.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineEventQueue.IsClosed">
            <summary>
            Checks if the queue is accepting new events.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineEventQueue.Size">
            <summary>
            The size of the queue.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineEventQueue.IsEventRaised">
            <summary>
            Checks if an event has been raised.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineEventQueue.#ctor(Microsoft.PSharp.Runtime.IMachineStateManager,Microsoft.PSharp.Machine)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineEventQueue"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineEventQueue.Enqueue(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Enqueues the specified event and its optional metadata.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineEventQueue.Dequeue">
            <summary>
            Dequeues the next event, if there is one available.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineEventQueue.TryDequeueEvent(System.Boolean)">
            <summary>
            Dequeues the next event and its metadata, if there is one available, else returns null.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineEventQueue.Raise(Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Enqueues the specified raised event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineEventQueue.ReceiveAsync(System.Type,System.Func{Microsoft.PSharp.Event,System.Boolean})">
            <summary>
            Waits to receive an event of the specified type that satisfies an optional predicate.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineEventQueue.ReceiveAsync(System.Type[])">
            <summary>
            Waits to receive an event of the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineEventQueue.ReceiveAsync(System.Tuple{System.Type,System.Func{Microsoft.PSharp.Event,System.Boolean}}[])">
            <summary>
            Waits to receive an event of the specified types that satisfy the specified predicates.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineEventQueue.ReceiveAsync(System.Collections.Generic.Dictionary{System.Type,System.Func{Microsoft.PSharp.Event,System.Boolean}})">
            <summary>
            Waits for an event to be enqueued.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineEventQueue.GetCachedState">
            <summary>
            Returns the cached state of the queue.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineEventQueue.Close">
            <summary>
            Closes the queue, which stops any further event enqueues.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineEventQueue.Dispose(System.Boolean)">
            <summary>
            Disposes the queue resources.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineEventQueue.Dispose">
            <summary>
            Disposes the queue resources.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineStateManager">
            <summary>
            Implements a state manager that is used by a serialized machine during testing.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineStateManager.Runtime">
            <summary>
            The runtime that executes the machine being managed.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineStateManager.Machine">
            <summary>
            The machine being managed.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineStateManager.IsEventHandlerRunning">
            <summary>
            True if the event handler of the machine is running, else false.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineStateManager.OperationGroupId">
            <summary>
            Id used to identify subsequent operations performed by the machine.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineStateManager.ProgramCounter">
            <summary>
            Program counter used for state-caching. Distinguishes
            scheduling from non-deterministic choices.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineStateManager.IsTransitionStatementCalledInCurrentAction">
            <summary>
            True if a transition statement was called in the current action, else false.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineStateManager.IsInsideOnExit">
            <summary>
            True if the machine is executing an on exit action, else false.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineStateManager.#ctor(Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime,Microsoft.PSharp.Machine,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineStateManager"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineStateManager.GetCachedState">
            <summary>
            Returns the cached state of the machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineStateManager.IsEventIgnoredInCurrentState(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Checks if the specified event is ignored in the current machine state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineStateManager.IsEventDeferredInCurrentState(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Checks if the specified event is deferred in the current machine state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineStateManager.IsDefaultHandlerInstalledInCurrentState">
            <summary>
            Checks if a default handler is installed in the current machine state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineStateManager.OnEnqueueEvent(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies the machine that an event has been enqueued.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineStateManager.OnRaiseEvent(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies the machine that an event has been raised.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineStateManager.OnWaitEvent(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Notifies the machine that it is waiting to receive an event of one of the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineStateManager.OnReceiveEvent(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies the machine that an event it was waiting to receive has been enqueued.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineStateManager.OnReceiveEventWithoutWaiting(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies the machine that an event it was waiting to receive was already in the
            event queue when the machine invoked the receive statement.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineStateManager.OnDropEvent(Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies the machine that an event has been dropped.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineStateManager.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineStateManager.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineStateManager.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SerializedMachineStateManager.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Runtime.TestHarnessMachine">
            <summary>
            Implements a test harness machine that executes the synchronous
            test entry point during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.TestHarnessMachine.TestAction">
            <summary>
            The test action.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.TestHarnessMachine.TestFunction">
            <summary>
            The test function.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.TestHarnessMachine.TestName">
            <summary>
            The test name.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Runtime.TestHarnessMachine.OperationGroupId">
            <summary>
            Id used to identify subsequent operations performed by this machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.TestHarnessMachine.#ctor(System.Action{Microsoft.PSharp.IMachineRuntime},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Runtime.TestHarnessMachine"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.TestHarnessMachine.#ctor(System.Func{Microsoft.PSharp.IMachineRuntime,System.Threading.Tasks.Task},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Runtime.TestHarnessMachine"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.TestHarnessMachine.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Runtime.TestHarnessMachine"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.TestHarnessMachine.RunAsync">
            <summary>
            Runs the test harness asynchronously.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime">
            <summary>
            Runtime for testing a machine in isolation.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.Machine">
            <summary>
            The machine being tested.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.MachineInbox">
            <summary>
            The inbox of the machine being tested.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.QuiescenceCompletionSource">
            <summary>
            Task completion source that completes when the machine being tested reaches quiescence.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.IsMachineWaitingToReceiveEvent">
            <summary>
            True if the machine is waiting to receive and event, else false.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.#ctor(System.Type,Microsoft.PSharp.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.StartAsync(Microsoft.PSharp.Event)">
            <summary>
            Starts executing the machine-under-test by transitioning it to its initial state
            and passing an optional initialization event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.CreateMachineIdFromName(System.Type,System.String)">
            <summary>
            Creates a machine id that is uniquely tied to the specified unique name. The
            returned machine id can either be a fresh id (not yet bound to any machine),
            or it can be bound to a previously created machine. In the second case, this
            machine id can be directly used to communicate with the corresponding machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.CreateMachine(System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and with
            the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be
            used to access its payload, and cannot be handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.CreateMachine(System.Type,System.String,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and name, and
            with the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be
            used to access its payload, and cannot be handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.CreateMachine(Microsoft.PSharp.MachineId,System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified type, using the specified <see cref="T:Microsoft.PSharp.MachineId"/>.
            This method optionally passes an <see cref="T:Microsoft.PSharp.Event"/> to the new machine, which can only
            be used to access its payload, and cannot be handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.CreateMachineAndExecuteAsync(System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and with the
            specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used to
            access its payload, and cannot be handled. The method returns only when
            the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.CreateMachineAndExecuteAsync(System.Type,System.String,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and name, and with
            the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used to
            access its payload, and cannot be handled. The method returns only when the
            machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.CreateMachineAndExecuteAsync(Microsoft.PSharp.MachineId,System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/>, using the specified
            unbound machine id, and passes the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This
            event can only be used to access its payload, and cannot be handled. The method
            returns only when the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any)
            is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.CreateMachineAndExecute(System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and with the
            specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used to
            access its payload, and cannot be handled. The method returns only when
            the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.CreateMachineAndExecute(System.Type,System.String,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and name, and with
            the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used to
            access its payload, and cannot be handled. The method returns only when the
            machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.CreateMachineAndExecute(Microsoft.PSharp.MachineId,System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/>, using the specified
            unbound machine id, and passes the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This
            event can only be used to access its payload, and cannot be handled. The method
            returns only when the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any)
            is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.SendEvent(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.SendEventAndExecuteAsync(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an <see cref="T:Microsoft.PSharp.Event"/> to a machine. Returns immediately if the target machine was already
            running. Otherwise blocks until the machine handles the event and reaches quiescense.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.SendEventAndExecute(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an <see cref="T:Microsoft.PSharp.Event"/> to a machine. Returns immediately if the target machine was already
            running. Otherwise blocks until the machine handles the event and reaches quiescense.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.GetCurrentOperationGroupId(Microsoft.PSharp.MachineId)">
            <summary>
            Returns the operation group id of the specified machine. Returns <see cref="F:System.Guid.Empty"/>
            if the id is not set, or if the <see cref="T:Microsoft.PSharp.MachineId"/> is not associated with this runtime.
            During testing, the runtime asserts that the specified machine is currently executing.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.CreateMachine(Microsoft.PSharp.MachineId,System.Type,System.String,Microsoft.PSharp.Event,Microsoft.PSharp.Machine,System.Guid)">
            <summary>
            Creates a new <see cref="F:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.Machine"/> of the specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.CreateMachineAndExecuteAsync(Microsoft.PSharp.MachineId,System.Type,System.String,Microsoft.PSharp.Event,Microsoft.PSharp.Machine,System.Guid)">
            <summary>
            Creates a new <see cref="F:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.Machine"/> of the specified <see cref="T:System.Type"/>. The
            method returns only when the created machine reaches quiescence.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.SendEvent(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.Runtime.AsyncMachine,System.Guid,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.SendEventAndExecuteAsync(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.Runtime.AsyncMachine,System.Guid,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a machine. Returns immediately if the target machine was
            already running. Otherwise blocks until the machine handles the event and reaches quiescense.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.RunMachineEventHandler(Microsoft.PSharp.Machine,Microsoft.PSharp.Event,System.Boolean)">
            <summary>
            Runs a new asynchronous machine event handler.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.CreateMachineTimer(Microsoft.PSharp.Timers.TimerInfo,Microsoft.PSharp.Machine)">
            <summary>
            Creates a new timer that sends a <see cref="T:Microsoft.PSharp.Timers.TimerElapsedEvent"/> to its owner machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.TryCreateMonitor(System.Type)">
            <summary>
            Tries to create a new <see cref="T:Microsoft.PSharp.Monitor"/> of the specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.Monitor(System.Type,Microsoft.PSharp.Runtime.AsyncMachine,Microsoft.PSharp.Event)">
            <summary>
            Invokes the specified <see cref="T:Microsoft.PSharp.Monitor"/> with the specified <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.Assert(System.Boolean)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.GetNondeterministicBooleanChoice(Microsoft.PSharp.Runtime.AsyncMachine,System.Int32)">
            <summary>
            Returns a nondeterministic boolean choice, that can be
            controlled during analysis or testing.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.GetFairNondeterministicBooleanChoice(Microsoft.PSharp.Runtime.AsyncMachine,System.String)">
            <summary>
            Returns a fair nondeterministic boolean choice, that can be
            controlled during analysis or testing.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.GetNondeterministicIntegerChoice(Microsoft.PSharp.Runtime.AsyncMachine,System.Int32)">
            <summary>
            Returns a nondeterministic integer choice, that can be
            controlled during analysis or testing.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.NotifyEnteredState(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that a machine entered a state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.NotifyEnteredState(Microsoft.PSharp.Monitor)">
            <summary>
            Notifies that a monitor entered a state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.NotifyExitedState(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that a machine exited a state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.NotifyExitedState(Microsoft.PSharp.Monitor)">
            <summary>
            Notifies that a monitor exited a state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.NotifyInvokedAction(Microsoft.PSharp.Machine,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a machine invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.NotifyInvokedAction(Microsoft.PSharp.Monitor,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a monitor invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.NotifyRaisedEvent(Microsoft.PSharp.Machine,Microsoft.PSharp.Event,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine raised an <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.NotifyRaisedEvent(Microsoft.PSharp.Monitor,Microsoft.PSharp.Event,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a monitor raised an <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.NotifyDequeuedEvent(Microsoft.PSharp.Machine,Microsoft.PSharp.Event,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine dequeued an <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.NotifyWaitEvent(Microsoft.PSharp.Machine,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Notifies that a machine is waiting to receive an event of one of the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.NotifyReceivedEvent(Microsoft.PSharp.Machine,Microsoft.PSharp.Event,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine received an event that it was waiting for.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.NotifyReceivedEventWithoutWaiting(Microsoft.PSharp.Machine,Microsoft.PSharp.Event,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine received an event without waiting because the event
            was already in the inbox when the machine invoked the receive statement.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.NotifyHalted(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that a machine has halted.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.MachineTestingRuntime.Dispose(System.Boolean)">
            <summary>
            Disposes runtime resources.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime">
            <summary>
            Runtime for systematically testing machines by controlling the scheduler.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.AsyncLocalMachineId">
            <summary>
            Stores the machine id of each machine executing in a given asynchronous context.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.Scheduler">
            <summary>
            The bug-finding scheduler.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.TaskScheduler">
            <summary>
            The controlled task scheduler.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.ScheduleTrace">
            <summary>
            The P# program schedule trace.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.BugTrace">
            <summary>
            The bug trace.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.CoverageInfo">
            <summary>
            Data structure containing information
            regarding testing coverage.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.Reporter">
            <summary>
            Interface for registering runtime operations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.StateCache">
            <summary>
            The P# program state cache.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.Monitors">
            <summary>
            List of monitors in the program.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.MachineOperations">
            <summary>
            Map from unique ids to asynchronous operations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.ControlledTaskMap">
            <summary>
            Map from task that are controlled by the runtime to machines.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.NameValueToMachineId">
            <summary>
            Map that stores all unique names and their corresponding machine ids.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.CreatedMachineIds">
            <summary>
            Set of all machine Ids created by this runtime.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.RootTaskId">
            <summary>
            The root task id.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.#ctor(Microsoft.PSharp.Configuration,Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy,Microsoft.PSharp.TestingServices.IRegisterRuntimeOperation)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.CreateMachineIdFromName(System.Type,System.String)">
            <summary>
            Creates a machine id that is uniquely tied to the specified unique name. The
            returned machine id can either be a fresh id (not yet bound to any machine),
            or it can be bound to a previously created machine. In the second case, this
            machine id can be directly used to communicate with the corresponding machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.CreateMachine(System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and with
            the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be
            used to access its payload, and cannot be handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.CreateMachine(System.Type,System.String,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and name, and
            with the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be
            used to access its payload, and cannot be handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.CreateMachine(Microsoft.PSharp.MachineId,System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified type, using the specified <see cref="T:Microsoft.PSharp.MachineId"/>.
            This method optionally passes an <see cref="T:Microsoft.PSharp.Event"/> to the new machine, which can only
            be used to access its payload, and cannot be handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.CreateMachineAndExecuteAsync(System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and with the
            specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used to
            access its payload, and cannot be handled. The method returns only when
            the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.CreateMachineAndExecuteAsync(System.Type,System.String,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and name, and with
            the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used to
            access its payload, and cannot be handled. The method returns only when the
            machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.CreateMachineAndExecuteAsync(Microsoft.PSharp.MachineId,System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/>, using the specified
            unbound machine id, and passes the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This
            event can only be used to access its payload, and cannot be handled. The method
            returns only when the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any)
            is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.CreateMachineAndExecute(System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and with the
            specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used to
            access its payload, and cannot be handled. The method returns only when
            the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.CreateMachineAndExecute(System.Type,System.String,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and name, and with
            the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event can only be used to
            access its payload, and cannot be handled. The method returns only when the
            machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.CreateMachineAndExecute(Microsoft.PSharp.MachineId,System.Type,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/>, using the specified
            unbound machine id, and passes the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This
            event can only be used to access its payload, and cannot be handled. The method
            returns only when the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any)
            is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.SendEvent(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.SendEventAndExecuteAsync(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an <see cref="T:Microsoft.PSharp.Event"/> to a machine. Returns immediately if the target machine was already
            running. Otherwise blocks until the machine handles the event and reaches quiescense.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.SendEventAndExecute(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,System.Guid,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an <see cref="T:Microsoft.PSharp.Event"/> to a machine. Returns immediately if the target machine was already
            running. Otherwise blocks until the machine handles the event and reaches quiescense.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.GetCurrentOperationGroupId(Microsoft.PSharp.MachineId)">
            <summary>
            Returns the operation group id of the specified machine. Returns <see cref="F:System.Guid.Empty"/>
            if the id is not set, or if the <see cref="T:Microsoft.PSharp.MachineId"/> is not associated with this runtime.
            During testing, the runtime asserts that the specified machine is currently executing.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.RunTestHarness(System.Action{Microsoft.PSharp.IMachineRuntime},System.String)">
            <summary>
            Runs the specified test inside a synchronous test harness machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.RunTestHarness(System.Func{Microsoft.PSharp.IMachineRuntime,System.Threading.Tasks.Task},System.String)">
            <summary>
            Runs the specified test inside an test harness machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.RunTestHarness(Microsoft.PSharp.TestingServices.Runtime.TestHarnessMachine)">
            <summary>
            Runs the specified test harness machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.CreateMachine(Microsoft.PSharp.MachineId,System.Type,System.String,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and name, using the specified
            unbound machine id, and passes the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event
            can only be used to access its payload, and cannot be handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.CreateMachine(Microsoft.PSharp.MachineId,System.Type,System.String,Microsoft.PSharp.Event,Microsoft.PSharp.Machine,System.Guid)">
            <summary>
            Creates a new <see cref="T:Microsoft.PSharp.Machine"/> of the specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.CreateMachineAndExecuteAsync(Microsoft.PSharp.MachineId,System.Type,System.String,Microsoft.PSharp.Event,System.Guid)">
            <summary>
            Creates a new machine of the specified <see cref="T:System.Type"/> and name, using the specified
            unbound machine id, and passes the specified optional <see cref="T:Microsoft.PSharp.Event"/>. This event
            can only be used to access its payload, and cannot be handled. The method returns only
            when the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/> (if any) is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.CreateMachineAndExecuteAsync(Microsoft.PSharp.MachineId,System.Type,System.String,Microsoft.PSharp.Event,Microsoft.PSharp.Machine,System.Guid)">
            <summary>
            Creates a new <see cref="T:Microsoft.PSharp.Machine"/> of the specified <see cref="T:System.Type"/>. The
            method returns only when the machine is initialized and the <see cref="T:Microsoft.PSharp.Event"/>
            (if any) is handled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.CreateMachine(Microsoft.PSharp.MachineId,System.Type,System.String,Microsoft.PSharp.Machine,System.Guid)">
            <summary>
            Creates a new <see cref="T:Microsoft.PSharp.Machine"/> of the specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.SendEvent(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.Runtime.AsyncMachine,System.Guid,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.SendEventAndExecuteAsync(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.Runtime.AsyncMachine,System.Guid,Microsoft.PSharp.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.PSharp.Event"/> to a machine. Returns immediately if the target machine was
            already running. Otherwise blocks until the machine handles the event and reaches quiescense.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.EnqueueEvent(Microsoft.PSharp.MachineId,Microsoft.PSharp.Event,Microsoft.PSharp.Runtime.AsyncMachine,System.Guid,Microsoft.PSharp.SendOptions,Microsoft.PSharp.Machine@,Microsoft.PSharp.EventInfo@)">
            <summary>
            Enqueues an event to the machine with the specified id.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.EnqueueEvent(Microsoft.PSharp.Machine,Microsoft.PSharp.Event,Microsoft.PSharp.Runtime.AsyncMachine,System.Guid,Microsoft.PSharp.SendOptions,Microsoft.PSharp.EventInfo@)">
            <summary>
            Enqueues an event to the machine with the specified id.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.RunMachineEventHandler(Microsoft.PSharp.Machine,Microsoft.PSharp.Event,System.Boolean,Microsoft.PSharp.Machine,Microsoft.PSharp.EventInfo)">
            <summary>
            Runs a new asynchronous machine event handler.
            This is a fire and forget invocation.
            </summary>
            <param name="machine">Machine that executes this event handler.</param>
            <param name="initialEvent">Event for initializing the machine.</param>
            <param name="isFresh">If true, then this is a new machine.</param>
            <param name="syncCaller">Caller machine that is blocked for quiscence.</param>
            <param name="enablingEvent">If non-null, the event info of the sent event that caused the event handler to be restarted.</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.WaitAsync">
            <summary>
            Waits until all machines have finished execution.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.CreateMachineTimer(Microsoft.PSharp.Timers.TimerInfo,Microsoft.PSharp.Machine)">
            <summary>
            Creates a new timer that sends a <see cref="T:Microsoft.PSharp.Timers.TimerElapsedEvent"/> to its owner machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.TryCreateMonitor(System.Type)">
            <summary>
            Tries to create a new monitor of the given type.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.Monitor(System.Type,Microsoft.PSharp.Runtime.AsyncMachine,Microsoft.PSharp.Event)">
            <summary>
            Invokes the specified monitor with the given event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.Assert(System.Boolean)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.AssertTransitionStatement(Microsoft.PSharp.Machine)">
            <summary>
            Asserts that a transition statement (raise, goto or pop) has not
            already been called. Records that RGP has been called.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.AssertNoPendingTransitionStatement(Microsoft.PSharp.Machine,System.String)">
            <summary>
            Asserts that a transition statement (raise, goto or pop) has not already been called.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.AssertCorrectCallerMachine(Microsoft.PSharp.Machine,System.String)">
            <summary>
            Asserts that the machine calling a P# machine method is also
            the machine that is currently executing.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.AssertNoExternalConcurrencyUsed">
            <summary>
            Asserts that no task that is not controlled by the runtime is currently executing.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.CheckNoMonitorInHotStateAtTermination">
            <summary>
            Checks that no monitor is in a hot state upon program termination.
            If the program is still running, then this method returns without
            performing a check.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.GetNondeterministicBooleanChoice(Microsoft.PSharp.Runtime.AsyncMachine,System.Int32)">
            <summary>
            Returns a nondeterministic boolean choice, that can be
            controlled during analysis or testing.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.GetFairNondeterministicBooleanChoice(Microsoft.PSharp.Runtime.AsyncMachine,System.String)">
            <summary>
            Returns a fair nondeterministic boolean choice, that can be
            controlled during analysis or testing.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.GetNondeterministicIntegerChoice(Microsoft.PSharp.Runtime.AsyncMachine,System.Int32)">
            <summary>
            Returns a nondeterministic integer, that can be
            controlled during analysis or testing.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.NotifyEnteredState(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that a machine entered a state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.NotifyEnteredState(Microsoft.PSharp.Monitor)">
            <summary>
            Notifies that a monitor entered a state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.NotifyExitedState(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that a machine exited a state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.NotifyExitedState(Microsoft.PSharp.Monitor)">
            <summary>
            Notifies that a monitor exited a state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.NotifyInvokedAction(Microsoft.PSharp.Machine,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a machine invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.NotifyCompletedAction(Microsoft.PSharp.Machine,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a machine completed an action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.NotifyInvokedOnEntryAction(Microsoft.PSharp.Machine,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a machine invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.NotifyCompletedOnEntryAction(Microsoft.PSharp.Machine,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a machine completed invoking an action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.NotifyInvokedOnExitAction(Microsoft.PSharp.Machine,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a machine invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.NotifyCompletedOnExitAction(Microsoft.PSharp.Machine,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a machine completed invoking an action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.NotifyInvokedAction(Microsoft.PSharp.Monitor,System.Reflection.MethodInfo,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a monitor invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.NotifyRaisedEvent(Microsoft.PSharp.Machine,Microsoft.PSharp.Event,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine raised an <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.NotifyRaisedEvent(Microsoft.PSharp.Monitor,Microsoft.PSharp.Event,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a monitor raised an <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.NotifyDequeuedEvent(Microsoft.PSharp.Machine,Microsoft.PSharp.Event,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine dequeued an <see cref="T:Microsoft.PSharp.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.NotifyPop(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that a machine invoked pop.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.NotifyReceiveCalled(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that a machine called Receive.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.NotifyHandleRaisedEvent(Microsoft.PSharp.Machine,Microsoft.PSharp.Event)">
            <summary>
            Notifies that a machine is handling a raised event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.NotifyWaitEvent(Microsoft.PSharp.Machine,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Notifies that a machine is waiting to receive an event of one of the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.NotifyReceivedEvent(Microsoft.PSharp.Machine,Microsoft.PSharp.Event,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine enqueued an event that it was waiting to receive.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.NotifyReceivedEventWithoutWaiting(Microsoft.PSharp.Machine,Microsoft.PSharp.Event,Microsoft.PSharp.EventInfo)">
            <summary>
            Notifies that a machine received an event without waiting because the event
            was already in the inbox when the machine invoked the receive statement.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.NotifyHalted(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that a machine has halted.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.NotifyDefaultEventHandlerCheck(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that the inbox of the specified machine is about to be
            checked to see if the default event handler should fire.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.NotifyDefaultHandlerFired(Microsoft.PSharp.Machine)">
            <summary>
            Notifies that the default handler of the specified machine has been fired.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.ReportActivityCoverageOfReceivedEvent(Microsoft.PSharp.Machine,Microsoft.PSharp.EventInfo)">
            <summary>
            Reports coverage for the specified received event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.ReportActivityCoverageOfMonitorEvent(Microsoft.PSharp.Runtime.AsyncMachine,Microsoft.PSharp.Monitor,Microsoft.PSharp.Event)">
            <summary>
            Reports coverage for the specified monitor event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.ReportActivityCoverageOfMachine(Microsoft.PSharp.Machine)">
            <summary>
            Reports coverage for the specified machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.ReportActivityCoverageOfMonitor(Microsoft.PSharp.Monitor)">
            <summary>
            Reports coverage for the specified monitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.ReportActivityCoverageOfStateTransition(Microsoft.PSharp.Machine,Microsoft.PSharp.Event)">
            <summary>
            Reports coverage for the specified state transition.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.ReportActivityCoverageOfPopTransition(Microsoft.PSharp.Machine,System.Type,System.Type)">
            <summary>
            Reports coverage for a pop transition.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.ReportActivityCoverageOfMonitorTransition(Microsoft.PSharp.Monitor,Microsoft.PSharp.Event)">
            <summary>
            Reports coverage for the specified state transition.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.ResetProgramCounter(Microsoft.PSharp.Machine)">
            <summary>
            Resets the program counter of the specified machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.GetExecutingMachine``1">
            <summary>
            Gets the currently executing machine of type <typeparamref name="TMachine"/>,
            or null if no such machine is currently executing.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.GetCurrentMachineId">
            <summary>
            Gets the id of the currently executing machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.GetAsynchronousOperation(System.UInt64)">
            <summary>
            Gets the asynchronous operation associated with the specified id.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.GetProgramState">
            <summary>
            Returns the fingerprint of the current program state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.WrapAndThrowException(System.Exception,System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:Microsoft.PSharp.Runtime.AssertionFailureException"/> exception
            containing the specified exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime.Dispose(System.Boolean)">
            <summary>
            Disposes runtime resources.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.MachineTestKit`1">
            <summary>
            Provides methods for testing a machine of type <typeparamref name="T"/> in isolation.
            </summary>
            <typeparam name="T">The machine type to test.</typeparam>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.MachineTestKit`1.Runtime">
            <summary>
            The machine testing runtime.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.MachineTestKit`1.Machine">
            <summary>
            The instance of the machine being tested.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.MachineTestKit`1.IsRunning">
            <summary>
            True if the machine has started its execution, else false.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.MachineTestKit`1.#ctor(Microsoft.PSharp.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.MachineTestKit`1"/> class.
            </summary>
            <param name="configuration">The runtime configuration to use.</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.MachineTestKit`1.StartMachineAsync(Microsoft.PSharp.Event)">
            <summary>
            Transitions the machine to its start state, passes the optional specified event
            and invokes its on-entry handler, if there is one available. This method returns
            a task that completes when the machine reaches quiescence (typically when the
            event handler finishes executing because there are not more events to dequeue,
            or when the machine asynchronously waits to receive an event).
            </summary>
            <param name="initialEvent">Optional event used during initialization.</param>
            <returns>Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.MachineTestKit`1.SendEventAsync(Microsoft.PSharp.Event)">
            <summary>
            Sends an event to the machine and starts its event handler. This method returns
            a task that completes when the machine reaches quiescence (typically when the
            event handler finishes executing because there are not more events to dequeue,
            or when the machine asynchronously waits to receive an event).
            </summary>
            <returns>Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.MachineTestKit`1.Invoke(System.String,System.Object[])">
            <summary>
            Invokes the machine method with the specified name, and passing the specified
            optional parameters. Use this method to invoke private methods of the machine.
            </summary>
            <param name="methodName">The name of the machine method.</param>
            <param name="parameters">The parameters to the method.</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.MachineTestKit`1.Invoke(System.String,System.Type[],System.Object[])">
            <summary>
            Invokes the machine method with the specified name and parameter types, and passing the
            specified optional parameters. Use this method to invoke private methods of the machine.
            </summary>
            <param name="methodName">The name of the machine method.</param>
            <param name="parameterTypes">The parameter types of the method.</param>
            <param name="parameters">The parameters to the method.</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.MachineTestKit`1.InvokeAsync(System.String,System.Object[])">
            <summary>
            Invokes the asynchronous machine method with the specified name, and passing the specified
            optional parameters. Use this method to invoke private methods of the machine.
            </summary>
            <param name="methodName">The name of the machine method.</param>
            <param name="parameters">The parameters to the method.</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.MachineTestKit`1.InvokeAsync(System.String,System.Type[],System.Object[])">
            <summary>
            Invokes the asynchronous machine method with the specified name and parameter types, and passing
            the specified optional parameters. Use this method to invoke private methods of the machine.
            </summary>
            <param name="methodName">The name of the machine method.</param>
            <param name="parameterTypes">The parameter types of the method.</param>
            <param name="parameters">The parameters to the method.</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.MachineTestKit`1.GetMethod(System.String,System.Boolean,System.Type[])">
            <summary>
            Uses reflection to get the machine method with the specified name and parameter types.
            </summary>
            <param name="methodName">The name of the machine method.</param>
            <param name="isAsync">True if the method is async, else false.</param>
            <param name="parameterTypes">The parameter types of the method.</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.MachineTestKit`1.Assert(System.Boolean)">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.MachineTestKit`1.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.MachineTestKit`1.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.MachineTestKit`1.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.MachineTestKit`1.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts if the specified condition holds.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.MachineTestKit`1.AssertStateTransition``1">
            <summary>
            Asserts that the machine has transitioned to the state with the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="S">The type of the machine state.</typeparam>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.MachineTestKit`1.AssertStateTransition(System.String)">
            <summary>
            Asserts that the machine has transitioned to the state with the specified name
            (either <see cref="P:System.Type.FullName"/> or <see cref="P:System.Reflection.MemberInfo.Name"/>).
            </summary>
            <param name="machineStateName">The name of the machine state.</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.MachineTestKit`1.AssertIsWaitingToReceiveEvent(System.Boolean)">
            <summary>
            Asserts that the machine is waiting (or not) to receive an event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.MachineTestKit`1.AssertInboxSize(System.Int32)">
            <summary>
            Asserts that the machine inbox contains the specified number of events.
            </summary>
            <param name="numEvents">The number of events in the inbox.</param>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler">
            <summary>
            Provides methods for controlling the schedule of asynchronous operations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.Runtime">
            <summary>
            The P# testing runtime.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.Strategy">
            <summary>
            The scheduling strategy to be used for state-space exploration.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.OperationMap">
            <summary>
            Map from unique ids to asynchronous operations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.CompletionSource">
            <summary>
            The scheduler completion source.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.IsSchedulerRunning">
            <summary>
            Checks if the scheduler is running.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.ScheduledOperation">
            <summary>
            The currently scheduled asynchronous operation.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.ScheduledSteps">
            <summary>
            Number of scheduled steps.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.HasFullyExploredSchedule">
            <summary>
            Checks if the schedule has been fully explored.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.BugFound">
            <summary>
            True if a bug was found.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.BugReport">
            <summary>
            Bug report.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.#ctor(Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime,Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.ScheduleNextOperation(Microsoft.PSharp.TestingServices.Scheduling.AsyncOperationType,Microsoft.PSharp.TestingServices.Scheduling.AsyncOperationTarget,System.UInt64)">
            <summary>
            Schedules the next asynchronous operation.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.GetNextNondeterministicBooleanChoice(System.Int32,System.String)">
            <summary>
            Returns the next nondeterministic boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.GetNextNondeterministicIntegerChoice(System.Int32)">
            <summary>
            Returns the next nondeterministic integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.WaitForOperationToStart(Microsoft.PSharp.TestingServices.Scheduling.AsyncOperation)">
            <summary>
            Waits for the specified asynchronous operation to start.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.NotifyOperationCreated(Microsoft.PSharp.TestingServices.Scheduling.AsyncOperation)">
            <summary>
            Notify that the specified asynchronous operation has been created.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.NotifyOperationStarted(Microsoft.PSharp.TestingServices.Scheduling.AsyncOperation)">
            <summary>
            Notify that the specified asynchronous operation has started.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.NotifyMonitorRegistered(Microsoft.PSharp.TestingServices.Scheduling.AsyncOperation)">
            <summary>
            Notify that a monitor was registered.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.NotifyAssertionFailure(System.String,System.Boolean,System.Boolean)">
            <summary>
            Notify that an assertion has failed.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.GetEnabledSchedulableIds">
            <summary>
            Returns the enabled schedulable ids.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.GetReport">
            <summary>
            Returns a test report with the scheduling statistics.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.CheckIfProgramHasLivelocked(System.Collections.Generic.IEnumerable{Microsoft.PSharp.TestingServices.Scheduling.AsyncOperation})">
            <summary>
            Checks for a livelock. This happens when there are no more enabled operations,
            but there is one or more blocked operations that are waiting to receive an event
            or for a task to complete.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.CheckIfSchedulingStepsBoundIsReached">
            <summary>
            Checks if the scheduling steps bound has been reached. If yes,
            it stops the scheduler and kills all enabled machines.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.WaitAsync">
            <summary>
            Waits until the scheduler terminates.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.Stop">
            <summary>
            Stops the scheduler.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.BugFindingScheduler.KillRemainingMachines">
            <summary>
            Kills any remaining machines at the end of the schedule.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.ControlledTaskScheduler">
            <summary>
            A task scheduler that can be controlled during testing.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.ControlledTaskScheduler.Runtime">
            <summary>
            The P# testing runtime.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.ControlledTaskScheduler.ControlledTaskMap">
            <summary>
            Map from task that are controlled by the runtime to machines.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.ControlledTaskScheduler.#ctor(Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime,System.Collections.Concurrent.ConcurrentDictionary{System.Int32,Microsoft.PSharp.Runtime.AsyncMachine})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.ControlledTaskScheduler"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.ControlledTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>
            Enqueues the given task. If the task does not correspond to a P# machine,
            then it wraps it in a task machine and schedules it.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.ControlledTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Tries to execute the task inline.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.ControlledTaskScheduler.GetScheduledTasks">
            <summary>
            Returns the wrapped in a machine scheduled tasks.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.ControlledTaskScheduler.Execute(System.Threading.Tasks.Task)">
            <summary>
            Executes the given scheduled task on the thread pool.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy">
            <summary>
            Interface of a machine scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy.GetNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation@,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Forces the next asynchronous operation to be scheduled.
            </summary>
            <param name="next">The next operation to schedule.</param>
            <param name="ops">List of operations that can be scheduled.</param>
            <param name="current">The currently scheduled operation.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy.GetNextBooleanChoice(System.Int32,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
            <param name="maxValue">The max value.</param>
            <param name="next">The next boolean choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy.GetNextIntegerChoice(System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
            <param name="maxValue">The max value.</param>
            <param name="next">The next integer choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy.ForceNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Forces the next asynchronous operation to be scheduled.
            </summary>
            <param name="next">The next operation to schedule.</param>
            <param name="ops">List of operations that can be scheduled.</param>
            <param name="current">The currently scheduled operation.</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy.ForceNextBooleanChoice(System.Int32,System.Boolean)">
            <summary>
            Forces the next boolean choice.
            </summary>
            <param name="maxValue">The max value.</param>
            <param name="next">The next boolean choice.</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy.ForceNextIntegerChoice(System.Int32,System.Int32)">
            <summary>
            Forces the next integer choice.
            </summary>
            <param name="maxValue">The max value.</param>
            <param name="next">The next integer choice.</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy.PrepareForNextIteration">
            <summary>
            Prepares for the next scheduling iteration. This is invoked
            at the end of a scheduling iteration. It must return false
            if the scheduling strategy should stop exploring.
            </summary>
            <returns>True to start the next iteration.</returns>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy.Reset">
            <summary>
            Resets the scheduling strategy. This is typically invoked by
            parent strategies to reset child strategies.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy.GetScheduledSteps">
            <summary>
            Returns the scheduled steps.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy.HasReachedMaxSchedulingSteps">
            <summary>
            True if the scheduling strategy has reached the max
            scheduling steps for the given scheduling iteration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy.IsFair">
            <summary>
            Checks if this is a fair scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DelayBoundingStrategy">
            <summary>
            An abstract delay-bounding scheduling strategy.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DelayBoundingStrategy.RandomNumberGenerator">
            <summary>
            The random number generator used by the strategy.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DelayBoundingStrategy.MaxScheduledSteps">
            <summary>
            The maximum number of steps to schedule.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DelayBoundingStrategy.ScheduledSteps">
            <summary>
            The number of scheduled steps.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DelayBoundingStrategy.ScheduleLength">
            <summary>
            Length of the explored schedule across all iterations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DelayBoundingStrategy.MaxDelays">
            <summary>
            The maximum number of delays.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DelayBoundingStrategy.RemainingDelays">
            <summary>
            The remaining delays.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DelayBoundingStrategy.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DelayBoundingStrategy"/> class.
            It uses the default random number generator (seed is based on current time).
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DelayBoundingStrategy.#ctor(System.Int32,System.Int32,Microsoft.PSharp.TestingServices.Scheduling.IRandomNumberGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DelayBoundingStrategy"/> class.
            It uses the specified random number generator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DelayBoundingStrategy.GetNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation@,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Returns the next asynchronous operation to schedule.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DelayBoundingStrategy.GetNextBooleanChoice(System.Int32,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DelayBoundingStrategy.GetNextIntegerChoice(System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DelayBoundingStrategy.ForceNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Forces the next asynchronous operation to be scheduled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DelayBoundingStrategy.ForceNextBooleanChoice(System.Int32,System.Boolean)">
            <summary>
            Forces the next boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DelayBoundingStrategy.ForceNextIntegerChoice(System.Int32,System.Int32)">
            <summary>
            Forces the next integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DelayBoundingStrategy.PrepareForNextIteration">
            <summary>
            Prepares for the next scheduling iteration. This is invoked
            at the end of a scheduling iteration. It must return false
            if the scheduling strategy should stop exploring.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DelayBoundingStrategy.Reset">
            <summary>
            Resets the scheduling strategy. This is typically invoked by
            parent strategies to reset child strategies.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DelayBoundingStrategy.GetScheduledSteps">
            <summary>
            Returns the scheduled steps.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DelayBoundingStrategy.HasReachedMaxSchedulingSteps">
            <summary>
            True if the scheduling strategy has reached the max
            scheduling steps for the given scheduling iteration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DelayBoundingStrategy.IsFair">
            <summary>
            Checks if this is a fair scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DelayBoundingStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ExhaustiveDelayBoundingStrategy">
            <summary>
            An exhaustive delay-bounding scheduling strategy.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ExhaustiveDelayBoundingStrategy.DelaysCache">
            <summary>
            Cache of delays across iterations.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ExhaustiveDelayBoundingStrategy.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ExhaustiveDelayBoundingStrategy"/> class.
            It uses the default random number generator (seed is based on current time).
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ExhaustiveDelayBoundingStrategy.#ctor(System.Int32,System.Int32,Microsoft.PSharp.TestingServices.Scheduling.IRandomNumberGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ExhaustiveDelayBoundingStrategy"/> class.
            It uses the specified random number generator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ExhaustiveDelayBoundingStrategy.PrepareForNextIteration">
            <summary>
            Prepares for the next scheduling iteration. This is invoked
            at the end of a scheduling iteration. It must return false
            if the scheduling strategy should stop exploring.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ExhaustiveDelayBoundingStrategy.Reset">
            <summary>
            Resets the scheduling strategy. This is typically invoked by
            parent strategies to reset child strategies.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ExhaustiveDelayBoundingStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomDelayBoundingStrategy">
            <summary>
            A randomized delay-bounding scheduling strategy.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomDelayBoundingStrategy.CurrentIterationDelays">
            <summary>
            Delays during this iteration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomDelayBoundingStrategy.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomDelayBoundingStrategy"/> class.
            It uses the default random number generator (seed is based on current time).
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomDelayBoundingStrategy.#ctor(System.Int32,System.Int32,Microsoft.PSharp.TestingServices.Scheduling.IRandomNumberGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomDelayBoundingStrategy"/> class.
            It uses the specified random number generator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomDelayBoundingStrategy.PrepareForNextIteration">
            <summary>
            Prepares for the next scheduling iteration. This is invoked
            at the end of a scheduling iteration. It must return false
            if the scheduling strategy should stop exploring.
            </summary>
            <returns>True to start the next iteration.</returns>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomDelayBoundingStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy">
            <summary>
            A depth-first search scheduling strategy.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.MaxScheduledSteps">
            <summary>
            The maximum number of steps to schedule.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.ScheduledSteps">
            <summary>
            The number of scheduled steps.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.ScheduleStack">
            <summary>
            Stack of scheduling choices.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.BoolNondetStack">
            <summary>
            Stack of nondeterministic choices.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.IntNondetStack">
            <summary>
            Stack of nondeterministic choices.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.SchIndex">
            <summary>
            Current schedule index.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.NondetIndex">
            <summary>
            Current nondeterministic index.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.GetNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation@,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Returns the next asynchronous operation to schedule.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.GetNextBooleanChoice(System.Int32,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.GetNextIntegerChoice(System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.ForceNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Forces the next asynchronous operation to be scheduled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.ForceNextBooleanChoice(System.Int32,System.Boolean)">
            <summary>
            Forces the next boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.ForceNextIntegerChoice(System.Int32,System.Int32)">
            <summary>
            Forces the next integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.PrepareForNextIteration">
            <summary>
            Prepares for the next scheduling iteration. This is invoked
            at the end of a scheduling iteration. It must return false
            if the scheduling strategy should stop exploring.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.Reset">
            <summary>
            Resets the scheduling strategy. This is typically invoked by
            parent strategies to reset child strategies.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.GetScheduledSteps">
            <summary>
            Returns the scheduled steps.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.HasReachedMaxSchedulingSteps">
            <summary>
            True if the scheduling strategy has reached the max
            scheduling steps for the given scheduling iteration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.IsFair">
            <summary>
            Checks if this is a fair scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.PrintSchedule">
            <summary>
            Prints the schedule.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.SChoice">
            <summary>
            A scheduling choice. Contains an id and a boolean that is
            true if the choice has been previously explored.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.SChoice.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.SChoice"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.NondetBooleanChoice">
            <summary>
            A nondeterministic choice. Contains a boolean value that
            corresponds to the choice and a boolean that is true if
            the choice has been previously explored.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.NondetBooleanChoice.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.NondetBooleanChoice"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.NondetIntegerChoice">
            <summary>
            A nondeterministic choice. Contains an integer value that
            corresponds to the choice and a boolean that is true if
            the choice has been previously explored.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.NondetIntegerChoice.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DFSStrategy.NondetIntegerChoice"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.IterativeDeepeningDFSStrategy">
            <summary>
            A depth-first search scheduling strategy that uses iterative deepening.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.IterativeDeepeningDFSStrategy.MaxDepth">
            <summary>
            The max depth.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.IterativeDeepeningDFSStrategy.CurrentDepth">
            <summary>
            The current depth.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.IterativeDeepeningDFSStrategy.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.IterativeDeepeningDFSStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.IterativeDeepeningDFSStrategy.PrepareForNextIteration">
            <summary>
            Prepares for the next scheduling iteration. This is invoked
            at the end of a scheduling iteration. It must return false
            if the scheduling strategy should stop exploring.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.IterativeDeepeningDFSStrategy.HasReachedMaxSchedulingSteps">
            <summary>
            True if the scheduling strategy has reached the max
            scheduling steps for the given scheduling iteration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.IterativeDeepeningDFSStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.DPORAlgorithm">
             <summary>
             The actual DPOR algorithm used by <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy"/>.
            
             This is actually the "Source DPOR" algorithm.
            
             Implementation notes:
            
             Note that when we store indexes, they start at 1.
             This allows 0 to mean: null / not yet seen.
             Thus, when accessing e.g. Vcs, we must subtract 1.
             But most accesses should be done via a method to hide this.
            
             The happens-before relation (HBR) is assigned as follows:
             - create, start, stop with the same target id are totally-ordered
             - operations from the same task are totally ordered.
             - corresponding send-receive operation pairs are ordered.
             - sends to the same target id are totally-ordered.
            
             That last one is expected, but a bit annoying when doing random DPOR
             because it limits the races (see below) between send operations to the same target id.
            
             The HBR is tracked using vector clocks (VCs).
            
             A pair of operations A and B is a race iff:
             - A happens-before B
             - and A and B are from different tasks
             - and there does not exist an operation C such that A happens-before C happens-before B.
            
             In other words, A and B must be directly related in the HBR with no intervening operation
             connecting them. They do not need to be adjacent though
             (i.e. in a schedule, ACB, A and B might still be a race, unless A hb C hb B).
             We check this in the code by checking if A hb B *before* we update the
             VC of B to include the A-B edge; if A already happens-before B then this is not a race.
             </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.DPORAlgorithm.NumTasks">
            <summary>
            An upper bound of the number of tasks (schedulables).
            Will be increased as needed.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.DPORAlgorithm.NumSteps">
            <summary>
            The total number of steps (visible operations).
            Will be increased as needed.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.DPORAlgorithm.TaskIdToLastOpIndex">
            <summary>
            A map from task id to the index of the last op
            performed by the task.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.DPORAlgorithm.TargetIdToLastCreateStartEnd">
            <summary>
            A map from target id to the last create, start or stop operation.
            Used to update the HBR/VCs.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.DPORAlgorithm.TargetIdToLastSend">
            <summary>
            A map from target id to the last send (*to* this target).
            Used to update the HBR/VCs.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.DPORAlgorithm.TargetIdToFirstSend">
            <summary>
            A map from target id to the first send (*to* this target).
            TODO: Used in random DPOR to slightly limit the search
            of prior sends that could race with the current send.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.DPORAlgorithm.Vcs">
            <summary>
            The list of vector clocks (VCs).
            We store a VC for each visible operation.
            Thus, this is a map from a step index to the operation's VC.
            Given a step index i and task id c:
              Vcs[(i-1)*NumTasks + c] == the vector clock of task c.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.DPORAlgorithm.Races">
            <summary>
            A list of all races.
            Only used when performing random DPOR.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.DPORAlgorithm.MissingTaskIds">
            <summary>
            The missing task ids when replaying a reversed race.
            When performing random DPOR,
            we pick a race, reverse it, and "replay" it.
            In the replay, some tasks may not get created
            (because the replay is different)
            and we must be careful when writing the RaceReplaySuffix,
            subtracting 1 for every missing task that is less than
            the task id we want to record.
            This field tracks those tasks.
            It is a list of task ids (not a map).
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.DPORAlgorithm.RaceReplaySuffix">
            <summary>
            When performing random DPOR,
            this field gives the schedule (as a list of task ids)
            that should be followed in order to reverse a randomly chosen race.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.DPORAlgorithm.ReplayRaceIndex">
            <summary>
            An index for the <see cref="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.DPORAlgorithm.RaceReplaySuffix"/> (for convenience) to be used
            when replaying a reversed race.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.DPORAlgorithm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.DPORAlgorithm"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.DPORAlgorithm.Reversible(Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.Stack,System.Int32,System.Int32)">
            <summary>
            Checks if two operations are reversible. Assumes both operations passed in are dependent.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.DPORAlgorithm.DoDPOR(Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.Stack,Microsoft.PSharp.TestingServices.Scheduling.IRandomNumberGenerator)">
            <summary>
            The main entry point to the DPOR algorithm.
            </summary>
            <param name="stack">Should contain a terminal schedule.</param>
            <param name="rand">If non-null, then a randomized DPOR algorithm will be used.</param>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.NonDetChoice">
            <summary>
            Stores the outcome of a nondetereminstic (nondet) choice.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.NonDetChoice.IsBoolChoice">
            <summary>
            Is this nondet choice a boolean choice?
            If so, <see cref="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.NonDetChoice.Choice"/> is 0 or 1.
            Otherwise, it can be any int value.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.NonDetChoice.Choice">
            <summary>
            The nondet choice; 0 or 1 if this is a bool choice;
            otherwise, any int.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.Race">
            <summary>
            Represents a race (two visible operation that are concurrent but dependent)
            that can be reversed to reach a different terminal state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.Race.A">
            <summary>
            The index of the first racing visible operation.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.Race.B">
            <summary>
            The index of the second racing visible operation.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.Race.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.Race"/> class.
            </summary>
            <param name="a">The index of the first racing visible operation.</param>
            <param name="b">The index of the second racing visible operation.</param>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.SleepSets">
            <summary>
            Sleep sets is a reduction technique that can be in addition to DPOR or on its own.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.SleepSets.UpdateSleepSets(Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.Stack)">
            <summary>
            Update the sleep sets for the top operation on the stack.
            This will look at the second from top element in the stack
            and copy forward the sleep set, excluding tasks that are dependent
            with the executed operation.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.SleepSets.IsDependent(Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntry,Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntry)">
            <summary>
            Used to test if two operations are dependent.
            However, it is not perfect and it assumes we are only checking
            co-enabled operations from the same scheduling point.
            Thus, the following will always appear to be independent,
            even though this is not always the case:
            Create and Start, Send and Receive.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.Stack">
            <summary>
            The stack datastructure used by <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy"/> to perform the depth-first search.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.Stack.StackInternal">
            <summary>
            The actual stack.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.Stack.SleepSetBlocked">
            <summary>
            If no task id can be chosen, a negative task id is returned.
            This indicates that some threads were enabled, but they were
            all slept (due to <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.SleepSets"/>).
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.Stack.#ctor(Microsoft.PSharp.TestingServices.Scheduling.IRandomNumberGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.Stack"/> class.
            If the <paramref name="rand"/> is non-null, then randomized
            DPOR is assumed.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.Stack.Push(System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation})">
            <summary>
            Push a list of tid entries onto the stack. If we are replaying, this
            will verify that the list is what we expected.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.Stack.GetNumSteps">
            <summary>
            Get the number of entries on the stack (not including those that are yet to be replayed).
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.Stack.GetInternalSize">
            <summary>
            Get the real size of the stack (including entries that are yet to be replayed).
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.Stack.GetTop">
            <summary>
            Get the top entry of the stack.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.Stack.GetSecondFromTop">
            <summary>
            Get the second from top entry of the stack.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.Stack.GetTopAsRealTop">
            <summary>
            Gets the top of stack and also ensures that this is the real top of stack.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.Stack.GetSelectedOrFirstBacktrackNotSlept(System.Int32)">
            <summary>
            Get the next task to schedule: either the preselected task entry
            from the current schedule prefix that we are replaying or the first
            suitable task entry from the real top of the stack.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.Stack.PrepareForNextSchedule">
            <summary>
            Prepare for the next schedule by popping entries from the stack
            until we find some tid entries that are not slept.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.Stack.Clear">
            <summary>
            Clear the stack.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.Stack.ClearAboveTop">
            <summary>
            Clear all entries beyond the current top of stack.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntry">
            <summary>
            Task entry stored on the stack of a depth-first search to track which tasks existed
            and whether they have been executed already, etc.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntry.Id">
            <summary>
            The id/index of this task in the original task creation order list of tasks.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntry.Enabled">
            <summary>
            Is the task enabled?
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntry.Sleep">
            <summary>
            Skip exploring this task from here.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntry.Backtrack">
            <summary>
            Backtrack to this transition?
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntry.OpType">
            <summary>
            Operation type.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntry.OpTarget">
            <summary>
            Target type, e.g. task, queue, mutex, variable.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntry.TargetId">
            <summary>
            Target of the operation.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntry.SendStepIndex">
            <summary>
            For a receive operation: the step of the corresponding send.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntry.#ctor(System.Int32,System.Boolean,Microsoft.PSharp.TestingServices.Scheduling.AsyncOperationType,Microsoft.PSharp.TestingServices.Scheduling.AsyncOperationTarget,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntry"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList">
            <summary>
            The elements of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.Stack"/> used by <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy"/>. Stores
            a list of <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntry"/> (one for each <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation"/>).
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.List">
            <summary>
            The actual list.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.NondetChoices">
            <summary>
            A list of random choices made by the <see cref="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.SelectedEntry"/> task
            as part of its visible operation. Can be null.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.NextNondetChoiceIndex">
            <summary>
            When replaying/adding nondet choices, this is the index of the next nondet choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.#ctor(System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntry})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.MakeOrReplayNondetChoice(System.Boolean,Microsoft.PSharp.TestingServices.Scheduling.IRandomNumberGenerator)">
            <summary>
            Get a nondet choice. This may replay a nondet choice or make (and record) a new nondet choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.BacktrackNondetChoices">
            <summary>
            This method is used in a DFS exploration of nondet choice. It will pop off bool
            choices that are 1 until it reaches a 0 that will then be changed to a 1. The
            NextNondetChoiceIndex will be reset ready for replay.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.RewindNondetChoicesForReplay">
            <summary>
            Prepares the list of nondet choices for replay. This is used by random DPOR, which does not need to
            backtrack individual nondet choices, but may need to replay all of them.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.ClearNondetChoicesFromNext">
            <summary>
            Clears the list of nondet choices for replay from the next nondet choice onwards.
            That is, nondet choices that have already been replayed remain in the list.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.SetAllEnabledToBeBacktracked">
            <summary>
            Add all enabled tasks to the backtrack set.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.ShowEnabled">
            <summary>
            Utility method to show the enabled tasks.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.ShowSelected">
            <summary>
            Utility method to show the selected task.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.ShowBacktrack">
            <summary>
            Utility method to show the tasks in the backtrack set.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.GetFirstBacktrackNotSlept(System.Int32)">
            <summary>
            Gets the first task in backtrack that is not slept.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.GetAllBacktrackNotSleptNotSelected">
            <summary>
            Gets all tasks in backtrack that are not slept and not selected.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.HasBacktrackNotSleptNotSelected">
            <summary>
            Returns true if some tasks are in backtrack, and are not slept nor selected.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.SetSelectedToSleep">
            <summary>
            Sets the selected task to be slept.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.AllDoneOrSlept">
            <summary>
            Returns true if all tasks are done or slept.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.TryGetSelected">
            <summary>
            Tries to get the single selected task. Returns -1 if no task is selected.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.IsNoneSelected">
            <summary>
            Checks if no tasks are selected.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.GetSelected">
            <summary>
            Gets the selected task. Asserts that there is a selected task.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.ClearSelected">
            <summary>
            Deselect the selected task.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.AddFirstEnabledNotSleptToBacktrack(System.Int32)">
            <summary>
            Add the first enabled and not slept task to the backtrack set.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.AddToBacktrack(System.Int32)">
            <summary>
            Add a task to the backtrack set.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.AddRandomEnabledNotSleptToBacktrack(Microsoft.PSharp.TestingServices.Scheduling.IRandomNumberGenerator)">
            <summary>
            Add a random enabled and not slept task to the backtrack set.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TaskEntryList.SetSelected(System.Int32)">
            <summary>
            Sets the selected task id. There must not already be a selected task id.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TidForRaceReplay">
            <summary>
            Stores a thread id for replaying a race.
            Also stores the nondeterministic choices made by a thread.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TidForRaceReplay.Id">
            <summary>
            The thread id for replay.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TidForRaceReplay.NondetChoices">
            <summary>
            The list of nondet choices for replay.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TidForRaceReplay.#ctor(System.Int32,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.NonDetChoice})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.TidForRaceReplay"/> class.
            </summary>
            <param name="id">The thread id for replay.</param>
            <param name="nondetChoices">The list of nondet choices for replay.</param>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy">
            <summary>
            Dynamic partial-order reduction (DPOR) scheduling strategy.
            In fact, this uses the Source DPOR algorithm.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.Stack">
            <summary>
            The stack datastructure used to perform the
            depth-first search.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.Dpor">
            <summary>
            The actual DPOR algorithm implementation.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.UseSleepSets">
            <summary>
            Whether to use sleep sets.
            See <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPOR.SleepSets"/>.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.Rand">
            <summary>
            If non-null, we perform random DPOR
            using this RNG.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.StepLimit">
            <summary>
            The step limit.
            TODO: implement the step limit.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.RaceReversalIterationsLimit">
            <summary>
            When doing random DPOR, we do an initial execution
            and then try to reverse races.
            This int specifies how many iterations of race reversing to perform
            before performing a new initial iteration.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.NumRaceReversalIterationsCounter">
            <summary>
            Counter for <see cref="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.RaceReversalIterationsLimit"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.#ctor(Microsoft.PSharp.TestingServices.Scheduling.IRandomNumberGenerator,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.GetNextHelper(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation@,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Returns or forces the next choice to schedule.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.GetNextBooleanChoiceHelper(System.Nullable{System.Boolean}@)">
            <summary>
            Returns or forces the next boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.GetNextIntegerChoiceHelper(System.Nullable{System.Int32}@)">
            <summary>
            Returns or forces the next integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.AbdandonReplay(System.Boolean)">
            <summary>
            Abandon the replay of a schedule prefix and/or a race suffice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.GetNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation@,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Returns the next asynchronous operation to schedule.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.GetNextBooleanChoice(System.Int32,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.GetNextIntegerChoice(System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.ForceNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Forces the next asynchronous operation to be scheduled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.ForceNextBooleanChoice(System.Int32,System.Boolean)">
            <summary>
            Forces the next boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.ForceNextIntegerChoice(System.Int32,System.Int32)">
            <summary>
            Forces the next integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.GetScheduledSteps">
            <summary>
            Returns the explored steps.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.HasReachedMaxSchedulingSteps">
            <summary>
            True if the scheduling strategy has reached the max
            scheduling steps for the given scheduling iteration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.IsFair">
            <summary>
            Checks if this a fair scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.PrepareForNextIteration">
            <summary>
            Prepares the next scheduling iteration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.Reset">
            <summary>
            Resets the scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.DPORStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy">
            <summary>
            Strategy for detecting liveness property violations using partial state-caching
            and cycle-replaying. It contains a nested <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy"/> that
            is used for scheduling decisions. Note that liveness property violations are
            checked only if the nested strategy is fair.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.StateCache">
            <summary>
            The state cache of the program.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.ScheduleTrace">
            <summary>
            The schedule trace of the program.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.HotMonitors">
            <summary>
            Monitors that are stuck in the hot state
            for the duration of the latest found
            potential cycle.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.PotentialCycle">
            <summary>
            The latest found potential cycle.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.PotentialCycleFingerprints">
            <summary>
            Fingerprints captured in the latest potential cycle.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.IsReplayingCycle">
            <summary>
            Is strategy trying to replay a potential cycle.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.LivenessTemperature">
            <summary>
            A counter that increases in each step of the execution,
            as long as the P# program remains in the same cycle,
            with the liveness monitors at the hot state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.EndOfCycleIndex">
            <summary>
            The index of the last scheduling step in
            the currently detected cycle.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.CurrentCycleIndex">
            <summary>
            The current cycle index.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.Seed">
            <summary>
            Nondeterminitic seed.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.Random">
            <summary>
            Randomizer.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.FingerprintIndexMap">
            <summary>
            Map of fingerprints to schedule step indexes.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.#ctor(Microsoft.PSharp.Configuration,Microsoft.PSharp.TestingServices.StateCaching.StateCache,Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleTrace,System.Collections.Generic.List{Microsoft.PSharp.Monitor},Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.GetNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation@,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Returns the next asynchronous operation to schedule.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.GetNextBooleanChoice(System.Int32,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.GetNextIntegerChoice(System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.PrepareForNextIteration">
            <summary>
            Prepares for the next scheduling iteration. This is invoked
            at the end of a scheduling iteration. It must return false
            if the scheduling strategy should stop exploring.
            </summary>
            <returns>True to start the next iteration.</returns>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.Reset">
            <summary>
            Resets the scheduling strategy. This is typically invoked by
            parent strategies to reset child strategies.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.HasReachedMaxSchedulingSteps">
            <summary>
            True if the scheduling strategy has reached the max
            scheduling steps for the given scheduling iteration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.IsFair">
            <summary>
            Checks if this is a fair scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.CaptureAndCheckProgramState">
            <summary>
            Captures the program state and checks for liveness violations.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.CheckLivenessTemperature">
            <summary>
            Checks the liveness temperature of each monitor, and
            reports an error if one of the liveness monitors has
            passed the temperature threshold.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.CheckLivenessAtTraceCycle(System.Collections.Generic.List{System.Int32})">
            <summary>
            Checks liveness at a schedule trace cycle.
            </summary>
            <param name="indices">Indices corresponding to the fingerprint of root.</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.IsSchedulingFair(System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleStep})">
            <summary>
            Checks if the scheduling is fair in a schedule trace cycle.
            </summary>
            <param name="cycle">Cycle of states.</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.GetHotMonitors(System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleStep})">
            <summary>
            Gets all monitors that are in hot state, but not in cold
            state during the schedule trace cycle.
            </summary>
            <param name="cycle">Cycle of states.</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.EscapeUnfairCycle">
            <summary>
            Escapes the unfair cycle and continues to explore the
            schedule with the original scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.DebugPrintScheduleTrace">
            <summary>
            Prints the program schedule trace. Works only
            if debug mode is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.CycleDetectionStrategy.DebugPrintPotentialCycle">
            <summary>
            Prints the potential cycle. Works only if
            debug mode is enabled.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.LivenessCheckingStrategy">
            <summary>
            Abstract strategy for detecting liveness property violations. It
            contains a nested <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy"/> that is used
            for scheduling decisions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.LivenessCheckingStrategy.Configuration">
            <summary>
            The configuration.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.LivenessCheckingStrategy.Monitors">
            <summary>
            List of monitors in the program.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.LivenessCheckingStrategy.SchedulingStrategy">
            <summary>
            Strategy used for scheduling decisions.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.LivenessCheckingStrategy.#ctor(Microsoft.PSharp.Configuration,System.Collections.Generic.List{Microsoft.PSharp.Monitor},Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.LivenessCheckingStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.LivenessCheckingStrategy.GetNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation@,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Returns the next asynchronous operation to schedule.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.LivenessCheckingStrategy.GetNextBooleanChoice(System.Int32,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.LivenessCheckingStrategy.GetNextIntegerChoice(System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.LivenessCheckingStrategy.ForceNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Forces the next asynchronous operation to be scheduled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.LivenessCheckingStrategy.ForceNextBooleanChoice(System.Int32,System.Boolean)">
            <summary>
            Forces the next boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.LivenessCheckingStrategy.ForceNextIntegerChoice(System.Int32,System.Int32)">
            <summary>
            Forces the next integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.LivenessCheckingStrategy.PrepareForNextIteration">
            <summary>
            Prepares for the next scheduling iteration. This is invoked
            at the end of a scheduling iteration. It must return false
            if the scheduling strategy should stop exploring.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.LivenessCheckingStrategy.Reset">
            <summary>
            Resets the scheduling strategy. This is typically invoked by
            parent strategies to reset child strategies.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.LivenessCheckingStrategy.GetScheduledSteps">
            <summary>
            Returns the scheduled steps.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.LivenessCheckingStrategy.HasReachedMaxSchedulingSteps">
            <summary>
            True if the scheduling strategy has reached the max
            scheduling steps for the given scheduling iteration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.LivenessCheckingStrategy.IsFair">
            <summary>
            Checks if this is a fair scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.LivenessCheckingStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.TemperatureCheckingStrategy">
            <summary>
            Strategy for detecting liveness property violations using the "temperature"
            method. It contains a nested <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy"/> that is used
            for scheduling decisions. Note that liveness property violations are checked
            only if the nested strategy is fair.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.TemperatureCheckingStrategy.#ctor(Microsoft.PSharp.Configuration,System.Collections.Generic.List{Microsoft.PSharp.Monitor},Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.TemperatureCheckingStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.TemperatureCheckingStrategy.GetNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation@,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Returns the next asynchronous operation to schedule.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.TemperatureCheckingStrategy.GetNextBooleanChoice(System.Int32,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.TemperatureCheckingStrategy.GetNextIntegerChoice(System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.TemperatureCheckingStrategy.CheckLivenessTemperature">
            <summary>
            Checks the liveness temperature of each monitor, and
            reports an error if one of the liveness monitors has
            passed the temperature threshold.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy">
             <summary>
             A priority-based probabilistic scheduling strategy.
            
             This strategy is described in the following paper:
             https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/asplos277-pct.pdf
             </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.RandomNumberGenerator">
            <summary>
            Random number generator.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.MaxScheduledSteps">
            <summary>
            The maximum number of steps to schedule.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.ScheduledSteps">
            <summary>
            The number of scheduled steps.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.MaxPrioritySwitchPoints">
            <summary>
            Max number of priority switch points.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.ScheduleLength">
            <summary>
            Approximate length of the schedule across all iterations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.PrioritizedOperations">
            <summary>
            List of prioritized operations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.PriorityChangePoints">
            <summary>
            Set of priority change points.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy"/> class. It uses
            the default random number generator (seed is based on current time).
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.#ctor(System.Int32,System.Int32,Microsoft.PSharp.TestingServices.Scheduling.IRandomNumberGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy"/> class.
            It uses the specified random number generator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.GetNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation@,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Returns the next asynchronous operation to schedule.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.GetNextBooleanChoice(System.Int32,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.GetNextIntegerChoice(System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.ForceNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Forces the next asynchronous operation to be scheduled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.GetNextHelper(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation@,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Returns or forces the next asynchronous operation to schedule.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.ForceNextBooleanChoice(System.Int32,System.Boolean)">
            <summary>
            Forces the next boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.ForceNextIntegerChoice(System.Int32,System.Int32)">
            <summary>
            Forces the next integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.PrepareForNextIteration">
            <summary>
            Prepares for the next scheduling iteration. This is invoked
            at the end of a scheduling iteration. It must return false
            if the scheduling strategy should stop exploring.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.Reset">
            <summary>
            Resets the scheduling strategy. This is typically invoked by
            parent strategies to reset child strategies.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.GetScheduledSteps">
            <summary>
            Returns the scheduled steps.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.HasReachedMaxSchedulingSteps">
            <summary>
            True if the scheduling strategy has reached the max
            scheduling steps for the given scheduling iteration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.IsFair">
            <summary>
            Checks if this is a fair scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.GetPrioritizedOperation(System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Returns the prioritized operation.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.GetHighestPriorityEnabledOperation(System.Collections.Generic.IEnumerable{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation})">
            <summary>
            Returns the highest-priority enabled operation.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.Shuffle(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Shuffles the specified list using the Fisher-Yates algorithm.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.PCTStrategy.MovePriorityChangePointForward">
            <summary>
            Moves the current priority change point forward. This is a useful
            optimization when a priority change point is assigned in either a
            sequential execution or a nondeterministic choice.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ProbabilisticRandomStrategy">
            <summary>
            A randomized scheduling strategy with increased probability
            to remain in the same scheduling choice.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ProbabilisticRandomStrategy.NumberOfCoinFlips">
            <summary>
            Number of coin flips.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ProbabilisticRandomStrategy.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ProbabilisticRandomStrategy"/> class.
            It uses the default random number generator (seed is based on current time).
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ProbabilisticRandomStrategy.#ctor(System.Int32,System.Int32,Microsoft.PSharp.TestingServices.Scheduling.IRandomNumberGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ProbabilisticRandomStrategy"/> class.
            It uses the specified random number generator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ProbabilisticRandomStrategy.GetNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation@,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Returns the next asynchronous operation to schedule.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ProbabilisticRandomStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ProbabilisticRandomStrategy.ShouldCurrentMachineChange">
            <summary>
            Flip the coin a specified number of times.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomStrategy">
            <summary>
            A simple (but effective) randomized scheduling strategy.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomStrategy.RandomNumberGenerator">
            <summary>
            Random number generator.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomStrategy.MaxScheduledSteps">
            <summary>
            The maximum number of steps to schedule.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomStrategy.ScheduledSteps">
            <summary>
            The number of scheduled steps.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomStrategy.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomStrategy"/> class.
            It uses the default random number generator (seed is based on current time).
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomStrategy.#ctor(System.Int32,Microsoft.PSharp.TestingServices.Scheduling.IRandomNumberGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomStrategy"/> class.
            It uses the specified random number generator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomStrategy.GetNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation@,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Returns the next asynchronous operation to schedule.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomStrategy.GetNextBooleanChoice(System.Int32,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomStrategy.GetNextIntegerChoice(System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomStrategy.ForceNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Forces the next asynchronous operation to be scheduled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomStrategy.ForceNextBooleanChoice(System.Int32,System.Boolean)">
            <summary>
            Forces the next boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomStrategy.ForceNextIntegerChoice(System.Int32,System.Int32)">
            <summary>
            Forces the next integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomStrategy.PrepareForNextIteration">
            <summary>
            Prepares for the next scheduling iteration. This is invoked
            at the end of a scheduling iteration. It must return false
            if the scheduling strategy should stop exploring.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomStrategy.Reset">
            <summary>
            Resets the scheduling strategy. This is typically invoked by
            parent strategies to reset child strategies.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomStrategy.GetScheduledSteps">
            <summary>
            Returns the scheduled steps.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomStrategy.HasReachedMaxSchedulingSteps">
            <summary>
            True if the scheduling strategy has reached the depth
            bound for the given scheduling iteration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomStrategy.IsFair">
            <summary>
            Checks if this is a fair scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.RandomStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.BasicReductionStrategy">
            <summary>
            This strategy uses basic partial-order reduction to reduce
            the choice-space for a provided child strategy.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.BasicReductionStrategy.ReductionStrategy">
            <summary>
            Type of reduction strategy.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.BasicReductionStrategy.ReductionStrategy.None">
            <summary>
            No reduction.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.BasicReductionStrategy.ReductionStrategy.OmitSchedulingPoints">
            <summary>
            Reduction strategy that omits scheduling points.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.BasicReductionStrategy.ReductionStrategy.ForceSchedule">
            <summary>
            Reduction strategy that forces scheduling points.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.BasicReductionStrategy.ChildStrategy">
            <summary>
            The child strategy.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.BasicReductionStrategy.Reduction">
            <summary>
            The reduction strategy.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.BasicReductionStrategy.#ctor(Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy,Microsoft.PSharp.TestingServices.Scheduling.Strategies.BasicReductionStrategy.ReductionStrategy,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.BasicReductionStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.BasicReductionStrategy.GetNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation@,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Returns the next asynchronous operation to schedule.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.BasicReductionStrategy.GetNextBooleanChoice(System.Int32,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.BasicReductionStrategy.GetNextIntegerChoice(System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.BasicReductionStrategy.ForceNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Forces the next asynchronous operation to be scheduled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.BasicReductionStrategy.ForceNextBooleanChoice(System.Int32,System.Boolean)">
            <summary>
            Forces the next boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.BasicReductionStrategy.ForceNextIntegerChoice(System.Int32,System.Int32)">
            <summary>
            Forces the next integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.BasicReductionStrategy.PrepareForNextIteration">
            <summary>
            Prepares for the next scheduling iteration. This is invoked
            at the end of a scheduling iteration. It must return false
            if the scheduling strategy should stop exploring.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.BasicReductionStrategy.Reset">
            <summary>
            Resets the scheduling strategy. This is typically invoked by
            parent strategies to reset child strategies.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.BasicReductionStrategy.GetScheduledSteps">
            <summary>
            Returns the scheduled steps.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.BasicReductionStrategy.HasReachedMaxSchedulingSteps">
            <summary>
            True if the scheduling strategy has reached the max
            scheduling steps for the given scheduling iteration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.BasicReductionStrategy.IsFair">
            <summary>
            Checks if this is a fair scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.BasicReductionStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.BasicReductionStrategy.GetNextHelper(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation@,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Returns or forces the next asynchronous operation to schedule.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ComboStrategy">
            <summary>
            This strategy combines two given strategies, using them to schedule
            the prefix and suffix of an execution.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ComboStrategy.PrefixStrategy">
            <summary>
            The prefix strategy.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ComboStrategy.SuffixStrategy">
            <summary>
            The suffix strategy.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ComboStrategy.#ctor(Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy,Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ComboStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ComboStrategy.GetNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation@,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Returns the next asynchronous operation to schedule.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ComboStrategy.GetNextBooleanChoice(System.Int32,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ComboStrategy.GetNextIntegerChoice(System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ComboStrategy.ForceNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Forces the next asynchronous operation to be scheduled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ComboStrategy.ForceNextBooleanChoice(System.Int32,System.Boolean)">
            <summary>
            Forces the next boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ComboStrategy.ForceNextIntegerChoice(System.Int32,System.Int32)">
            <summary>
            Forces the next integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ComboStrategy.PrepareForNextIteration">
            <summary>
            Prepares for the next scheduling iteration. This is invoked
            at the end of a scheduling iteration. It must return false
            if the scheduling strategy should stop exploring.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ComboStrategy.Reset">
            <summary>
            Resets the scheduling strategy. This is typically invoked by
            parent strategies to reset child strategies.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ComboStrategy.GetScheduledSteps">
            <summary>
            Returns the scheduled steps.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ComboStrategy.HasReachedMaxSchedulingSteps">
            <summary>
            True if the scheduling strategy has reached the max
            scheduling steps for the given scheduling iteration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ComboStrategy.IsFair">
            <summary>
            Checks if this is a fair scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ComboStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.InteractiveStrategy">
            <summary>
            Class representing an interactive scheduling strategy.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.InteractiveStrategy.Configuration">
            <summary>
            The configuration.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.InteractiveStrategy.Logger">
            <summary>
            The installed logger.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.InteractiveStrategy.InputCache">
            <summary>
            The input cache.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.InteractiveStrategy.ExploredSteps">
            <summary>
            The number of explored steps.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.InteractiveStrategy.#ctor(Microsoft.PSharp.Configuration,Microsoft.PSharp.IO.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.InteractiveStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.InteractiveStrategy.GetNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation@,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Returns the next asynchronous operation to schedule.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.InteractiveStrategy.GetNextBooleanChoice(System.Int32,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.InteractiveStrategy.GetNextIntegerChoice(System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.InteractiveStrategy.ForceNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Forces the next asynchronous operation to be scheduled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.InteractiveStrategy.ForceNextBooleanChoice(System.Int32,System.Boolean)">
            <summary>
            Forces the next boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.InteractiveStrategy.ForceNextIntegerChoice(System.Int32,System.Int32)">
            <summary>
            Forces the next integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.InteractiveStrategy.PrepareForNextIteration">
            <summary>
            Prepares for the next scheduling iteration. This is invoked
            at the end of a scheduling iteration. It must return false
            if the scheduling strategy should stop exploring.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.InteractiveStrategy.Reset">
            <summary>
            Resets the scheduling strategy. This is typically invoked by
            parent strategies to reset child strategies.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.InteractiveStrategy.GetScheduledSteps">
            <summary>
            Returns the scheduled steps.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.InteractiveStrategy.HasReachedMaxSchedulingSteps">
            <summary>
            True if the scheduling strategy has reached the max
            scheduling steps for the given scheduling iteration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.InteractiveStrategy.IsFair">
            <summary>
            Checks if this is a fair scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.InteractiveStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.InteractiveStrategy.Replay">
            <summary>
            Replays an earlier point of the execution.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.InteractiveStrategy.Jump">
            <summary>
            Jumps to a later point in the execution.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.InteractiveStrategy.AddInInputCache(System.Int32)">
            <summary>
            Adds in the input cache.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.InteractiveStrategy.RemoveFromInputCache(System.Int32)">
            <summary>
            Removes from the input cache.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ReplayStrategy">
            <summary>
            Class representing a replaying scheduling strategy.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ReplayStrategy.Configuration">
            <summary>
            The configuration.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ReplayStrategy.ScheduleTrace">
            <summary>
            The P# program schedule trace.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ReplayStrategy.SuffixStrategy">
            <summary>
            The suffix strategy.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ReplayStrategy.IsSchedulerFair">
            <summary>
            Is the scheduler that produced the
            schedule trace fair?
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ReplayStrategy.IsReplaying">
            <summary>
            Is the scheduler replaying the trace?
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ReplayStrategy.ScheduledSteps">
            <summary>
            The number of scheduled steps.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ReplayStrategy.ErrorText">
            <summary>
            Text describing a replay error.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ReplayStrategy.#ctor(Microsoft.PSharp.Configuration,Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleTrace,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ReplayStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ReplayStrategy.#ctor(Microsoft.PSharp.Configuration,Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleTrace,System.Boolean,Microsoft.PSharp.TestingServices.Scheduling.Strategies.ISchedulingStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ReplayStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ReplayStrategy.GetNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation@,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Returns the next asynchronous operation to schedule.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ReplayStrategy.GetNextBooleanChoice(System.Int32,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ReplayStrategy.GetNextIntegerChoice(System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ReplayStrategy.ForceNext(Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation,System.Collections.Generic.List{Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation},Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation)">
            <summary>
            Forces the next asynchronous operation to be scheduled.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ReplayStrategy.ForceNextBooleanChoice(System.Int32,System.Boolean)">
            <summary>
            Forces the next boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ReplayStrategy.ForceNextIntegerChoice(System.Int32,System.Int32)">
            <summary>
            Forces the next integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ReplayStrategy.PrepareForNextIteration">
            <summary>
            Prepares for the next scheduling iteration. This is invoked
            at the end of a scheduling iteration. It must return false
            if the scheduling strategy should stop exploring.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ReplayStrategy.Reset">
            <summary>
            Resets the scheduling strategy. This is typically invoked by
            parent strategies to reset child strategies.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ReplayStrategy.GetScheduledSteps">
            <summary>
            Returns the scheduled steps.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ReplayStrategy.HasReachedMaxSchedulingSteps">
            <summary>
            True if the scheduling strategy has reached the depth
            bound for the given scheduling iteration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ReplayStrategy.IsFair">
            <summary>
            Checks if this is a fair scheduling strategy.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.Strategies.ReplayStrategy.GetDescription">
            <summary>
            Returns a textual description of the scheduling strategy.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperation">
            <summary>
            Contains information about an asynchronous operation that can be scheduled.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperation.SourceId">
            <summary>
            Unique id of the source of this operation.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperation.SourceName">
            <summary>
            Unique name of the source of this operation.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperation.Task">
            <summary>
            The task that performs this operation.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperation.Type">
            <summary>
            The type of the operation.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperation.Target">
            <summary>
            The target of the operation.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperation.TargetId">
            <summary>
            Unique id of the target of the operation.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperation.Dependencies">
            <summary>
            Set of operations that must complete before this operation can resume.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperation.IsEnabled">
            <summary>
            True if the task that performs this operation is enabled, else false.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperation.IsActive">
            <summary>
            Is the source of the operation active.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperation.IsWaitingToReceive">
            <summary>
            Is the source of the operation waiting to receive an event.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperation.IsInboxHandlerRunning">
            <summary>
            Is the inbox handler of the source of the operation running.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperation.SkipNextReceiveSchedulingPoint">
            <summary>
            True if it should skip the next receive scheduling point,
            because it was already called in the end of the previous
            event handler.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperation.MatchingSendIndex">
            <summary>
            If the next operation is <see cref="F:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperationType.Receive"/>, then this value
            gives the step index of the corresponding <see cref="F:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperationType.Send"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperation.#ctor(Microsoft.PSharp.MachineId)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperation"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperation.SetNextOperation(Microsoft.PSharp.TestingServices.Scheduling.AsyncOperationType,Microsoft.PSharp.TestingServices.Scheduling.AsyncOperationTarget,System.UInt64)">
            <summary>
            Sets the next operation to schedule.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperation.NotifyCreated(System.Threading.Tasks.Task,System.Int32)">
            <summary>
            Notify that the operation has been created and will run on the specified task.
            </summary>
            <param name="task">The task that performs this operation.</param>
            <param name="sendIndex">The index of the send that caused the event handler to be restarted, or 0 if this does not apply.</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperation.NotifyCompleted">
            <summary>
            Notify that the operation has completed.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperationTarget">
            <summary>
            The target of an operation performed by an asynchronous task.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperationTarget.Task">
            <summary>
            The target of the operation is a task. For example, 'Create', 'Start'
            and 'Stop' are operations that act upon a task.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperationTarget.Inbox">
            <summary>
            The target of the operation is an inbox. For example, 'Send'
            and 'Receive' are operations that act upon an inbox.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperationType">
            <summary>
            The type of an operation performed by an asynchronous task.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperationType.Start">
            <summary>
            An asynchronous task starts executing.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperationType.Create">
            <summary>
            An asynchronous task creates another asynchronous task.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperationType.Send">
            <summary>
            An asynchronous task sends an event.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperationType.Receive">
            <summary>
            An asynchronous task receives an event.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperationType.Stop">
            <summary>
            An asynchronous task stops executing.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperationType.Yield">
            <summary>
            An asynchronous task yields.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperationType.WaitForQuiescence">
            <summary>
            An asynchronous task waits to reach quiescence.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperationType.Join">
            <summary>
            An asynchronous task waits for another asynchronous task to stop.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation">
            <summary>
            Interface of an asynchronous operation that can be scheduled during testing.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation.Type">
            <summary>
            The type of the operation.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation.SourceId">
            <summary>
            Unique id of the source of this operation.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation.SourceName">
            <summary>
            Unique name of the source of this operation.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation.IsEnabled">
            <summary>
            True if this operation is enabled, else false.
            Only enabled operations can be scheduled.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation.Target">
            <summary>
            The target of the operation (which can be the source).
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation.TargetId">
            <summary>
            Unique id of the target of the operation.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Scheduling.IAsyncOperation.MatchingSendIndex">
            <summary>
            If the operation is of type <see cref="F:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperationType.Receive"/>, then this value
            gives the step index of the corresponding <see cref="F:Microsoft.PSharp.TestingServices.Scheduling.AsyncOperationType.Send"/>.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.DefaultRandomNumberGenerator">
            <summary>
            Default random number generator that uses the <see cref="T:System.Random"/> generator.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.DefaultRandomNumberGenerator.Random">
            <summary>
            Device for generating random numbers.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Scheduling.DefaultRandomNumberGenerator.RandomSeed">
            <summary>
            The seed currently used by the generator.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Scheduling.DefaultRandomNumberGenerator.Seed">
            <summary>
            The seed currently used by the generator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.DefaultRandomNumberGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.DefaultRandomNumberGenerator"/> class.
            It uses a time-dependent seed.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.DefaultRandomNumberGenerator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Scheduling.DefaultRandomNumberGenerator"/> class.
            It uses the specified seed.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.DefaultRandomNumberGenerator.Next">
            <summary>
            Returns a non-negative random number.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.DefaultRandomNumberGenerator.Next(System.Int32)">
            <summary>
            Returns a non-negative random number less than the specified max value.
            </summary>
            <param name="maxValue">Exclusive upper bound.</param>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Scheduling.IRandomNumberGenerator">
            <summary>
            Interface for random number generators.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Scheduling.IRandomNumberGenerator.Seed">
            <summary>
            The seed currently used by the generator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.IRandomNumberGenerator.Next">
            <summary>
            Returns a non-negative random number.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Scheduling.IRandomNumberGenerator.Next(System.Int32)">
            <summary>
            Returns a non-negative random number less than maxValue.
            </summary>
            <param name="maxValue">Exclusive upper bound</param>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Timers.MockMachineTimer">
            <summary>
            A mock timer that replaces <see cref="T:Microsoft.PSharp.Timers.MachineTimer"/> during testing.
            It is implemented as a machine.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Timers.MockMachineTimer.TimerInfo">
            <summary>
            Stores information about this timer.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Timers.MockMachineTimer.Microsoft#PSharp#Timers#IMachineTimer#Info">
            <summary>
            Stores information about this timer.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Timers.MockMachineTimer.Owner">
            <summary>
            The machine that owns this timer.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Timers.MockMachineTimer.TimeoutEvent">
            <summary>
            The timeout event.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Timers.MockMachineTimer.Delay">
            <summary>
            Adjusts the probability of firing a timeout event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Timers.MockMachineTimer.Setup">
            <summary>
            Initializes the timer with the specified configuration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Timers.MockMachineTimer.HandleTimeout">
            <summary>
            Handles the timeout.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Timers.MockMachineTimer.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal
            to the current System.Object.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Timers.MockMachineTimer.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Timers.MockMachineTimer.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Timers.MockMachineTimer.Equals(Microsoft.PSharp.Timers.MachineTimer)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.PSharp.MachineId"/> is equal
            to the current <see cref="T:Microsoft.PSharp.MachineId"/>.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Timers.MockMachineTimer.Dispose">
            <summary>
            Disposes the resources held by this timer.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Timers.TimerSetupEvent">
            <summary>
            Defines a timer elapsed event that is sent from a timer to the machine that owns the timer.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Timers.TimerSetupEvent.Info">
            <summary>
            Stores information about the timer.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Timers.TimerSetupEvent.Owner">
            <summary>
            The machine that owns the timer.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Timers.TimerSetupEvent.Delay">
            <summary>
            Adjusts the probability of firing a timeout event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Timers.TimerSetupEvent.#ctor(Microsoft.PSharp.Timers.TimerInfo,Microsoft.PSharp.Machine,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Timers.TimerSetupEvent"/> class.
            </summary>
            <param name="info">Stores information about the timer.</param>
            <param name="owner">The machine that owns the timer.</param>
            <param name="delay">Adjusts the probability of firing a timeout event.</param>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.StateCaching.Fingerprint">
            <summary>
            Class implementing a program state fingerprint.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.StateCaching.Fingerprint.HashValue">
            <summary>
            The hash value of the fingerprint.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.StateCaching.Fingerprint.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.StateCaching.Fingerprint"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.StateCaching.Fingerprint.Equals(System.Object)">
            <summary>
            Returns true if the fingerprint is equal to
            the given object.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.StateCaching.Fingerprint.GetHashCode">
            <summary>
            Returns the hashcode of the fingerprint.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.StateCaching.Fingerprint.ToString">
            <summary>
            Returns a string representation of the fingerprint.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.StateCaching.MonitorStatus">
            <summary>
            Monitor status.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.StateCaching.State">
            <summary>
            Represents a snapshot of the program state.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.StateCaching.State.Fingerprint">
            <summary>
            The fingerprint of the trace step.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.StateCaching.State.MonitorStatus">
            <summary>
            Map from monitors to their liveness status.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.StateCaching.State.EnabledMachineIds">
            <summary>
            Ids of the enabled machines. Only relevant
            if this is a scheduling trace step.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.StateCaching.State.#ctor(Microsoft.PSharp.TestingServices.StateCaching.Fingerprint,System.Collections.Generic.HashSet{System.UInt64},System.Collections.Generic.Dictionary{Microsoft.PSharp.Monitor,Microsoft.PSharp.TestingServices.StateCaching.MonitorStatus})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.StateCaching.State"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.StateCaching.State.PrettyPrint">
            <summary>
            Pretty prints the state.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.StateCaching.StateCache">
            <summary>
            Class implementing a state cache.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.StateCaching.StateCache.Runtime">
            <summary>
            The testing runtime.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.StateCaching.StateCache.Fingerprints">
            <summary>
            Set of fingerprints.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.StateCaching.StateCache.#ctor(Microsoft.PSharp.TestingServices.Runtime.SystematicTestingRuntime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.StateCaching.StateCache"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.StateCaching.StateCache.CaptureState(Microsoft.PSharp.TestingServices.StateCaching.State@,Microsoft.PSharp.TestingServices.StateCaching.Fingerprint@,System.Collections.Generic.Dictionary{Microsoft.PSharp.TestingServices.StateCaching.Fingerprint,System.Collections.Generic.List{System.Int32}},Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleStep,System.Collections.Generic.List{Microsoft.PSharp.Monitor})">
            <summary>
            Captures a snapshot of the program state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.StateCaching.StateCache.GetMonitorStatus(System.Collections.Generic.List{Microsoft.PSharp.Monitor})">
            <summary>
            Returns the monitor status.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Coverage.ActivityCoverageReporter">
            <summary>
            The P# code coverage reporter.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Coverage.ActivityCoverageReporter.CoverageInfo">
            <summary>
            Data structure containing information
            regarding testing coverage.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Coverage.ActivityCoverageReporter.#ctor(Microsoft.PSharp.TestingServices.Coverage.CoverageInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Coverage.ActivityCoverageReporter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Coverage.ActivityCoverageReporter.EmitVisualizationGraph(System.String)">
            <summary>
            Emits the visualization graph.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Coverage.ActivityCoverageReporter.EmitCoverageReport(System.String)">
            <summary>
            Emits the code coverage report.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Coverage.ActivityCoverageReporter.WriteVisualizationGraph(System.Xml.XmlTextWriter)">
            <summary>
            Writes the visualization graph.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Coverage.ActivityCoverageReporter.WriteCoverageText(System.IO.TextWriter)">
            <summary>
            Writes the visualization text.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Coverage.CoverageInfo">
            <summary>
            Class for storing coverage-specific data
            across multiple testing iterations.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Coverage.CoverageInfo.MachinesToStates">
            <summary>
            Map from machines to states.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Coverage.CoverageInfo.RegisteredEvents">
            <summary>
            Set of (machines, states, registered events).
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Coverage.CoverageInfo.Transitions">
            <summary>
            Set of machine transitions.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Coverage.CoverageInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Coverage.CoverageInfo"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Coverage.CoverageInfo.AddTransition(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a new transition.
            </summary>
            <param name="machineOrigin">Origin machine</param>
            <param name="stateOrigin">Origin state</param>
            <param name="edgeLabel">Edge label</param>
            <param name="machineTarget">Target machine</param>
            <param name="stateTarget">Target state</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Coverage.CoverageInfo.DeclareMachineState(System.String,System.String)">
            <summary>
            Declares a state.
            </summary>
            <param name="machine">Machine name</param>
            <param name="state">state name</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Coverage.CoverageInfo.DeclareStateEvent(System.String,System.String,System.String)">
            <summary>
            Declares a registered state, event pair.
            </summary>
            <param name="machine">Machine name</param>
            <param name="state">state name</param>
            <param name="eventName">Event name that the state is prepared to handle</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Coverage.CoverageInfo.Merge(Microsoft.PSharp.TestingServices.Coverage.CoverageInfo)">
            <summary>
            Merges the information from the specified
            coverage info. This is not thread-safe.
            </summary>
            <param name="coverageInfo">CoverageInfo</param>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Coverage.CoverageInfo.AddState(System.String,System.String)">
            <summary>
            Adds a new state.
            </summary>
            <param name="machineName">Machine name</param>
            <param name="stateName">State name</param>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Coverage.Transition">
            <summary>
            Specifies a program transition.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Coverage.Transition.MachineOrigin">
            <summary>
            The origin machine.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Coverage.Transition.StateOrigin">
            <summary>
            The origin state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Coverage.Transition.EdgeLabel">
            <summary>
            The edge label.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Coverage.Transition.MachineTarget">
            <summary>
            The target machine.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Coverage.Transition.StateTarget">
            <summary>
            The target state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Coverage.Transition.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Coverage.Transition"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Coverage.Transition.ToString">
            <summary>
            Pretty print.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.TestReport">
            <summary>
            Class implementing the P# test report.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.TestReport.Configuration">
            <summary>
            Configuration of the program-under-test.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.TestReport.CoverageInfo">
            <summary>
            Information regarding code coverage.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.TestReport.NumOfExploredFairSchedules">
            <summary>
            Number of explored fair schedules.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.TestReport.NumOfExploredUnfairSchedules">
            <summary>
            Number of explored unfair schedules.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.TestReport.NumOfFoundBugs">
            <summary>
            Number of found bugs.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.TestReport.BugReports">
            <summary>
            Set of unique bug reports.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.TestReport.MinExploredFairSteps">
            <summary>
            The min explored scheduling steps in average,
            in fair tests.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.TestReport.MaxExploredFairSteps">
            <summary>
            The max explored scheduling steps in average,
            in fair tests.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.TestReport.TotalExploredFairSteps">
            <summary>
            The total explored scheduling steps (across
            all testing iterations), in fair tests.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.TestReport.MaxFairStepsHitInFairTests">
            <summary>
            Number of times the fair max steps bound was hit,
            in fair tests.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.TestReport.MaxUnfairStepsHitInFairTests">
            <summary>
            Number of times the unfair max steps bound was hit,
            in fair tests.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.TestReport.MaxUnfairStepsHitInUnfairTests">
            <summary>
            Number of times the unfair max steps bound was hit,
            in unfair tests.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.TestReport.InternalErrors">
            <summary>
            Set of internal errors. If no internal errors
            occurred, then this set is empty.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.TestReport.Lock">
            <summary>
            Lock for the test report.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.TestReport.#ctor(Microsoft.PSharp.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.TestReport"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.TestReport.Merge(Microsoft.PSharp.TestingServices.TestReport)">
            <summary>
            Merges the information from the specified test report.
            </summary>
            <returns>True if merged successfully.</returns>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.TestReport.GetText(Microsoft.PSharp.Configuration,System.String)">
            <summary>
            Returns the testing report as a string, given a configuration and an optional prefix.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.TestReport.Clone">
            <summary>
            Clones the test report.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Tracing.Error.BugTrace">
            <summary>
            Class implementing a P# bug trace. A trace is a
            series of transitions from some initial state to
            some end state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Tracing.Error.BugTrace.Steps">
            <summary>
            The steps of the bug trace.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Tracing.Error.BugTrace.Count">
            <summary>
            The number of steps in the bug trace.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Tracing.Error.BugTrace.Item(System.Int32)">
            <summary>
            Index for the bug trace.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Error.BugTrace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Tracing.Error.BugTrace"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Error.BugTrace.AddCreateMachineStep(Microsoft.PSharp.Machine,Microsoft.PSharp.MachineId,Microsoft.PSharp.EventInfo)">
            <summary>
            Adds a bug trace step.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Error.BugTrace.AddCreateMonitorStep(Microsoft.PSharp.MachineId)">
            <summary>
            Adds a bug trace step.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Error.BugTrace.AddSendEventStep(Microsoft.PSharp.MachineId,System.String,Microsoft.PSharp.EventInfo,Microsoft.PSharp.MachineId)">
            <summary>
            Adds a bug trace step.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Error.BugTrace.AddDequeueEventStep(Microsoft.PSharp.MachineId,System.String,Microsoft.PSharp.EventInfo)">
            <summary>
            Adds a bug trace step.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Error.BugTrace.AddRaiseEventStep(Microsoft.PSharp.MachineId,System.String,Microsoft.PSharp.EventInfo)">
            <summary>
            Adds a bug trace step.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Error.BugTrace.AddGotoStateStep(Microsoft.PSharp.MachineId,System.String)">
            <summary>
            Adds a bug trace step.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Error.BugTrace.AddInvokeActionStep(Microsoft.PSharp.MachineId,System.String,System.Reflection.MethodInfo)">
            <summary>
            Adds a bug trace step.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Error.BugTrace.AddWaitToReceiveStep(Microsoft.PSharp.MachineId,System.String,System.String)">
            <summary>
            Adds a bug trace step.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Error.BugTrace.AddReceivedEventStep(Microsoft.PSharp.MachineId,System.String,Microsoft.PSharp.EventInfo)">
            <summary>
            Adds a bug trace step.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Error.BugTrace.AddRandomChoiceStep(Microsoft.PSharp.MachineId,System.String,System.Boolean)">
            <summary>
            Adds a bug trace step.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Error.BugTrace.AddRandomChoiceStep(Microsoft.PSharp.MachineId,System.String,System.Int32)">
            <summary>
            Adds a bug trace step.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Error.BugTrace.AddHaltStep(Microsoft.PSharp.MachineId,System.String)">
            <summary>
            Adds a bug trace step.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Error.BugTrace.Pop">
            <summary>
            Returns the latest bug trace step and removes it from the trace.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Error.BugTrace.Peek">
            <summary>
            Returns the latest bug trace step without removing it.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Error.BugTrace.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Error.BugTrace.System#Collections#Generic#IEnumerable{Microsoft#PSharp#TestingServices#Tracing#Error#BugTraceStep}#GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Error.BugTrace.Push(Microsoft.PSharp.TestingServices.Tracing.Error.BugTraceStep)">
            <summary>
            Pushes a new step to the trace.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Tracing.Error.BugTraceStep">
            <summary>
            Class implementing a P# bug trace step.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Tracing.Error.BugTraceStep.Index">
            <summary>
            The unique index of this bug trace step.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Tracing.Error.BugTraceStep.Type">
            <summary>
            The type of this bug trace step.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Tracing.Error.BugTraceStep.Machine">
            <summary>
            The machine initiating the action.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Tracing.Error.BugTraceStep.MachineState">
            <summary>
            The machine state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Tracing.Error.BugTraceStep.EventInfo">
            <summary>
            Information about the event being sent.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Tracing.Error.BugTraceStep.InvokedAction">
            <summary>
            The invoked action.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Tracing.Error.BugTraceStep.TargetMachine">
            <summary>
            The target machine.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Tracing.Error.BugTraceStep.RandomBooleanChoice">
            <summary>
            The taken nondeterministic boolean choice.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Tracing.Error.BugTraceStep.RandomIntegerChoice">
            <summary>
            The taken nondeterministic integer choice.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Tracing.Error.BugTraceStep.ExtraInfo">
            <summary>
            Extra information that can be used to
            enhance the trace reported to the user.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Tracing.Error.BugTraceStep.Previous">
            <summary>
            Previous bug trace step.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Tracing.Error.BugTraceStep.Next">
            <summary>
            Next bug trace step.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Error.BugTraceStep.Create(System.Int32,Microsoft.PSharp.TestingServices.Tracing.Error.BugTraceStepType,Microsoft.PSharp.MachineId,System.String,Microsoft.PSharp.EventInfo,System.Reflection.MethodInfo,Microsoft.PSharp.MachineId,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
            <summary>
            Creates a bug trace step.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Error.BugTraceStep.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Error.BugTraceStep.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Tracing.Error.BugTraceStepType">
            <summary>
            The bug trace step type.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleStep">
            <summary>
            Class implementing a P# program schedule step.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleStep.Index">
            <summary>
            The unique index of this schedule step.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleStep.Type">
            <summary>
            The type of this schedule step.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleStep.ScheduledOperationId">
            <summary>
            The id of the scheduled operation. Only relevant if this is
            a regular schedule step.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleStep.NondetId">
            <summary>
            The non-deterministic choice id. Only relevant if
            this is a choice schedule step.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleStep.BooleanChoice">
            <summary>
            The non-deterministic boolean choice value. Only relevant if
            this is a choice schedule step.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleStep.IntegerChoice">
            <summary>
            The non-deterministic integer choice value. Only relevant if
            this is a choice schedule step.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleStep.Previous">
            <summary>
            Previous schedule step.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleStep.Next">
            <summary>
            Next schedule step.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleStep.State">
            <summary>
            Snapshot of the program state in this schedule step.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleStep.CreateSchedulingChoice(System.Int32,System.UInt64)">
            <summary>
            Creates a schedule step.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleStep.CreateNondeterministicBooleanChoice(System.Int32,System.Boolean)">
            <summary>
            Creates a nondeterministic boolean choice schedule step.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleStep.CreateFairNondeterministicBooleanChoice(System.Int32,System.String,System.Boolean)">
            <summary>
            Creates a fair nondeterministic boolean choice schedule step.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleStep.CreateNondeterministicIntegerChoice(System.Int32,System.Int32)">
            <summary>
            Creates a nondeterministic integer choice schedule step.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleStep.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal
            to the current System.Object.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleStep.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleStepType">
            <summary>
            The schedule step type.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleTrace">
            <summary>
            Class implementing a P# program schedule trace.
            A trace is a series of transitions from some
            initial state to some end state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleTrace.Steps">
            <summary>
            The steps of the schedule trace.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleTrace.Count">
            <summary>
            The number of steps in the schedule trace.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleTrace.Item(System.Int32)">
            <summary>
            Index for the schedule trace.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleTrace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleTrace"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleTrace.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleTrace"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleTrace.AddSchedulingChoice(System.UInt64)">
            <summary>
            Adds a scheduling choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleTrace.AddNondeterministicBooleanChoice(System.Boolean)">
            <summary>
            Adds a nondeterministic boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleTrace.AddFairNondeterministicBooleanChoice(System.String,System.Boolean)">
            <summary>
            Adds a fair nondeterministic boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleTrace.AddNondeterministicIntegerChoice(System.Int32)">
            <summary>
            Adds a nondeterministic integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleTrace.Pop">
            <summary>
            Returns the latest schedule step and removes
            it from the trace.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleTrace.Peek">
            <summary>
            Returns the latest schedule step without removing it.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleTrace.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleTrace.System#Collections#Generic#IEnumerable{Microsoft#PSharp#TestingServices#Tracing#Schedule#ScheduleStep}#GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleTrace.Push(Microsoft.PSharp.TestingServices.Tracing.Schedule.ScheduleStep)">
            <summary>
            Pushes a new step to the trace.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.QuiescentEvent">
            <summary>
            Signals that a machine has reached quiescence.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.QuiescentEvent.MachineId">
            <summary>
            The id of the machine that has reached quiescence.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.QuiescentEvent.#ctor(Microsoft.PSharp.MachineId)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.QuiescentEvent"/> class.
            </summary>
            <param name="mid">The id of the machine that has reached quiescence.</param>
        </member>
    </members>
</doc>
