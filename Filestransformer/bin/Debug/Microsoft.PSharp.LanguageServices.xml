<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.PSharp.LanguageServices</name>
    </assembly>
    <members>
        <member name="T:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext">
            <summary>
            A P# compilation context.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext.Configuration">
            <summary>
            Configuration.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext.Solution">
            <summary>
            The solution of the P# program.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext.PSharpProjects">
            <summary>
            List of P# projects in the solution.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext.CustomCompilerPassAssemblies">
            <summary>
            Set of custom compiler pass assemblies.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext.HasInitialized">
            <summary>
            True if program info has been initialized.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext.Create">
            <summary>
            Create a new P# compilation context using the default
            configuration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext.Create(Microsoft.PSharp.Configuration)">
            <summary>
            Create a new P# compilation context.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext.LoadSolution">
            <summary>
            Loads the user-specified solution.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext.LoadSolution(Microsoft.CodeAnalysis.Solution)">
            <summary>
            Loads the specified solution.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext.LoadSolution(System.String,System.String)">
            <summary>
            Loads a solution from the specified text.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext.LoadSolution(System.String,System.Collections.Generic.ISet{Microsoft.CodeAnalysis.MetadataReference},System.String)">
            <summary>
            Loads a solution from the specified text.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext.GetSolution">
            <summary>
            Returns the P# solution.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext.GetSolution(System.String,System.String)">
            <summary>
            Returns a P# solution from the specified text.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext.GetSolution(System.String,System.Collections.Generic.ISet{Microsoft.CodeAnalysis.MetadataReference},System.String)">
            <summary>
            Returns a P# solution from the specified text.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext.GetProjects">
            <summary>
            Returns the P# projects.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext.GetProjectWithName(System.String)">
            <summary>
            Returns the project with the specified name.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext.ReplaceSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree,System.String,Microsoft.CodeAnalysis.Project)">
            <summary>
            Replaces the syntax tree with the specified text in the project.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext.PrintSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree)">
            <summary>
            Prints the syntax tree.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext.IsPSharpFile(Microsoft.CodeAnalysis.SyntaxTree)">
            <summary>
            True if the syntax tree belongs to a P# program, else false.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext.IsCSharpFile(Microsoft.CodeAnalysis.SyntaxTree)">
            <summary>
            True if the syntax tree belongs to a C# program, else false.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext.#ctor(Microsoft.PSharp.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext.CreateProject(System.Collections.Generic.ISet{Microsoft.CodeAnalysis.MetadataReference})">
            <summary>
            Creates a new P# project using the specified references.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationContext.LoadCustomCompilerPasses">
            <summary>
            Loads the user-specified compiler passes.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Compilation.CompilationEngine">
            <summary>
            A P# compilation engine.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Compilation.CompilationEngine.CompilationContext">
            <summary>
            The compilation context.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Compilation.CompilationEngine.Logger">
            <summary>
            The installed logger.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Compilation.CompilationEngine.ProjectAssemblyPathMap">
            <summary>
            Map from project assembly names to assembly paths.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Compilation.CompilationEngine.OutputDirectoryMap">
            <summary>
            Map from project names to output directories.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationEngine.Create(Microsoft.PSharp.LanguageServices.Compilation.CompilationContext)">
            <summary>
            Creates a P# compilation engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationEngine.Create(Microsoft.PSharp.LanguageServices.Compilation.CompilationContext,Microsoft.PSharp.IO.ILogger)">
            <summary>
            Creates a P# compilation engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationEngine.Run">
            <summary>
            Runs the P# compilation engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationEngine.#ctor(Microsoft.PSharp.LanguageServices.Compilation.CompilationContext,Microsoft.PSharp.IO.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Compilation.CompilationEngine"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationEngine.ToFile(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.OutputKind,System.String,System.Boolean,System.Boolean)">
            <summary>
            Compiles the given compilation to a file.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationEngine.ToAssembly(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.OutputKind)">
            <summary>
            Compiles the given compilation and returns the assembly.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationEngine.CompileProject(Microsoft.CodeAnalysis.Project)">
            <summary>
            Compiles the given P# project.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationEngine.LinkSolutionAssembliesToProject(Microsoft.CodeAnalysis.Project,Microsoft.CodeAnalysis.ProjectDependencyGraph)">
            <summary>
            Links the solution project assemblies to the given P# project.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationEngine.LinkExternalAssembliesToProject(Microsoft.CodeAnalysis.Project,Microsoft.CodeAnalysis.ProjectDependencyGraph)">
            <summary>
            Links the external references to the given P# compilation.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationEngine.LinkAssemblyToAllProjects(System.Reflection.Assembly,System.String)">
            <summary>
            Links the given P# assembly.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Compilation.CompilationEngine.CopyAssembly(System.String,System.String)">
            <summary>
            Copies the assembly from the source to the destination.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.ParsingException">
            <summary>
            Exception thrown during parsing.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.ParsingException.Errors">
            <summary>
            List of errors.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.ParsingException.Warnings">
            <summary>
            List of warnings.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.ParsingException.ExpectedTokenTypes">
            <summary>
            The expected tokens.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.ParsingException.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.ParsingException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.ParsingException.#ctor(System.String,Microsoft.PSharp.LanguageServices.Parsing.TokenType[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.ParsingException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.ParsingException.#ctor(System.String,System.Exception,Microsoft.PSharp.LanguageServices.Parsing.TokenType[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.ParsingException"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.RewritingException">
            <summary>
            Exception thrown during rewriting.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.RewritingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.RewritingException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.RewritingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.RewritingException"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.BaseLexer">
            <summary>
            An abstract lexer.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.BaseLexer.Tokens">
            <summary>
            List of tokens.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.BaseLexer.TextUnits">
            <summary>
            List of text units to be tokenized.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.BaseLexer.Index">
            <summary>
            The current index.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.BaseLexer.Tokenize(System.String)">
            <summary>
            Tokenizes the given text.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.BaseLexer.SplitText(System.String)">
            <summary>
            Splits the given text using a regex pattern and returns the split text.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.BaseLexer.TokenizeNext">
            <summary>
            Tokenizes the next text unit.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.BaseLexer.GetPattern">
            <summary>
            Returns the regex pattern.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.ILexer">
            <summary>
            Interface for a lexer.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.ILexer.Tokenize(System.String)">
            <summary>
            Tokenizes the given text.
            </summary>
            <param name="text">Text to tokenize</param>
            <returns>List of tokens</returns>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.PSharpLexer">
            <summary>
            The P# lexer.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.PSharpLexer.TokenizeNext">
            <summary>
            Tokenizes the next text unit.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.PSharpLexer.GetPattern">
            <summary>
            Returns the regex pattern.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.BaseParser">
            <summary>
            An abstract parser.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.BaseParser.SyntaxTree">
            <summary>
            Syntax tree currently parsed.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.BaseParser.Project">
            <summary>
            A P# project.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.BaseParser.Program">
            <summary>
            A P# program.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.BaseParser.Options">
            <summary>
            The parsing options.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.BaseParser.#ctor(Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.BaseParser"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.BaseParser.#ctor(Microsoft.PSharp.LanguageServices.PSharpProject,Microsoft.CodeAnalysis.SyntaxTree,Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.BaseParser"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.BaseParser.CreateNewProgram">
            <summary>
            Returns a new P# program.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.CSharpParser">
            <summary>
            The C# parser.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.CSharpParser.ErrorLog">
            <summary>
            The error log.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.CSharpParser.WarningLog">
            <summary>
            The warning log.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.CSharpParser.#ctor(Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.CSharpParser"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.CSharpParser.#ctor(Microsoft.PSharp.LanguageServices.PSharpProject,Microsoft.CodeAnalysis.SyntaxTree,Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.CSharpParser"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.CSharpParser.Parse">
            <summary>
            Returns a P# program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.CSharpParser.GetParsingWarningLog">
            <summary>
            Returns the parsing warning log.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.CSharpParser.GetParsingErrorLog">
            <summary>
            Returns the parsing error log.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.CSharpParser.CreateNewProgram">
            <summary>
            Returns a new C# program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.CSharpParser.ParseSyntaxTree">
            <summary>
            Parses the syntax tree for errors.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.CSharpParser.CheckForErrorsAndWarnings">
            <summary>
            Checks for parsing errors and warnings. If any errors
            are found (or warnings, if warnings are enabled) then
            it throws an exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.CSharpParser.ReportParsingWarnings(System.Collections.Generic.List{System.String})">
            <summary>
            Reports the parsing warnings. Only works if the
            parser is running internally.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.CSharpParser.ReportParsingErrors(System.Collections.Generic.List{System.String})">
            <summary>
            Reports the parsing errors and exits. Only works if the
            parser is running internally.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.IParser">
            <summary>
            Interface for a parser.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.IParser.ParseTokens(System.Collections.Generic.List{Microsoft.PSharp.LanguageServices.Parsing.Token})">
            <summary>
            Returns a P# program.
            </summary>
            <param name="tokens">List of tokens.</param>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.IParser.GetExpectedTokenTypes">
            <summary>
            Returns the expected token types at the end of parsing.
            </summary>
            <returns>The expected token types.</returns>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.PSharpParser">
            <summary>
            The P# parser.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.PSharpParser.#ctor(Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.PSharpParser"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.PSharpParser.#ctor(Microsoft.PSharp.LanguageServices.PSharpProject,Microsoft.CodeAnalysis.SyntaxTree,Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.PSharpParser"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.PSharpParser.CreateNewProgram">
            <summary>
            Returns a new P# program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.PSharpParser.ParseTokens">
            <summary>
            Parses the tokens.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.PSharpParser.VisitUsingDeclaration">
            <summary>
            Visits a using declaration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.PSharpParser.VisitNamespaceDeclaration">
            <summary>
            Visits a namespace declaration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.PSharpParser.VisitNextIntraNamespaceDeclaration(Microsoft.PSharp.LanguageServices.Syntax.NamespaceDeclaration)">
            <summary>
            Visits the next intra-namespace declration.
            </summary>
            <param name="node">Node</param>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.PSharpParser.VisitEventOrMachineDeclaration(Microsoft.PSharp.LanguageServices.Syntax.NamespaceDeclaration)">
            <summary>
            Visits an event or machine declaration.
            </summary>
            <param name="parentNode">Node</param>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.TokenParser">
            <summary>
            An abstract token parser.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenParser.OriginalTokens">
            <summary>
            List of original tokens.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenParser.TokenStream">
            <summary>
            The token stream.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenParser.ExpectedTokenTypes">
            <summary>
            The expected token types at end of parsing.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenParser.ErrorLog">
            <summary>
            The error log.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.TokenParser.#ctor(Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.TokenParser"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.TokenParser.#ctor(Microsoft.PSharp.LanguageServices.PSharpProject,Microsoft.CodeAnalysis.SyntaxTree,Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.TokenParser"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.TokenParser.ParseTokens(System.Collections.Generic.List{Microsoft.PSharp.LanguageServices.Parsing.Token})">
            <summary>
            Returns a P# program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.TokenParser.GetExpectedTokenTypes">
            <summary>
            Returns the expected token types at the end of parsing.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.TokenParser.GetParsingErrorLog">
            <summary>
            Returns the parsing error log.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.TokenParser.ParseTokens">
            <summary>
            Parses the tokens.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.TokenParser.ReportParsingError">
            <summary>
            Reports a parsing error.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.ParsingEngine">
            <summary>
            A P# parsing engine.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.ParsingEngine.CompilationContext">
            <summary>
            The compilation context.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.ParsingEngine.Options">
            <summary>
            The parsing options.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.ParsingEngine.Create(Microsoft.PSharp.LanguageServices.Compilation.CompilationContext)">
            <summary>
            Creates a P# parsing engine for the specified compilation
            context and using the default parsing options.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.ParsingEngine.Create(Microsoft.PSharp.LanguageServices.Compilation.CompilationContext,Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions)">
            <summary>
            Creates a P# parsing engine for the specified compilation
            context and using the specified parsing options.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.ParsingEngine.Run">
            <summary>
            Runs the P# parsing engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.ParsingEngine.#ctor(Microsoft.PSharp.LanguageServices.Compilation.CompilationContext,Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.ParsingEngine"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions">
            <summary>
            The P# parsing options.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions.ExitOnError">
            <summary>
            The parser should exit when it
            finds an error.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions.ShowWarnings">
            <summary>
            Enables warnings.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions.ThrowParsingException">
            <summary>
            The parser should throw a parsing
            exception when it finds an error.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions.SkipErrorChecking">
            <summary>
            The parser should skip error checking.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions.CreateDefault">
            <summary>
            Creates an instance of the default
            P# parsing options.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions.EnableExitOnError">
            <summary>
            Enables the option to exit on error.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions.DisableExitOnError">
            <summary>
            Disables the option to exit on error.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions.EnableWarnings">
            <summary>
            Enables warnings.
            </summary>
            <returns>ParsingOptions</returns>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions.DisableWarnings">
            <summary>
            Disables warnings.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions.EnableThrowParsingException">
            <summary>
            Enables the option to throw a parsing exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions.DisableThrowParsingException">
            <summary>
            Disables the option to throw a parsing exception.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions.EnableSkipErrorChecking">
            <summary>
            Enables the option to skip error checking.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions.DisableSkipErrorChecking">
            <summary>
            Disables the option to skip error checking.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.RewritingEngine">
            <summary>
            A P# rewriting engine.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.RewritingEngine.CompilationContext">
            <summary>
            The compilation context.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.RewritingEngine.Create(Microsoft.PSharp.LanguageServices.Compilation.CompilationContext)">
            <summary>
            Creates a P# rewriting engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.RewritingEngine.Run">
            <summary>
            Runs the P# rewriting engine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.RewritingEngine.#ctor(Microsoft.PSharp.LanguageServices.Compilation.CompilationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.RewritingEngine"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.TextUnit">
            <summary>
            A single unit of text.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TextUnit.Text">
            <summary>
            The text of this text unit.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TextUnit.Line">
            <summary>
            The source code line of this text unit.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.TextUnit.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.TextUnit"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.TextUnit.Clone(Microsoft.PSharp.LanguageServices.Parsing.TextUnit)">
            <summary>
            Returns a clone of the text unit.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Token">
            <summary>
            P# syntax token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.Token.TextUnit">
            <summary>
            The text unit that this token represents.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.Token.Text">
            <summary>
            The text that this token represents.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.Token.Type">
            <summary>
            The type of this token.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Token.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Token"/> class.
            By default, the token is <see cref="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.None"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Token.#ctor(Microsoft.PSharp.LanguageServices.Parsing.TextUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Token"/> class.
            By default, the token is <see cref="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.None"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Token.#ctor(System.String,Microsoft.PSharp.LanguageServices.Parsing.TokenType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Token"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Token.#ctor(Microsoft.PSharp.LanguageServices.Parsing.TextUnit,Microsoft.PSharp.LanguageServices.Parsing.TokenType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Token"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.TokenStream">
            <summary>
            P# syntax token stream.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenStream.Tokens">
            <summary>
            List of tokens in the stream.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenStream.Index">
            <summary>
            The current index of the stream.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.LanguageServices.Parsing.TokenStream.Length">
            <summary>
            The length of the stream.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.LanguageServices.Parsing.TokenStream.Done">
            <summary>
            True if no tokens remaining in the stream.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenStream.Program">
            <summary>
            The program this token stream belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.TokenStream.#ctor(System.Collections.Generic.List{Microsoft.PSharp.LanguageServices.Parsing.Token})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.TokenStream"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.TokenStream.Next">
            <summary>
            Returns the next token in the stream and progresses by one token,
            or null if the stream is empty.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.TokenStream.Peek">
            <summary>
            Returns the next token in the stream without progressing to the next token,
            or null if the stream is empty.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.TokenStream.Swap(Microsoft.PSharp.LanguageServices.Parsing.Token)">
            <summary>
            Swaps the current token with the new token, or does nothing if the stream is empty.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.TokenStream.GetAt(System.Int32)">
            <summary>
            Returns the token in the given index of the stream, or null if the index is out of bounds.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.TokenStream.SkipWhiteSpaceAndCommentTokens">
            <summary>
            Skips whitespace and comment tokens.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.TokenStream.SkipCommentTokens">
            <summary>
            Skips comment tokens.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.TokenStream.Consume">
            <summary>
            Consumes the next token in the stream, or does nothing if the stream is empty.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.TokenStream.SkipWhiteSpaceTokens(System.Collections.Generic.List{Microsoft.PSharp.LanguageServices.Parsing.Token})">
            <summary>
            Skips whitespace tokens.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.TokenStream.CommentOutLineComment">
            <summary>
            Comments out a line-wide comment, if any.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.TokenStream.CommentOutMultiLineComment">
            <summary>
            Comments out a multi-line comment, if any.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.TokenType">
            <summary>
            P# token types.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.None">
            <summary>
            None token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.NewLine">
            <summary>
            New line token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.WhiteSpace">
            <summary>
            Whitespace token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Comment">
            <summary>
            Comment token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.CommentLine">
            <summary>
            Comment line token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.CommentStart">
            <summary>
            Comment start token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.CommentEnd">
            <summary>
            Comment end token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Region">
            <summary>
            Region token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Identifier">
            <summary>
            Identifier token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.LeftCurlyBracket">
            <summary>
            Left curly bracket token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.RightCurlyBracket">
            <summary>
            Right curly bracket token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.LeftParenthesis">
            <summary>
            Left parenthesis token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.RightParenthesis">
            <summary>
            Right parenthesis token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.LeftSquareBracket">
            <summary>
            Left square bracket token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.RightSquareBracket">
            <summary>
            Right square bracket token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.LeftAngleBracket">
            <summary>
            Left angle bracket token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.RightAngleBracket">
            <summary>
            Right angle bracket token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.MachineLeftCurlyBracket">
            <summary>
            Machine left curly bracket token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.MachineRightCurlyBracket">
            <summary>
            Machine right curly bracket token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.StateLeftCurlyBracket">
            <summary>
            State left curly bracket token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.StateRightCurlyBracket">
            <summary>
            State right curly bracket token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.StateGroupLeftCurlyBracket">
            <summary>
            State group left curly bracket token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.StateGroupRightCurlyBracket">
            <summary>
            State group right curly bracket token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Semicolon">
            <summary>
            Semicolon token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Colon">
            <summary>
            Colon token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Comma">
            <summary>
            Comma token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Dot">
            <summary>
            Dot token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.EqualOp">
            <summary>
            Equal op token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.AssignOp">
            <summary>
            Assign op token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.InsertOp">
            <summary>
            Insert op token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.RemoveOp">
            <summary>
            Remove op token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.NotEqualOp">
            <summary>
            Not equal op token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.LessOrEqualOp">
            <summary>
            Less or equal op token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.GreaterOrEqualOp">
            <summary>
            Greater or equal op token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.LambdaOp">
            <summary>
            Lambda op token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.PlusOp">
            <summary>
            Plus op token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.MinusOp">
            <summary>
            Minus op token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.MulOp">
            <summary>
            Multiplication op token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.DivOp">
            <summary>
            Division op token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.ModOp">
            <summary>
            Mod op token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.LogNotOp">
            <summary>
            Logical not token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.LogAndOp">
            <summary>
            Logical and token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.LogOrOp">
            <summary>
            Logical or token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Private">
            <summary>
            Private token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Protected">
            <summary>
            Protected token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Internal">
            <summary>
            Internal token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Public">
            <summary>
            Public token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Partial">
            <summary>
            Partial token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Abstract">
            <summary>
            Abstract token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Virtual">
            <summary>
            Virtual token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Override">
            <summary>
            Override token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.NamespaceDecl">
            <summary>
            Namespace token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.ClassDecl">
            <summary>
            Class token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.StructDecl">
            <summary>
            Struct token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Using">
            <summary>
            Using token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.This">
            <summary>
            This token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Base">
            <summary>
            Base token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.New">
            <summary>
            New token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Null">
            <summary>
            Null token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.True">
            <summary>
            True token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.False">
            <summary>
            False token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.In">
            <summary>
            In token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.As">
            <summary>
            As token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.SizeOf">
            <summary>
            Size of token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.IfCondition">
            <summary>
            If condition token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.ElseCondition">
            <summary>
            Else condition token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.DoLoop">
            <summary>
            Do token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.ForLoop">
            <summary>
            For token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.ForeachLoop">
            <summary>
            Foreach token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.WhileLoop">
            <summary>
            While token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Break">
            <summary>
            Break token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Continue">
            <summary>
            Continue token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Return">
            <summary>
            Return token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Lock">
            <summary>
            Lock token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Try">
            <summary>
            Try token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Catch">
            <summary>
            Catch token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Finally">
            <summary>
            Finally token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Async">
            <summary>
            Async token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Await">
            <summary>
            Await token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Var">
            <summary>
            Var token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Void">
            <summary>
            Void token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Object">
            <summary>
            Object token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.String">
            <summary>
            String token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Sbyte">
            <summary>
            Sbyte token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Byte">
            <summary>
            Byte token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Short">
            <summary>
            Short token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Ushort">
            <summary>
            Ushort token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Int">
            <summary>
            Int token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Uint">
            <summary>
            Uint token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Long">
            <summary>
            Long token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Ulong">
            <summary>
            Ulong token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Char">
            <summary>
            Char token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Bool">
            <summary>
            Bool token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Decimal">
            <summary>
            Decimal token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Float">
            <summary>
            Float token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Double">
            <summary>
            Double token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.MachineDecl">
            <summary>
            Machine token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Monitor">
            <summary>
            Monitor token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.StateDecl">
            <summary>
            State token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.StateGroupDecl">
            <summary>
            State group token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.EventDecl">
            <summary>
            Event token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.StartState">
            <summary>
            Start token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.HotState">
            <summary>
            Hot state token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.ColdState">
            <summary>
            Cold state token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.EventIdentifier">
            <summary>
            Event identifier token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.MachineIdentifier">
            <summary>
            Machine identifier token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.StateIdentifier">
            <summary>
            State identifier token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.StateGroupIdentifier">
            <summary>
            State group identifier token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.ActionIdentifier">
            <summary>
            Action identifier token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.TypeIdentifier">
            <summary>
            Type identifier token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.CreateMachine">
            <summary>
            Create machine token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.CreateRemoteMachine">
            <summary>
            Create remote machine token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.SendEvent">
            <summary>
            Send event token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.RaiseEvent">
            <summary>
            Raise event token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Jump">
            <summary>
            Jump token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Assert">
            <summary>
            Assert token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Assume">
            <summary>
            Assume token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Pop">
            <summary>
            Pop token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.OnAction">
            <summary>
            On action token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.DoAction">
            <summary>
            Do action token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.GotoState">
            <summary>
            Goto state token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.PushState">
            <summary>
            Push state token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.WithExit">
            <summary>
            With exit token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.DeferEvent">
            <summary>
            Defer event token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.IgnoreEvent">
            <summary>
            Ignore event token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Entry">
            <summary>
            Entry action token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Exit">
            <summary>
            Exit action token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.Trigger">
            <summary>
            Trigger token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.HaltEvent">
            <summary>
            Halt event token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.DefaultEvent">
            <summary>
            Default event token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.NonDeterministic">
            <summary>
            Nondeterministic token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.TokenType.ExternDecl">
            <summary>
            "extern" declaration token
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.TokenTypeRegistry">
            <summary>
            The token type registry.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.TokenTypeRegistry.GetText(Microsoft.PSharp.LanguageServices.Parsing.TokenType)">
            <summary>
            Returns the text representing the given token type.
            </summary>
            <param name="type">TokenType</param>
            <returns>Text</returns>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseMachineVisitor">
            <summary>
            An abstract P# machine visitor.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseMachineVisitor.Actions">
            <summary>
            Map from machines to a list of actions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseMachineVisitor.ActionsThatRaise">
            <summary>
            Map from machines to actions that contain a raise statement.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseMachineVisitor.ActionsThaPop">
            <summary>
            Map from machines to actions that contain a pop statement.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseMachineVisitor.#ctor(Microsoft.PSharp.LanguageServices.PSharpProject,System.Collections.Generic.List{System.Tuple{Microsoft.CodeAnalysis.SyntaxToken,System.String}},System.Collections.Generic.List{System.Tuple{Microsoft.CodeAnalysis.SyntaxToken,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseMachineVisitor"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseMachineVisitor.Parse(Microsoft.CodeAnalysis.SyntaxTree)">
            <summary>
            Parses the syntax tree for errors.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseMachineVisitor.IsMachine(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Returns true if the given class declaration is a machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseMachineVisitor.IsState(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Returns true if the given class declaration is a state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseMachineVisitor.IsStateGroup(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Returns true if the given class declaration is a stategroup.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseMachineVisitor.GetTypeOfMachine">
            <summary>
            Returns the type of the machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseMachineVisitor.DiscoverMachineActions(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax,Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Discovers the available actions of the given machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseMachineVisitor.DiscoverMachineActionsThatRaise(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Discovers the actions of the given machine that raise.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseMachineVisitor.DiscoverMachineActionsThatPop(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Discovers the actions of the given machine that pop.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseMachineVisitor.CheckForAtLeastOneState(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax,Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Checks that at least one state is declared inside the machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseMachineVisitor.CheckForAtLeastOneStateOrGroup(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax,Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Checks that at least one state or group is declared inside a group.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseMachineVisitor.CheckForIllegalClasses(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax,Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Checks that no non-state or non-state-group or non-event
            classes are declared inside the machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseMachineVisitor.CheckForStructs(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Checks that no structs are declared inside the machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseMachineVisitor.CheckForStartState(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax,Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Checks that a machine has an start state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseMachineVisitor.CheckForNestedRaiseStatementsInActions(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Checks that a nested raise statement is not used in a machine action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseMachineVisitor.CheckForNestedPopStatementsInActions(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Checks that a nested pop statement is not used in a machine action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseMachineVisitor.CheckForRaiseStatementsInMethods(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Checks that a raise statement is not used in a machine method.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseMachineVisitor.CheckForPopStatementsInMethods(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Checks that a pop statement is not used in a machine method.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseStateVisitor">
            <summary>
            An abstract P# state visitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseStateVisitor.#ctor(Microsoft.PSharp.LanguageServices.PSharpProject,System.Collections.Generic.List{System.Tuple{Microsoft.CodeAnalysis.SyntaxToken,System.String}},System.Collections.Generic.List{System.Tuple{Microsoft.CodeAnalysis.SyntaxToken,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseStateVisitor"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseStateVisitor.Parse(Microsoft.CodeAnalysis.SyntaxTree)">
            <summary>
            Parses the syntax tree for errors.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseStateVisitor.IsState(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Returns true if the given class declaration is a state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseStateVisitor.GetTypeOfState">
            <summary>
            Returns the type of the state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseStateVisitor.CheckForSpecialProperties(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax,Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Checks for special properties.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseStateVisitor.CheckForFields(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Checks that no fields are declared inside the state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseStateVisitor.CheckForMethods(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Checks that no methods are declared inside the machine (beside the P# API ones).
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseStateVisitor.CheckForClasses(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Checks that no classes are declared inside the state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseStateVisitor.CheckForStructs(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Checks that no structs are declared inside the state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseStateVisitor.CheckForDuplicateOnEntry(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax,Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Checks that a state does not have a duplicate entry action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseStateVisitor.CheckForDuplicateOnExit(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax,Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Checks that a state does not have a duplicate exit action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseStateVisitor.CheckForMultipleSameEventHandlers(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax,Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Checks for multiple handlers for the same event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseStateVisitor.CheckForCorrectWildcardUse(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax,Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Checks for correct wildcard usage.
            If "defer *" then:
               no other event should be deferred.
            If "ignore *" or "on * do action" then:
               no other action or ignore should be defined.
            If "On * goto" or "On * push" then:
               no other transition, action or ignore should be defined.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseVisitor">
            <summary>
            An abstract P# visitor.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseVisitor.Project">
            <summary>
            The P# project.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseVisitor.ErrorLog">
            <summary>
            The error log.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseVisitor.WarningLog">
            <summary>
            The warning log.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseVisitor.#ctor(Microsoft.PSharp.LanguageServices.PSharpProject,System.Collections.Generic.List{System.Tuple{Microsoft.CodeAnalysis.SyntaxToken,System.String}},System.Collections.Generic.List{System.Tuple{Microsoft.CodeAnalysis.SyntaxToken,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Framework.BaseVisitor"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Framework.MachineDeclarationParser">
            <summary>
            The P# machine declaration parsing visitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.MachineDeclarationParser.#ctor(Microsoft.PSharp.LanguageServices.PSharpProject,System.Collections.Generic.List{System.Tuple{Microsoft.CodeAnalysis.SyntaxToken,System.String}},System.Collections.Generic.List{System.Tuple{Microsoft.CodeAnalysis.SyntaxToken,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Framework.MachineDeclarationParser"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.MachineDeclarationParser.IsMachine(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Returns true if the given class declaration is a machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.MachineDeclarationParser.IsState(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Returns true if the given class declaration is a state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.MachineDeclarationParser.IsStateGroup(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Returns true if the given class declaration is a stategroup.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.MachineDeclarationParser.GetTypeOfMachine">
            <summary>
            Returns the type of the machine.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Framework.MachineStateDeclarationParser">
            <summary>
            The P# machine state declaration parsing visitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.MachineStateDeclarationParser.#ctor(Microsoft.PSharp.LanguageServices.PSharpProject,System.Collections.Generic.List{System.Tuple{Microsoft.CodeAnalysis.SyntaxToken,System.String}},System.Collections.Generic.List{System.Tuple{Microsoft.CodeAnalysis.SyntaxToken,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Framework.MachineStateDeclarationParser"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.MachineStateDeclarationParser.IsState(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Returns true if the given class declaration is a state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.MachineStateDeclarationParser.GetTypeOfState">
            <summary>
            Returns the type of the state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.MachineStateDeclarationParser.CheckForSpecialProperties(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax,Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Checks for special properties.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.MachineStateDeclarationParser.CheckForLivenessAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax,Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Checks that a state does not have a liveness attribute.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Framework.MonitorDeclarationParser">
            <summary>
            The P# monitor declaration parsing visitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.MonitorDeclarationParser.#ctor(Microsoft.PSharp.LanguageServices.PSharpProject,System.Collections.Generic.List{System.Tuple{Microsoft.CodeAnalysis.SyntaxToken,System.String}},System.Collections.Generic.List{System.Tuple{Microsoft.CodeAnalysis.SyntaxToken,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Framework.MonitorDeclarationParser"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.MonitorDeclarationParser.IsMachine(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Returns true if the given class declaration is a machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.MonitorDeclarationParser.IsState(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Returns true if the given class declaration is a state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.MonitorDeclarationParser.IsStateGroup(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Returns true if the given class declaration is a stategroup.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.MonitorDeclarationParser.GetTypeOfMachine">
            <summary>
            Returns the type of the machine.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Framework.MonitorStateDeclarationParser">
            <summary>
            The P# monitor state declaration parsing visitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.MonitorStateDeclarationParser.#ctor(Microsoft.PSharp.LanguageServices.PSharpProject,System.Collections.Generic.List{System.Tuple{Microsoft.CodeAnalysis.SyntaxToken,System.String}},System.Collections.Generic.List{System.Tuple{Microsoft.CodeAnalysis.SyntaxToken,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Framework.MonitorStateDeclarationParser"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.MonitorStateDeclarationParser.IsState(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Returns true if the given class declaration is a state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.MonitorStateDeclarationParser.GetTypeOfState">
            <summary>
            Returns the type of the state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.MonitorStateDeclarationParser.CheckForSpecialProperties(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax,Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Checks for special properties.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Framework.MonitorStateDeclarationParser.CheckForDuplicateLivenessAttributes(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax,Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Checks that a state does not have a duplicate liveness attribute.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.BaseTokenVisitor">
            <summary>
            An abstract P# token parsing visitor.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Parsing.Syntax.BaseTokenVisitor.TokenStream">
            <summary>
            The token stream to visit.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.BaseTokenVisitor.#ctor(Microsoft.PSharp.LanguageServices.Parsing.TokenStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.BaseTokenVisitor"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.BlockSyntaxVisitor">
            <summary>
            The P# block syntax parsing visitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.BlockSyntaxVisitor.#ctor(Microsoft.PSharp.LanguageServices.Parsing.TokenStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.BlockSyntaxVisitor"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.BlockSyntaxVisitor.Visit(Microsoft.PSharp.LanguageServices.Syntax.BlockSyntax)">
            <summary>
            Visits the syntax node.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.DeferEventsDeclarationVisitor">
            <summary>
            The P# defer events declaration parsing visitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.DeferEventsDeclarationVisitor.#ctor(Microsoft.PSharp.LanguageServices.Parsing.TokenStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.DeferEventsDeclarationVisitor"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.DeferEventsDeclarationVisitor.Visit(Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration)">
            <summary>
            Visits the syntax node.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.EventDeclarationVisitor">
            <summary>
            The P# event declaration parsing visitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.EventDeclarationVisitor.#ctor(Microsoft.PSharp.LanguageServices.Parsing.TokenStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.EventDeclarationVisitor"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.EventDeclarationVisitor.Visit(Microsoft.PSharp.LanguageServices.Syntax.NamespaceDeclaration,Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration,Microsoft.PSharp.LanguageServices.Syntax.ModifierSet)">
            <summary>
            Visits the syntax node.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.EventDeclarationVisitor.CheckEventModifierSet(Microsoft.PSharp.LanguageServices.Syntax.ModifierSet,System.Boolean)">
            <summary>
            Checks the modifier set for errors.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.IgnoreEventsDeclarationVisitor">
            <summary>
            The P# ignore events declaration parsing visitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.IgnoreEventsDeclarationVisitor.#ctor(Microsoft.PSharp.LanguageServices.Parsing.TokenStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.IgnoreEventsDeclarationVisitor"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.IgnoreEventsDeclarationVisitor.Visit(Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration)">
            <summary>
            Visits the syntax node.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.MachineDeclarationVisitor">
            <summary>
            The P# machine declaration parsing visitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.MachineDeclarationVisitor.#ctor(Microsoft.PSharp.LanguageServices.Parsing.TokenStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.MachineDeclarationVisitor"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.MachineDeclarationVisitor.Visit(Microsoft.PSharp.LanguageServices.Syntax.NamespaceDeclaration,System.Boolean,Microsoft.PSharp.LanguageServices.Syntax.ModifierSet)">
            <summary>
            Visits the syntax node.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.MachineDeclarationVisitor.VisitNextPSharpIntraMachineDeclaration(Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration)">
            <summary>
            Visits the next intra-machine declaration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.MachineDeclarationVisitor.VisitMachineLevelDeclaration(Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration)">
            <summary>
            Visits a machine level declaration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.MachineDeclarationVisitor.CheckMachineModifierSet(Microsoft.PSharp.LanguageServices.Syntax.ModifierSet)">
            <summary>
            Checks the modifier set for errors.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.MachineDeclarationVisitor.CheckMonitorModifierSet(Microsoft.PSharp.LanguageServices.Syntax.ModifierSet)">
            <summary>
            Checks the modifier set for errors.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.MachineMemberDeclarationVisitor">
            <summary>
            The P# machine member declaration parsing visitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.MachineMemberDeclarationVisitor.#ctor(Microsoft.PSharp.LanguageServices.Parsing.TokenStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.MachineMemberDeclarationVisitor"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.MachineMemberDeclarationVisitor.Visit(Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration,Microsoft.PSharp.LanguageServices.Syntax.ModifierSet)">
            <summary>
            Visits the syntax node.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.MachineMemberDeclarationVisitor.CheckMachineFieldModifierSet(Microsoft.PSharp.LanguageServices.Syntax.ModifierSet)">
            <summary>
            Checks the modifier set for errors.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.MachineMethodDeclarationVisitor">
            <summary>
            The P# machine method declaration parsing visitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.MachineMethodDeclarationVisitor.#ctor(Microsoft.PSharp.LanguageServices.Parsing.TokenStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.MachineMethodDeclarationVisitor"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.MachineMethodDeclarationVisitor.Visit(Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration,Microsoft.PSharp.LanguageServices.Parsing.Token,Microsoft.PSharp.LanguageServices.Parsing.Token,Microsoft.PSharp.LanguageServices.Syntax.ModifierSet)">
            <summary>
            Visits the syntax node.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.MachineMethodDeclarationVisitor.CheckMachineMethodModifierSet(Microsoft.PSharp.LanguageServices.Syntax.ModifierSet)">
            <summary>
            Checks the modifier set for errors.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateActionDeclarationVisitor">
            <summary>
            The P# action declaration parsing visitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateActionDeclarationVisitor.#ctor(Microsoft.PSharp.LanguageServices.Parsing.TokenStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateActionDeclarationVisitor"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateActionDeclarationVisitor.Visit(Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration)">
            <summary>
            Visits the syntax node.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateActionDeclarationVisitor.ConsumeState">
            <summary>
            Consumes state-identifier(.state-identifier)*.
            Stops at [With|SemiColon].
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateDeclarationVisitor">
            <summary>
            The P# state declaration parsing visitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateDeclarationVisitor.#ctor(Microsoft.PSharp.LanguageServices.Parsing.TokenStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateDeclarationVisitor"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateDeclarationVisitor.Visit(Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration,Microsoft.PSharp.LanguageServices.Syntax.StateGroupDeclaration,Microsoft.PSharp.LanguageServices.Syntax.ModifierSet)">
            <summary>
            Visits the syntax node.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateDeclarationVisitor.VisitNextPSharpIntraStateDeclaration(Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration)">
            <summary>
            Visits the next intra-state declration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateDeclarationVisitor.VisitNextPIntraStateDeclaration(Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration)">
            <summary>
            Visits the next intra-state declration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateDeclarationVisitor.CheckMachineStateModifierSet(Microsoft.PSharp.LanguageServices.Syntax.ModifierSet)">
            <summary>
            Checks the modifier set for errors.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateEntryDeclarationVisitor">
            <summary>
            The P# state entry declaration parsing visitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateEntryDeclarationVisitor.#ctor(Microsoft.PSharp.LanguageServices.Parsing.TokenStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateEntryDeclarationVisitor"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateEntryDeclarationVisitor.Visit(Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration,System.Boolean)">
            <summary>
            Visits the syntax node.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateExitDeclarationVisitor">
            <summary>
            The P# state exit declaration parsing visitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateExitDeclarationVisitor.#ctor(Microsoft.PSharp.LanguageServices.Parsing.TokenStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateExitDeclarationVisitor"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateExitDeclarationVisitor.Visit(Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration,System.Boolean)">
            <summary>
            Visits the syntax node.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateGroupDeclarationVisitor">
            <summary>
            The P# state group declaration parsing visitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateGroupDeclarationVisitor.#ctor(Microsoft.PSharp.LanguageServices.Parsing.TokenStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateGroupDeclarationVisitor"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateGroupDeclarationVisitor.Visit(Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration,Microsoft.PSharp.LanguageServices.Syntax.StateGroupDeclaration,Microsoft.PSharp.LanguageServices.Syntax.ModifierSet)">
            <summary>
            Visits the syntax node.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateGroupDeclarationVisitor.VisitNextPSharpIntraGroupDeclaration(Microsoft.PSharp.LanguageServices.Syntax.StateGroupDeclaration)">
            <summary>
            Visits the next intra-group declaration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateGroupDeclarationVisitor.VisitGroupLevelDeclaration(Microsoft.PSharp.LanguageServices.Syntax.StateGroupDeclaration)">
            <summary>
            Visits a group level declaration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.StateGroupDeclarationVisitor.CheckStateGroupModifierSet(Microsoft.PSharp.LanguageServices.Syntax.ModifierSet)">
            <summary>
            Checks the modifier set for errors.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.ArgumentsListVisitor">
            <summary>
            The P# argument list parsing visitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.ArgumentsListVisitor.#ctor(Microsoft.PSharp.LanguageServices.Parsing.TokenStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.ArgumentsListVisitor"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.ArgumentsListVisitor.Visit(Microsoft.PSharp.LanguageServices.Syntax.ExpressionNode)">
            <summary>
            Visits the syntax node.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.AttributeListVisitor">
            <summary>
            The P# attribute list parsing visitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.AttributeListVisitor.#ctor(Microsoft.PSharp.LanguageServices.Parsing.TokenStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.AttributeListVisitor"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.AttributeListVisitor.Visit">
            <summary>
            Visits the syntax node.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.NameVisitor">
            <summary>
            The P# name parsing visitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.NameVisitor.#ctor(Microsoft.PSharp.LanguageServices.Parsing.TokenStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.NameVisitor"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.NameVisitor.ConsumeQualifiedName(Microsoft.PSharp.LanguageServices.Parsing.TokenType)">
            <summary>
            Consumes a qualified name from the tokenstream.
            QN = Identifier || Identifier.QN
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.NameVisitor.ConsumeQualifiedEventName(Microsoft.PSharp.LanguageServices.Parsing.TokenType)">
            <summary>
            Consumes a qualified event name from the tokenstream.
            QEN = halt || default || * || QN
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.NameVisitor.ConsumeMultipleNames(Microsoft.PSharp.LanguageServices.Parsing.TokenType,System.Func{Microsoft.PSharp.LanguageServices.Parsing.TokenType,System.Collections.Generic.List{Microsoft.PSharp.LanguageServices.Parsing.Token}})">
            <summary>
            Consumes comma-separated names from the tokenstream.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.NameVisitor.ConsumeGenericName(Microsoft.PSharp.LanguageServices.Parsing.TokenType)">
            <summary>
            Consumes a generic name.
            GN = QN || QN LBR matched RBR
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.NameVisitor.ConsumeTemplateParams">
            <summary>
            Consumes template parameters: LBR matched RBR.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.NameVisitor.ConsumeGenericEventName(Microsoft.PSharp.LanguageServices.Parsing.TokenType)">
            <summary>
            Consumes a generic event name.
            GEN = halt || default || * || GEN
            </summary>
            <param name="replacement">TokenType</param>
            <returns>Tokens</returns>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.ModifierVisitor">
            <summary>
            The P# modifier parsing visitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.ModifierVisitor.#ctor(Microsoft.PSharp.LanguageServices.Parsing.TokenStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.ModifierVisitor"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.ModifierVisitor.Visit(Microsoft.PSharp.LanguageServices.Syntax.ModifierSet)">
            <summary>
            Visits the syntax node.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.ModifierVisitor.CheckModifierSet(Microsoft.PSharp.LanguageServices.Syntax.ModifierSet)">
            <summary>
            Checks the modifier set for errors.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.TypeIdentifierVisitor">
            <summary>
            The P# type identifier parsing visitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.TypeIdentifierVisitor.#ctor(Microsoft.PSharp.LanguageServices.Parsing.TokenStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Parsing.Syntax.TypeIdentifierVisitor"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Parsing.Syntax.TypeIdentifierVisitor.Visit(Microsoft.PSharp.LanguageServices.Parsing.TextUnit@)">
            <summary>
            Visits the text unit.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.AbstractPSharpProgram">
            <summary>
            An abstract P# program.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.AbstractPSharpProgram.Project">
            <summary>
            The project that this program belongs to.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.AbstractPSharpProgram.SyntaxTree">
            <summary>
            The syntax tree.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.AbstractPSharpProgram.#ctor(Microsoft.PSharp.LanguageServices.PSharpProject,Microsoft.CodeAnalysis.SyntaxTree)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.AbstractPSharpProgram"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.AbstractPSharpProgram.Rewrite">
            <summary>
            Rewrites the P# program to the C#-IR.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.AbstractPSharpProgram.GetProject">
            <summary>
            Returns the project of the P# program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.AbstractPSharpProgram.GetSyntaxTree">
            <summary>
            Returns the syntax tree of the P# program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.AbstractPSharpProgram.UpdateSyntaxTree(System.String)">
            <summary>
            Updates the syntax tree of the P# program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.AbstractPSharpProgram.CreateLibrary(System.String)">
            <summary>
            Creates a new library using syntax node.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.CSharpProgram">
            <summary>
            A C# program.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.CSharpProgram.EventIdentifiers">
            <summary>
            List of event identifiers.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.CSharpProgram.MachineIdentifiers">
            <summary>
            List of machine identifiers.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.CSharpProgram.#ctor(Microsoft.PSharp.LanguageServices.PSharpProject,Microsoft.CodeAnalysis.SyntaxTree)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.CSharpProgram"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.CSharpProgram.Rewrite">
            <summary>
            Rewrites the P# program to the C#-IR.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.CSharpProgram.RewriteStatements">
            <summary>
            Rewrites the P# statements to C#.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.CSharpProgram.PerformCustomRewriting">
            <summary>
            Performs custom rewriting.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.CSharpProgram.FindCustomRewritingPasses(System.Reflection.Assembly,System.Type)">
            <summary>
            Finds the custom rewriting passes with the specified attribute.
            Returns null if no such method is found.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.CSharpProgram.FindDependenciesOfPass(System.Type)">
            <summary>
            Finds the dependencies of the specified pass.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.IPSharpProgram">
            <summary>
            Interface to a P# program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.IPSharpProgram.Rewrite">
            <summary>
            Rewrites the P# program to the C#-IR.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.IPSharpProgram.GetProject">
            <summary>
            Returns the project of the P# program.
            </summary>
            <returns>PSharpProject</returns>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.IPSharpProgram.GetSyntaxTree">
            <summary>
            Returns the syntax tree of the P# program.
            </summary>
            <returns>SyntaxTree</returns>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.IPSharpProgram.UpdateSyntaxTree(System.String)">
            <summary>
            Updates the syntax tree of the P# program.
            </summary>
            <param name="text">Text</param>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.PSharpProgram">
            <summary>
            A P# program.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.PSharpProgram.UsingDeclarations">
            <summary>
            List of using declarations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.PSharpProgram.NamespaceDeclarations">
            <summary>
            List of namespace declarations.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.PSharpProgram.#ctor(Microsoft.PSharp.LanguageServices.PSharpProject,Microsoft.CodeAnalysis.SyntaxTree)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.PSharpProgram"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.PSharpProgram.Rewrite">
            <summary>
            Rewrites the P# program to the C#-IR.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.PSharpProgram.RewriteTypes">
            <summary>
            Rewrites the P# types to C#.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.PSharpProgram.RewriteStatements">
            <summary>
            Rewrites the P# statements to C#.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.PSharpProgram.RewriteExpressions">
            <summary>
            Rewrites the P# expressions to C#.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.PSharpProgram.InsertLibraries">
            <summary>
            Inserts the P# libraries.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.PSharpProgram.GetResolvedRewrittenQualifiedMethods">
            <summary>
            Resolves and returns the rewritten qualified methods of this program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.PSharpProgram.BasicTypeChecking">
            <summary>
            Perform basic type checking of the P# program.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.PSharpProject">
            <summary>
            A P# project.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.PSharpProject.CompilationContext">
            <summary>
            The compilation context.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.PSharpProject.Name">
            <summary>
            The P# project name.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.PSharpProject.PSharpPrograms">
            <summary>
            List of P# programs in the project.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.PSharpProject.CSharpPrograms">
            <summary>
            List of C# programs in the project.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.PSharpProject.ProgramMap">
            <summary>
            Map from P# programs to syntax trees.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.PSharpProject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.PSharpProject"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.PSharpProject.#ctor(Microsoft.PSharp.LanguageServices.Compilation.CompilationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.PSharpProject"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.PSharpProject.#ctor(Microsoft.PSharp.LanguageServices.Compilation.CompilationContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.PSharpProject"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.PSharpProject.Parse(Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions)">
            <summary>
            Parses the project.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.PSharpProject.Rewrite">
            <summary>
            Rewrites the P# project to the C#-IR.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.PSharpProject.GetCompilation">
            <summary>
            Returns the compilation of the project.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.PSharpProject.IsMachineType(Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            Is the identifier a machine type.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.PSharpProject.ParsePSharpSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions)">
            <summary>
            Parses a P# syntax tree to C#.
            th
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.PSharpProject.ParseCSharpSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.PSharp.LanguageServices.Parsing.ParsingOptions)">
            <summary>
            Parses a C# syntax tree to C#.
            th
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Querying">
            <summary>
            Class implementing common P# language queries.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Querying.IsMachine(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Returns true if the given class declaration is a P# machine.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Querying.IsMachineState(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Returns true if the given class declaration is a P# machine state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Querying.IsMachineStateGroup(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Returns true if the given class declaration is a P# machine state group.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Querying.IsEventDeclaration(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Returns true if the given class declaration is a P# event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Querying.IsMonitor(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Returns true if the given class declaration is a P# monitor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Querying.IsMonitorState(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Returns true if the given class declaration is a P# monitor state.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Querying.GetCalleeOfInvocation(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax)">
            <summary>
            Returns the callee of the given call expression.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.CustomCSharpRewritingPassAttribute">
            <summary>
            Attribute for custom C# rewriting pass.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.RewritingPassDependencyAttribute">
            <summary>
            Attribute for custom C# rewriting pass.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.RewritingPassDependencyAttribute.Dependencies">
            <summary>
            Pass dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.RewritingPassDependencyAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.RewritingPassDependencyAttribute"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.CSharpRewriter">
            <summary>
            An abstract C# program rewriter.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.CSharpRewriter.Program">
            <summary>
            The P# program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.CSharpRewriter.Rewrite">
            <summary>
            Rewrites the program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.CSharpRewriter.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.CSharpRewriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.CSharpRewriter.UpdateSyntaxTree(System.String)">
            <summary>
            Updates the syntax tree.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.CSharpRewriter.IsExpectedExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.String,Microsoft.CodeAnalysis.SemanticModel)">
            <summary>
            Returns true if the given expression is the expected one.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.CSharpRewriter.IsExpectedSymbol(Microsoft.CodeAnalysis.ISymbol,System.String)">
            <summary>
            Returns true if the given symbol is the expected one.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.GotoStateRewriter">
            <summary>
            The goto state statement rewriter.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.GotoStateRewriter.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.GotoStateRewriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.GotoStateRewriter.Rewrite">
            <summary>
            Rewrites the program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.GotoStateRewriter.RewriteStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax)">
            <summary>
            Rewrites the raise statement.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.PopRewriter">
            <summary>
            The pop statement rewriter.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.PopRewriter.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.PopRewriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.PopRewriter.Rewrite">
            <summary>
            Rewrites the program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.PopRewriter.RewriteStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax)">
            <summary>
            Rewrites the pop statement.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.RaiseRewriter">
            <summary>
            The raise statement rewriter.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.RaiseRewriter.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.RaiseRewriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.RaiseRewriter.Rewrite">
            <summary>
            Rewrites the program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.CSharp.RaiseRewriter.RewriteStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax)">
            <summary>
            Rewrites the raise statement.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.CurrentStateRewriter">
            <summary>
            The state expression rewriter.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.CurrentStateRewriter.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.CurrentStateRewriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.CurrentStateRewriter.Rewrite">
            <summary>
            Rewrites the trigger expressions in the program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.CurrentStateRewriter.RewriteExpression(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)">
            <summary>
            Rewrites the expression with a trigger expression.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.RandomChoiceRewriter">
            <summary>
            The random choice expression rewriter.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.RandomChoiceRewriter.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.RandomChoiceRewriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.RandomChoiceRewriter.Rewrite">
            <summary>
            Rewrites the random choice expressions in the program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.RandomChoiceRewriter.RewriteExpression">
            <summary>
            Rewrites the expression with a random choice expression.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.ThisRewriter">
            <summary>
            The this expression rewriter.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.ThisRewriter.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.ThisRewriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.ThisRewriter.Rewrite">
            <summary>
            Rewrites the this expressions in the program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.ThisRewriter.RewriteExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax)">
            <summary>
            Rewrites the expression with a this expression.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.TriggerRewriter">
            <summary>
            The trigger expression rewriter.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.TriggerRewriter.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.TriggerRewriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.TriggerRewriter.Rewrite">
            <summary>
            Rewrites the trigger expressions in the program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.TriggerRewriter.RewriteExpression(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)">
            <summary>
            Rewrites the expression with a trigger expression.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.PSharpRewriter">
            <summary>
            An abstract P# program rewriter.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.PSharpRewriter.Program">
            <summary>
            The P# program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.PSharpRewriter.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.PSharpRewriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.PSharpRewriter.GetNextStatement(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Returns the next statement.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.PSharpRewriter.IsMachineField(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            True if the given syntax node is a machine field.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.PSharpRewriter.IsMachineMethod(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            True if the given syntax node is a machine method.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.PSharpRewriter.TryGetParentMachine(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration@)">
            <summary>
            Tries to return the parent machine identifier, if any.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.PSharpRewriter.UpdateSyntaxTree(System.String)">
            <summary>
            Updates the syntax tree.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.AssertRewriter">
            <summary>
            The assert statement rewriter.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.AssertRewriter.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.AssertRewriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.AssertRewriter.Rewrite">
            <summary>
            Rewrites the assert statements in the program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.AssertRewriter.RewriteStatement(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax)">
            <summary>
            Rewrites the statement with a assert statement.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.CreateMachineRewriter">
            <summary>
            The create machine expression rewriter.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.CreateMachineRewriter.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.CreateMachineRewriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.CreateMachineRewriter.Rewrite">
            <summary>
            Rewrites the create machine expressions in the program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.CreateMachineRewriter.RewriteStatement(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax)">
            <summary>
            Rewrites the expression with a create machine expression.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.CreateRemoteMachineRewriter">
            <summary>
            The create remote machine expression rewriter.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.CreateRemoteMachineRewriter.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.CreateRemoteMachineRewriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.CreateRemoteMachineRewriter.Rewrite">
            <summary>
            Rewrites the create remote machine expressions in the program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.CreateRemoteMachineRewriter.RewriteStatement(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax)">
            <summary>
            Rewrites the expression with a create remote machine expression.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.GenericTypeRewriter">
            <summary>
            Rewrite typeof statements to fully qualify state names.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.GenericTypeRewriter.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.GenericTypeRewriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.GenericTypeRewriter.Rewrite(System.Collections.Generic.HashSet{Microsoft.PSharp.LanguageServices.Syntax.QualifiedMethod})">
            <summary>
            Rewrites the typeof statements in the program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.GenericTypeRewriter.RewriteStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax)">
            <summary>
            Rewrites the type(s) to qualified names inside a list of generic type arguments.
            Primarily intended for the generic method Goto&lt;StateType&gt;().
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.GotoStateRewriter">
            <summary>
            The goto state statement rewriter.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.GotoStateRewriter.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.GotoStateRewriter"/> class.
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.GotoStateRewriter.Rewrite">
            <summary>
            Rewrites the goto state statements in the program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.GotoStateRewriter.RewriteStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax)">
            <summary>
            Rewrites the jump(StateType) statement with a goto&lt;StateType&gt;() statement.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.MonitorRewriter">
            <summary>
            The monitor statement rewriter.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.MonitorRewriter.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.MonitorRewriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.MonitorRewriter.Rewrite">
            <summary>
            Rewrites the monitor statements in the program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.MonitorRewriter.RewriteStatement(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax)">
            <summary>
            Rewrites the statement with a monitor statement.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.PopRewriter">
            <summary>
            The pop statement rewriter.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.PopRewriter.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.PopRewriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.PopRewriter.Rewrite">
            <summary>
            Rewrites the pop statements in the program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.PopRewriter.RewriteStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax)">
            <summary>
            Rewrites the statement with a pop statement.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.PushStateRewriter">
            <summary>
            The push state statement rewriter.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.PushStateRewriter.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.PushStateRewriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.PushStateRewriter.Rewrite">
            <summary>
            Rewrites the push state statements in the program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.PushStateRewriter.RewriteStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax)">
            <summary>
            Rewrites the push(StateType) statement with a push&lt;StateType&gt;() statement.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.RaiseRewriter">
            <summary>
            The raise statement rewriter.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.RaiseRewriter.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.RaiseRewriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.RaiseRewriter.Rewrite">
            <summary>
            Rewrites the raise statements in the program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.RaiseRewriter.RewriteStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax)">
            <summary>
            Rewrites the statement with a raise statement.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.SendRewriter">
            <summary>
            The send statement rewriter.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.SendRewriter.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.SendRewriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.SendRewriter.Rewrite">
            <summary>
            Rewrites the send statements in the program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.SendRewriter.RewriteStatement(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax)">
            <summary>
            Rewrites the statement with a send statement.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.TypeNameQualifier">
            <summary>
            Utility class to qualify type names, for typeof(Type) or Goto&lt;Type&gt;().
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.TypeNameQualifier.CurrentAllQualifiedStateNames">
            <summary>
            Set of all qualified state names in the current machine.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.TypeNameQualifier.CurrentQualifiedStateName">
            <summary>
            Qualified state name corresponding to the procedure
            currently being rewritten.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.TypeNameQualifier.RewrittenQualifiedMethods">
            <summary>
            Set of rewritten qualified methods.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.TypeNameQualifier.GetQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.Boolean@)">
            <summary>
            Returns a fully-qualified name for the type inside the syntax node.
            </summary>
            <param name="typeUsed">Identifier of the type to rewrite</param>
            <param name="succeeded">Whether the fully qualified name was found</param>
            <returns>The fully qualified name</returns>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.TypeNameQualifier.GetFullyQualifiedStateName(System.String)">
            <summary>
            Given a partially-qualified state name, return the
            fully qualified state name.
            </summary>
            <param name="state">Partially qualified state name</param>
            <returns>Fully qualified state name</returns>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.TypeNameQualifier.ToTokens(System.String)">
            <summary>
            Tokenizes a qualified name.
            </summary>
            <param name="state">Qualified name</param>
            <returns>Tokenized name</returns>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.TypeNameQualifier.FromTokens(System.Collections.Generic.List{System.String})">
            <summary>
            Collapses a tokenized qualified name.
            </summary>
            <param name="state">Tokenized qualified name</param>
            <returns>Qualified name</returns>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.TypeofRewriter">
            <summary>
            Rewrite typeof statements to fully qualify state names.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.TypeofRewriter.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.TypeofRewriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.TypeofRewriter.Rewrite(System.Collections.Generic.HashSet{Microsoft.PSharp.LanguageServices.Syntax.QualifiedMethod})">
            <summary>
            Rewrites the typeof statements in the program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.TypeofRewriter.RewriteStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax)">
            <summary>
            Rewrites the type inside typeof.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.HaltEventRewriter">
            <summary>
            The halt event type rewriter.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.HaltEventRewriter.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.HaltEventRewriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.HaltEventRewriter.Rewrite">
            <summary>
            Rewrites the halt event types in the program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.HaltEventRewriter.RewriteType(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)">
            <summary>
            Rewrites the type with a halt event type.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.MachineTypeRewriter">
            <summary>
            The machine type rewriter.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.MachineTypeRewriter.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.MachineTypeRewriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.MachineTypeRewriter.Rewrite">
            <summary>
            Rewrites the machine types in the program.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Rewriting.PSharp.MachineTypeRewriter.RewriteType(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)">
            <summary>
            Rewrites the type with a machine type.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Syntax.BlockSyntax">
            <summary>
            Block syntax node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.BlockSyntax.Machine">
            <summary>
            The machine parent node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.BlockSyntax.State">
            <summary>
            The state parent node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.BlockSyntax.Block">
            <summary>
            The statement block.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.BlockSyntax.OpenBraceToken">
            <summary>
            The open brace token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.BlockSyntax.CloseBraceToken">
            <summary>
            The close brace token.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.BlockSyntax.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram,Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration,Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Syntax.BlockSyntax"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.BlockSyntax.Rewrite(System.Int32)">
            <summary>
            Rewrites the syntax node declaration to the intermediate C#
            representation.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Syntax.AnonymousActionHandler">
            <summary>
            Anonymous action handler syntax node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.AnonymousActionHandler.BlockSyntax">
            <summary>
            The block containing the handler statements.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.AnonymousActionHandler.IsAsync">
            <summary>
            Indicates whether the generated method should be 'async Task'.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Syntax.EntryDeclaration">
            <summary>
            Entry declaration syntax node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.EntryDeclaration.State">
            <summary>
            The state parent node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.EntryDeclaration.EntryKeyword">
            <summary>
            The entry keyword.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.EntryDeclaration.StatementBlock">
            <summary>
            The statement block.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.EntryDeclaration.IsAsync">
            <summary>
            True if the entry action is async.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.EntryDeclaration.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram,Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Syntax.EntryDeclaration"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.EntryDeclaration.Rewrite(System.Int32)">
            <summary>
            Rewrites the syntax node declaration to the intermediate C#
            representation.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Syntax.EventDeclaration">
            <summary>
            Event declaration syntax node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.EventDeclaration.Machine">
            <summary>
            The machine parent node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.EventDeclaration.AccessModifier">
            <summary>
            The access modifier.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.EventDeclaration.EventKeyword">
            <summary>
            The event keyword.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.EventDeclaration.Identifier">
            <summary>
            The identifier token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.EventDeclaration.GenericType">
            <summary>
            The generic type of the event.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.EventDeclaration.LeftParenthesis">
            <summary>
            The left parenthesis token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.EventDeclaration.PayloadTypes">
            <summary>
            The payload types.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.EventDeclaration.PayloadIdentifiers">
            <summary>
            The payload identifiers.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.EventDeclaration.RightParenthesis">
            <summary>
            The right parenthesis token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.EventDeclaration.AssertKeyword">
            <summary>
            The assert keyword.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.EventDeclaration.AssumeKeyword">
            <summary>
            The assume keyword.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.EventDeclaration.AssertValue">
            <summary>
            The assert value.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.EventDeclaration.AssumeValue">
            <summary>
            The assume value.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.EventDeclaration.SemicolonToken">
            <summary>
            The semicolon token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.EventDeclaration.BaseClassDecl">
            <summary>
            The Event subclass that this subclass inherits from, if any.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.EventDeclaration.IsExtern">
            <summary>
            If true, this is an extern event declaration (not fully defined)
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.EventDeclaration.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram,Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration,Microsoft.PSharp.LanguageServices.Syntax.ModifierSet)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Syntax.EventDeclaration"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.EventDeclaration.Rewrite(System.Int32)">
            <summary>
            Rewrites the syntax node declaration to the intermediate C#
            representation.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.EventDeclaration.GetRewrittenEventDeclaration(System.Int32)">
            <summary>
            Returns the rewritten event declaration.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.EventDeclarations.Declarations">
            <summary>
            Must keep these in declaration order.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.EventDeclarations.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Syntax.EventDeclarations"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.EventDeclarations.EnumerateInheritance(Microsoft.PSharp.LanguageServices.Syntax.EventDeclaration)">
            <summary>
            Returns all event decls from base to most fully derived (including <paramref name="node"/>).
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Syntax.ExitDeclaration">
            <summary>
            Exit declaration syntax node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.ExitDeclaration.State">
            <summary>
            The state parent node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.ExitDeclaration.ExitKeyword">
            <summary>
            The exit keyword.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.ExitDeclaration.StatementBlock">
            <summary>
            The statement block.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.ExitDeclaration.IsAsync">
            <summary>
            True if the exit action is async.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.ExitDeclaration.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram,Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Syntax.ExitDeclaration"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.ExitDeclaration.Rewrite(System.Int32)">
            <summary>
            Rewrites the syntax node declaration to the intermediate C#
            representation.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Syntax.FieldDeclaration">
            <summary>
            Field declaration syntax node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.FieldDeclaration.Machine">
            <summary>
            The machine parent node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.FieldDeclaration.AccessModifier">
            <summary>
            The access modifier.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.FieldDeclaration.TypeIdentifier">
            <summary>
            The type identifier.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.FieldDeclaration.Identifier">
            <summary>
            The identifier token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.FieldDeclaration.SemicolonToken">
            <summary>
            The semicolon token.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.FieldDeclaration.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram,Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration,Microsoft.PSharp.LanguageServices.Syntax.ModifierSet)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Syntax.FieldDeclaration"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.FieldDeclaration.Rewrite(System.Int32)">
            <summary>
            Rewrites the syntax node declaration to the intermediate C#
            representation.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.FieldDeclaration.GetRewrittenFieldDeclaration">
            <summary>
            Returns the rewritten field declaration.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration">
            <summary>
            Machine declaration syntax node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.Namespace">
            <summary>
            The namespace parent node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.IsMonitor">
            <summary>
            True if the machine is a monitor.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.AccessModifier">
            <summary>
            The access modifier.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.InheritanceModifier">
            <summary>
            The inheritance modifier.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.IsPartial">
            <summary>
            True if the machine is partial.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.MachineKeyword">
            <summary>
            The machine keyword.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.Identifier">
            <summary>
            The identifier token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.TemplateParameters">
            <summary>
            The template parameters
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.ColonToken">
            <summary>
            The colon token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.BaseNameTokens">
            <summary>
            The base name tokens.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.LeftCurlyBracketToken">
            <summary>
            The left curly bracket token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.EventDeclarations">
            <summary>
            List of event declarations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.FieldDeclarations">
            <summary>
            List of field declarations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.StateDeclarations">
            <summary>
            List of state declarations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.StateGroupDeclarations">
            <summary>
            List of state group declarations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.MethodDeclarations">
            <summary>
            List of method declarations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.RightCurlyBracketToken">
            <summary>
            The right curly bracket token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.RewrittenMethods">
            <summary>
            Set of all rewritten method.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram,Microsoft.PSharp.LanguageServices.Syntax.NamespaceDeclaration,System.Boolean,Microsoft.PSharp.LanguageServices.Syntax.ModifierSet)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.Rewrite(System.Int32)">
            <summary>
            Rewrites the syntax node declaration to the intermediate C#
            representation.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.GetAllStateDeclarations">
            <summary>
            Returns all state declarations inside this machine (recursively).
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.CheckDeclaration">
            <summary>
            Sanity checking: no duplicate states and groups.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.GetRewrittenMachineDeclaration(System.Int32,System.String@)">
            <summary>
            Returns the rewritten machine declaration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.GetRewrittenStateOnEntryAndExitActions(System.Int32,System.String@)">
            <summary>
            Returns the rewritten state on-entry and on-exit actions.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.GetRewrittenWithActions(System.Int32,System.String@)">
            <summary>
            Returns the rewritten with-actions.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration.PopulateRewrittenMethodsWithStateQualifiedNames">
            <summary>
            Populated the set of rewritten methods with the group.state-qualified name of
            the states they came from.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Syntax.MethodDeclaration">
            <summary>
            Method declaration syntax node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MethodDeclaration.Machine">
            <summary>
            The machine parent node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MethodDeclaration.AccessModifier">
            <summary>
            The access modifier.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MethodDeclaration.InheritanceModifier">
            <summary>
            The inheritance modifier.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MethodDeclaration.IsAsync">
            <summary>
            Is the method async.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MethodDeclaration.IsPartial">
            <summary>
            Is the method partial.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MethodDeclaration.TypeIdentifier">
            <summary>
            The type identifier.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MethodDeclaration.Identifier">
            <summary>
            The identifier token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MethodDeclaration.LeftParenthesisToken">
            <summary>
            The left parenthesis token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MethodDeclaration.Parameters">
            <summary>
            List of parameter tokens.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MethodDeclaration.RightParenthesisToken">
            <summary>
            The right parenthesis token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MethodDeclaration.SemicolonToken">
            <summary>
            The semicolon token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.MethodDeclaration.StatementBlock">
            <summary>
            The statement block.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.MethodDeclaration.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram,Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Syntax.MethodDeclaration"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.MethodDeclaration.Rewrite(System.Int32)">
            <summary>
            Rewrites the syntax node declaration to the intermediate C#
            representation.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.MethodDeclaration.GetRewrittenMethodDeclaration(System.Int32)">
            <summary>
            Returns the rewritten method declaration.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Syntax.NamespaceDeclaration">
            <summary>
            Namespace declaration syntax node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.NamespaceDeclaration.NamespaceKeyword">
            <summary>
            The namespace keyword.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.NamespaceDeclaration.IdentifierTokens">
            <summary>
            The identifier tokens.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.NamespaceDeclaration.LeftCurlyBracketToken">
            <summary>
            The left curly bracket token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.NamespaceDeclaration.EventDeclarations">
            <summary>
            List of event declarations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.NamespaceDeclaration.MachineDeclarations">
            <summary>
            List of machine declarations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.NamespaceDeclaration.RightCurlyBracketToken">
            <summary>
            The right curly bracket token.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.LanguageServices.Syntax.NamespaceDeclaration.QualifiedName">
            <summary>
            Qualified name of the namespace.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.NamespaceDeclaration.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Syntax.NamespaceDeclaration"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.NamespaceDeclaration.Rewrite(System.Int32)">
            <summary>
            Rewrites the syntax node declaration to the intermediate C#
            representation.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.NamespaceDeclaration.GetRewrittenNamespaceDeclaration(System.String@)">
            <summary>
            Returns the rewritten namespace declaration.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration">
            <summary>
            State declaration syntax node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.Machine">
            <summary>
            The machine parent node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.Group">
            <summary>
            Parent state group (if any).
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.AccessModifier">
            <summary>
            The access modifier.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.IsStart">
            <summary>
            True if the state is the start state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.IsHot">
            <summary>
            True if the state is a hot state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.IsCold">
            <summary>
            True if the state is a cold state.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.StateKeyword">
            <summary>
            The state keyword.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.Identifier">
            <summary>
            The identifier token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.LeftCurlyBracketToken">
            <summary>
            The left curly bracket token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.IsAbstract">
            <summary>
            True if the machine is abstract.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.BaseStateToken">
            <summary>
            The token identifying the base state this state inherits from, if any.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.EntryDeclaration">
            <summary>
            Entry declaration.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.ExitDeclaration">
            <summary>
            Exit declaration.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.GotoStateTransitions">
            <summary>
            Dictionary containing goto state transitions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.PushStateTransitions">
            <summary>
            Dictionary containing push state transitions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.ActionBindings">
            <summary>
            Dictionary containing actions bindings.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.TransitionsOnExitActions">
            <summary>
            Dictionary containing transitions on exit actions.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.ActionHandlers">
            <summary>
            Dictionary containing actions handlers.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.DeferredEvents">
            <summary>
            Set of deferred events.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.IgnoredEvents">
            <summary>
            Set of ignored events.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.ResolvedEventIdentifierTokens">
            <summary>
            Map from resolved event identifier tokens to their
            list of tokens and type id.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.RightCurlyBracketToken">
            <summary>
            The right curly bracket token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.RewrittenMethods">
            <summary>
            Set of all rewritten method.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.isNameofSupported">
            <summary>
            Whether to use nameof or a quoted string (based on C# version).
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram,Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration,Microsoft.PSharp.LanguageServices.Syntax.StateGroupDeclaration,Microsoft.PSharp.LanguageServices.Syntax.ModifierSet)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.AddGotoStateTransition(Microsoft.PSharp.LanguageServices.Parsing.Token,System.Collections.Generic.List{Microsoft.PSharp.LanguageServices.Parsing.Token},System.Collections.Generic.List{Microsoft.PSharp.LanguageServices.Parsing.Token},Microsoft.PSharp.LanguageServices.Syntax.AnonymousActionHandler)">
            <summary>
            Adds a goto state transition.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.AddPushStateTransition(Microsoft.PSharp.LanguageServices.Parsing.Token,System.Collections.Generic.List{Microsoft.PSharp.LanguageServices.Parsing.Token},System.Collections.Generic.List{Microsoft.PSharp.LanguageServices.Parsing.Token})">
            <summary>
            Adds a push state transition.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.AddActionBinding(Microsoft.PSharp.LanguageServices.Parsing.Token,System.Collections.Generic.List{Microsoft.PSharp.LanguageServices.Parsing.Token},Microsoft.PSharp.LanguageServices.Syntax.AnonymousActionHandler)">
            <summary>
            Adds an action binding.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.AddActionBinding(Microsoft.PSharp.LanguageServices.Parsing.Token,System.Collections.Generic.List{Microsoft.PSharp.LanguageServices.Parsing.Token},Microsoft.PSharp.LanguageServices.Parsing.Token)">
            <summary>
            Adds an action binding.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.AddDeferredEvent(Microsoft.PSharp.LanguageServices.Parsing.Token,System.Collections.Generic.List{Microsoft.PSharp.LanguageServices.Parsing.Token})">
            <summary>
            Adds a deferred event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.AddIgnoredEvent(Microsoft.PSharp.LanguageServices.Parsing.Token,System.Collections.Generic.List{Microsoft.PSharp.LanguageServices.Parsing.Token})">
            <summary>
            Adds an ignored event.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.Rewrite(System.Int32)">
            <summary>
            Rewrites the syntax node declaration to the intermediate C#
            representation.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.GetFullyQualifiedName(System.Char)">
            <summary>
            Returns the fully qualified state name.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.GetResolvedEventHandlerName(Microsoft.PSharp.LanguageServices.Parsing.Token)">
            <summary>
            Returns the resolved event handler name that corresponds to the
            specified event identifier.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.GetRewrittenStateDeclaration(System.Int32)">
            <summary>
            Returns the rewritten state declaration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.InstrumentOnEntryAction(System.String)">
            <summary>
            Instruments the on entry action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.InstrumentOnExitAction(System.String)">
            <summary>
            Instruments the on exit action.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.InstrumentGotoStateTransitions(System.String)">
            <summary>
            Instruments the goto state transitions.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.InstrumentPushStateTransitions(System.String)">
            <summary>
            Instruments the push state transitions.
            </summary>
            <returns>Text</returns>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.InstrumentActionsBindings(System.String)">
            <summary>
            Instruments the action bindings.
            </summary>
            <returns>Text</returns>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.InstrumentIgnoredEvents(System.String)">
            <summary>
            Instruments the ignored events.
            </summary>
            <returns>Text</returns>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.StateDeclaration.InstrumentDeferredEvents(System.String)">
            <summary>
            Instruments the deferred events.
            </summary>
            <returns>Text</returns>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Syntax.StateGroupDeclaration">
            <summary>
            State declaration syntax node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateGroupDeclaration.Machine">
            <summary>
            The machine parent node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateGroupDeclaration.Group">
            <summary>
            Parent group declaration node (if any).
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateGroupDeclaration.StateGroupKeyword">
            <summary>
            The state group keyword.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateGroupDeclaration.AccessModifier">
            <summary>
            The access modifier.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateGroupDeclaration.Identifier">
            <summary>
            The identifier token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateGroupDeclaration.LeftCurlyBracketToken">
            <summary>
            The left curly bracket token.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateGroupDeclaration.StateDeclarations">
            <summary>
            Nested state declarations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateGroupDeclaration.StateGroupDeclarations">
            <summary>
            Nested state group declarations.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.StateGroupDeclaration.RightCurlyBracketToken">
            <summary>
            The right curly bracket token.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.StateGroupDeclaration.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram,Microsoft.PSharp.LanguageServices.Syntax.MachineDeclaration,Microsoft.PSharp.LanguageServices.Syntax.StateGroupDeclaration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Syntax.StateGroupDeclaration"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.StateGroupDeclaration.GetAllStateDeclarations">
            <summary>
            Returns all state declarations inside this group (recursively).
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.StateGroupDeclaration.Rewrite(System.Int32)">
            <summary>
            Rewrites the syntax node declaration to the intermediate C#
            representation.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.StateGroupDeclaration.CheckDeclaration">
            <summary>
            Sanity checking: no duplicate states and groups.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.StateGroupDeclaration.GetRewrittenStateGroupDeclaration(System.Int32)">
            <summary>
            Returns the rewritten state group declaration.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Syntax.UsingDeclaration">
            <summary>
            Using declaration syntax node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.UsingDeclaration.UsingKeyword">
            <summary>
            The using keyword.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.UsingDeclaration.IdentifierTokens">
            <summary>
            The identifier tokens.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.UsingDeclaration.SemicolonToken">
            <summary>
            The semicolon token.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.UsingDeclaration.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Syntax.UsingDeclaration"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.UsingDeclaration.Rewrite(System.Int32)">
            <summary>
            Rewrites the syntax node declaration to the intermediate C#
            representation.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.UsingDeclaration.GetRewrittenUsingDeclaration">
            <summary>
            Returns the rewritten using declaration.
            </summary>
            <returns>Text</returns>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Syntax.ExpressionNode">
            <summary>
            Expression node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.ExpressionNode.Parent">
            <summary>
            The block node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.ExpressionNode.StmtTokens">
            <summary>
            The statement tokens.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.ExpressionNode.RewrittenStmtTokens">
            <summary>
            The rewritten statement tokens.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.ExpressionNode.Index">
            <summary>
            The current index.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.ExpressionNode.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram,Microsoft.PSharp.LanguageServices.Syntax.BlockSyntax)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Syntax.ExpressionNode"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.ExpressionNode.Rewrite(System.Int32)">
            <summary>
            Rewrites the syntax node declaration to the intermediate C# representation.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.ExpressionNode.RewriteMachineType">
            <summary>
            Rewrites the machine type.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.ExpressionNode.RewriteNonDeterministicChoice">
            <summary>
            Rewrites the non-deterministic choice.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.ExpressionNode.RewriteNextToken">
            <summary>
            Rewrites the next token.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.ExpressionNode.RewriteThis">
            <summary>
            Rewrites the this keyword.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.ExpressionNode.RewriteTrigger">
            <summary>
            Rewrites the trigger keyword.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.ExpressionNode.RewriteIdentifier">
            <summary>
            Rewrites the identifier.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.ExpressionNode.SkipWhiteSpaceTokens">
            <summary>
            Skips whitespace tokens.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Syntax.AccessModifier">
            <summary>
            P# access modifiers.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Syntax.InheritanceModifier">
            <summary>
            P# inheritance modifiers.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Syntax.ModifierSet">
            <summary>
            The set of modifiers for a P# declaration.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.ModifierSet.AccessModifier">
            <summary>
            The access modifier.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.ModifierSet.InheritanceModifier">
            <summary>
            The inheritance modifier.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.ModifierSet.IsAsync">
            <summary>
            The async modifier.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.ModifierSet.IsPartial">
            <summary>
            The partial modifier.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.ModifierSet.IsStart">
            <summary>
            The start modifier.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.ModifierSet.IsHot">
            <summary>
            The hot modifier.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.ModifierSet.IsCold">
            <summary>
            The cold modifier.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.ModifierSet.CreateDefault">
            <summary>
            Creates a default modifier set.
            </summary>
            <returns>ModifierSet</returns>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Syntax.PSharpSyntaxNode">
            <summary>
            P# syntax node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.PSharpSyntaxNode.Program">
            <summary>
            The program this node belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.LanguageServices.Syntax.PSharpSyntaxNode.TextUnit">
            <summary>
            The text unit.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.PSharpSyntaxNode.#ctor(Microsoft.PSharp.LanguageServices.IPSharpProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Syntax.PSharpSyntaxNode"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.PSharpSyntaxNode.GetIndent(System.Int32)">
            <summary>
            Creates a string to be used for the specified level of indentation.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.PSharpSyntaxNode.Rewrite(System.Int32)">
            <summary>
            Rewrites the syntax node declaration to the intermediate C#
            representation.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.LanguageServices.Syntax.QualifiedMethod">
            <summary>
            Defines a qualified method.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.QualifiedMethod.Name">
            <summary>
            Name of the method.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.QualifiedMethod.MachineName">
            <summary>
            Name of the machine that contains the method.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.QualifiedMethod.NamespaceName">
            <summary>
            Name of the namespace that contains the method.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.QualifiedMethod.QualifiedStateName">
            <summary>
            The tokenized qualified state name of the method.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.LanguageServices.Syntax.QualifiedMethod.MachineQualifiedStateNames">
            <summary>
            The qualified state names of the machine that
            contains the method.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.LanguageServices.Syntax.QualifiedMethod.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.LanguageServices.Syntax.QualifiedMethod"/> class.
            </summary>
        </member>
    </members>
</doc>
