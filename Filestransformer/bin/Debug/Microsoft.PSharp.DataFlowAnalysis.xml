<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.PSharp.DataFlowAnalysis</name>
    </assembly>
    <members>
        <member name="T:Microsoft.PSharp.DataFlowAnalysis.AnalysisContext">
            <summary>
            A static analysis context.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.AnalysisContext.Solution">
            <summary>
            The solution of the P# program.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.AnalysisContext.Compilation">
            <summary>
            The project compilation for this analysis context.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.AnalysisContext.RegisteredImmutableTypes">
            <summary>
            Set of registered immutable types.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.AnalysisContext.GivesUpOwnershipMethods">
            <summary>
            Dictionary containing information about
            gives-up ownership methods.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.AnalysisContext.#ctor(Microsoft.CodeAnalysis.Project)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.DataFlowAnalysis.AnalysisContext"/> class.
            </summary>
            <param name="project">The project to analyze.</param>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.AnalysisContext.Create(Microsoft.CodeAnalysis.Project)">
            <summary>
            Create a new static analysis context.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.AnalysisContext.RegisterImmutableType(System.Type)">
            <summary>
            Registers the specified immutable type.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.AnalysisContext.RegisterGivesUpOwnershipMethod(System.String,System.Collections.Generic.ISet{System.Int32})">
            <summary>
            Registers the gives-up ownership method, and its gives-up parameter indexes.
            The method name should include the full namespace.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.AnalysisContext.GetFullClassName(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Returns the full name of the given class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.AnalysisContext.GetFullStructName(Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax)">
            <summary>
            Returns the full name of the given struct.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.AnalysisContext.GetFullMethodName(Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax)">
            <summary>
            Returns the full name of the given method.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.AnalysisContext.GetBaseTypes(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary>
            Returns the base type symbols of the given class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.AnalysisContext.IsTypePassedByValueOrImmutable(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Returns true if the given type is passed by value or is immutable.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.AnalysisContext.GetIdentifier(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)">
            <summary>
            Returns the identifier from the expression.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.AnalysisContext.GetRootIdentifier(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)">
            <summary>
            Returns the root identifier from the expression.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.AnalysisContext.GetIdentifiers(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)">
            <summary>
            Returns all identifiers.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.AnalysisContext.GetCalleeOfInvocation(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax)">
            <summary>
            Returns the callee of the given call expression.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.AnalysisContext.GetArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)">
            <summary>
            Returns the argument list after resolving the given call expression.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.AnalysisContext.GetFullQualifierNameOfSyntaxNode(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Returns the full qualifier name of the given syntax node.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.DataFlowAnalysis.ControlFlowGraph">
            <summary>
            A control-flow graph.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.ControlFlowGraph.#ctor(Microsoft.PSharp.DataFlowAnalysis.MethodSummary)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.DataFlowAnalysis.ControlFlowGraph"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.ControlFlowGraph.PrettyPrint(Microsoft.PSharp.DataFlowAnalysis.IControlFlowNode,System.Collections.Generic.ISet{Microsoft.PSharp.DataFlowAnalysis.IControlFlowNode})">
            <summary>
            Pretty prints the graph.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode">
            <summary>
            A control-flow graph node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode.Id">
            <summary>
            The unique id of the node.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode.Graph">
            <summary>
            Graph that contains this node.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode.Summary">
            <summary>
            Method summary that contains this node.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode.Statements">
            <summary>
            List of statements contained in the node.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode.ISuccessors">
            <summary>
            Set of the immediate successors.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode.IPredecessors">
            <summary>
            Set of the immediate predecessors.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode.#ctor(Microsoft.PSharp.DataFlowAnalysis.IGraph{Microsoft.PSharp.DataFlowAnalysis.IControlFlowNode},Microsoft.PSharp.DataFlowAnalysis.MethodSummary)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode.Create(Microsoft.PSharp.DataFlowAnalysis.ControlFlowGraph,Microsoft.PSharp.DataFlowAnalysis.MethodSummary)">
            <summary>
            Creates the control-flow graph nodes of the specified method summary.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode.IsSuccessorOf(Microsoft.PSharp.DataFlowAnalysis.IControlFlowNode)">
            <summary>
            Checks the node is a successor of the specified node.
            </summary>
            <param name="node">INode</param>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode.IsPredecessorOf(Microsoft.PSharp.DataFlowAnalysis.IControlFlowNode)">
            <summary>
            Checks the node is a predecessor of the specified node.
            </summary>
            <param name="node">INode</param>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode.Contains``1(``0)">
            <summary>
            Checks if the node contains the specified item.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode.IsEmpty">
            <summary>
            Checks if the node is empty.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode.Construct(System.Collections.Generic.List{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax},Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode,Microsoft.PSharp.DataFlowAnalysis.LoopHeadControlFlowNode)">
            <summary>
            Constructs the control-flow graph of the node.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode.ConstructIfThenElseBranch(System.Collections.Generic.List{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax},Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode,Microsoft.PSharp.DataFlowAnalysis.LoopHeadControlFlowNode)">
            <summary>
            Constructs an if-then-else branch.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode.ConstructForLoop(System.Collections.Generic.List{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax},Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode,Microsoft.PSharp.DataFlowAnalysis.LoopHeadControlFlowNode)">
            <summary>
            Constructs a for loop.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode.ConstructWhileLoop(System.Collections.Generic.List{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax},Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode,Microsoft.PSharp.DataFlowAnalysis.LoopHeadControlFlowNode)">
            <summary>
            Constructs a while loop.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode.ConstructForeachLoop(System.Collections.Generic.List{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax},Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode,Microsoft.PSharp.DataFlowAnalysis.LoopHeadControlFlowNode)">
            <summary>
            Constructs a foreach loop.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode.ConstructLoop(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,System.Collections.Generic.List{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax},Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode,Microsoft.PSharp.DataFlowAnalysis.LoopHeadControlFlowNode)">
            <summary>
            Constructs a loop from the specified loop guard and body.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode.ConstructDoWhileLoop(System.Collections.Generic.List{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax},Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode,Microsoft.PSharp.DataFlowAnalysis.LoopHeadControlFlowNode)">
            <summary>
            Constructs a do-while loop.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode.ConstructSwitchBlock(System.Collections.Generic.List{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax},Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode,Microsoft.PSharp.DataFlowAnalysis.LoopHeadControlFlowNode)">
            <summary>
            Constructs a switch block.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode.ConstructUsingBlock(System.Collections.Generic.List{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax},Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode,Microsoft.PSharp.DataFlowAnalysis.LoopHeadControlFlowNode)">
            <summary>
            Constructs a using block.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode.ConstructNakedCodeBlock(System.Collections.Generic.List{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax},Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode,Microsoft.PSharp.DataFlowAnalysis.LoopHeadControlFlowNode)">
            <summary>
            Constructs a naked code block.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode.GetStatements(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)">
            <summary>
            Returns a list containing all statements in the specified block.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.DataFlowAnalysis.IControlFlowNode">
            <summary>
            Interface for a control-flow graph node.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.IControlFlowNode.Statements">
            <summary>
            List of statements contained in the node.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.IControlFlowNode.Graph">
            <summary>
            Graph that contains this node.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.IControlFlowNode.Summary">
            <summary>
            Method summary that contains this node.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.DataFlowAnalysis.LoopHeadControlFlowNode">
            <summary>
            A loop head control-flow graph node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.LoopHeadControlFlowNode.LoopExitNode">
            <summary>
            The node after exiting the loop.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.LoopHeadControlFlowNode.#ctor(Microsoft.PSharp.DataFlowAnalysis.IGraph{Microsoft.PSharp.DataFlowAnalysis.IControlFlowNode},Microsoft.PSharp.DataFlowAnalysis.MethodSummary,Microsoft.PSharp.DataFlowAnalysis.ControlFlowNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.DataFlowAnalysis.LoopHeadControlFlowNode"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.DataFlowAnalysis.Statement">
            <summary>
            Class implementing a statement.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.Statement.SyntaxNode">
            <summary>
            The syntax node of the statement.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.Statement.ControlFlowNode">
            <summary>
            The control-flow graph node that contains
            the statement.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.Statement.Summary">
            <summary>
            Handle to the summary of the method
            that contains the statement.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.Statement.#ctor(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.PSharp.DataFlowAnalysis.IControlFlowNode,Microsoft.PSharp.DataFlowAnalysis.MethodSummary)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.DataFlowAnalysis.Statement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.Statement.Create(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.PSharp.DataFlowAnalysis.IControlFlowNode,Microsoft.PSharp.DataFlowAnalysis.MethodSummary)">
            <summary>
            Creates a new statement.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.Statement.IsInSameMethodAs(Microsoft.PSharp.DataFlowAnalysis.Statement)">
            <summary>
            Checks if the statement is in the same method as the specified statement.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.Statement.IsInSameMethodAs(Microsoft.PSharp.DataFlowAnalysis.IControlFlowNode)">
            <summary>
            Checks if the statement is in the same method as the specified control-flow graph node.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.Statement.Equals(System.Object)">
            <summary>
            Determines if the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.Statement.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.Statement.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis">
            <summary>
            Taint tracking analysis.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.AnalysisContext">
            <summary>
            The analysis context.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.SemanticModel">
            <summary>
            The semantic model.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.Summary">
            <summary>
            The method summary being analyzed.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.DataFlowGraph">
            <summary>
            The data-flow graph being analyzed.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.#ctor(Microsoft.PSharp.DataFlowAnalysis.IGraph{Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.Run">
            <summary>
            Runs the analysis.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.AnalyzeNode(Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Computes the data-flow information in the specified node.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.AnalyzeStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Analyzes the data-flow information in the statement.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.InitializeParameters(Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Initializes the data-flow of the input parameters.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.InitializeFieldsAndProperties(Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Initializes the data-flow of field and properties.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.AnalyzeVariableDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Analyzes the data-flow of the variable declaration.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.AnalyzeAssignmentExpression(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Analyzes the data-flow of the assignment expression.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.AnalyzeBinaryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Analyzes the data-flow of the binary expression.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.AnalyzeAssignmentExpression(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Analyzes the data-flow of the assignment expression.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.AnalyzeReturnStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Analyzes the data-flow of the return statement.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.AnalyzeMethodCall(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Analyzes the data-flow of the method call.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.AnalyzeMethodCall(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode,System.Collections.Generic.ISet{Microsoft.CodeAnalysis.ISymbol}@,System.Collections.Generic.ISet{Microsoft.CodeAnalysis.ITypeSymbol}@)">
            <summary>
            Analyzes the data-flow in the method call.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.Transfer(Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Transfers the data-flow information from the previous data-flow node.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.ResolveSideEffectsInExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Resolves side-effects in the specified expression.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.ResolveMethodParameterAccesses(Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Resolves any method parameter acccesses in the member access expression.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.ResolveMethodParameterAccesses(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,System.Collections.Generic.ISet{Microsoft.PSharp.DataFlowAnalysis.Statement},Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Resolves the method parameter acccesses in the identifier.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.ResolveFieldAccesses(Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Resolves any field acccesses in the member access expression.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.ResolveParameterToFieldFlowSideEffects(Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Resolves parameters flowing into fields side-effects.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.ResolveSideEffectsInCall(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.PSharp.DataFlowAnalysis.MethodSummary,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Resolves the side-effects in the call.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.ResolveSideEffectsInCall(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax,Microsoft.PSharp.DataFlowAnalysis.MethodSummary,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Resolves the side-effects in the call.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.ResolveGivesUpOwnershipInCall(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Resolves the gives-up ownership information in the call.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.ResolveGivesUpOwnershipInCall(Microsoft.CodeAnalysis.ISymbol,Microsoft.PSharp.DataFlowAnalysis.MethodSummary,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Resolves the gives-up ownership information in the call.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.ResolveGivesUpOwnershipInArgument(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Resolves the gives-up ownership information in the argument.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.GetMemberExpressionSymbols(System.Collections.Generic.ISet{System.Tuple{Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ITypeSymbol}}@,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)">
            <summary>
            Returns the symbol infos from the specified member expression.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.MapFieldAccessInStatement(Microsoft.CodeAnalysis.IFieldSymbol,Microsoft.PSharp.DataFlowAnalysis.Statement)">
            <summary>
            Maps the access of the field symbol.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.MapCalleeSummaryToCallSymbol(Microsoft.PSharp.DataFlowAnalysis.MethodSummary,Microsoft.CodeAnalysis.ISymbol,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Maps the callee summary to the call symbol.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.TaintTrackingAnalysis.Compare(Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo,Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo)">
            <summary>
            Compare with the specified data-flow information.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.DataFlowAnalysis.DataFlowGraph">
            <summary>
            A data-flow graph.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.DataFlowGraph.Summary">
            <summary>
            Method summary that contains this graph.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.DataFlowGraph.SemanticModel">
            <summary>
            The semantic model.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowGraph.#ctor(Microsoft.PSharp.DataFlowAnalysis.MethodSummary)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.DataFlowAnalysis.DataFlowGraph"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowGraph.FlowsFromMethodEntry(Microsoft.CodeAnalysis.ISymbol,Microsoft.PSharp.DataFlowAnalysis.Statement)">
            <summary>
            Checks if the target symbol flows from the entry of the method.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowGraph.FlowsFromParameterList(Microsoft.CodeAnalysis.ISymbol,Microsoft.PSharp.DataFlowAnalysis.Statement)">
            <summary>
            Checks if the target symbol flows from the parameter list.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowGraph.FlowsFromParameter(Microsoft.CodeAnalysis.IParameterSymbol,Microsoft.CodeAnalysis.ISymbol,Microsoft.PSharp.DataFlowAnalysis.Statement)">
            <summary>
            Checks if the target symbol flows from the parameter symbol.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowGraph.FlowsIntoSymbol(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,Microsoft.PSharp.DataFlowAnalysis.Statement,Microsoft.PSharp.DataFlowAnalysis.Statement)">
            <summary>
            Checks if the symbol flows into the target symbol.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowGraph.FlowsIntoSymbol(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Checks if the symbol flows into the target symbol.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowGraph.IsDefinitionReachingNodeInCycle(Microsoft.PSharp.DataFlowAnalysis.SymbolDefinition,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Checks if the specified definition is alive in some
            path between the two specified nodes.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowGraph.PrettyPrint(Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode,System.Collections.Generic.ISet{Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode})">
            <summary>
            Pretty prints the graph.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo">
            <summary>
            Data-flow information.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.AnalysisContext">
            <summary>
            The analysis context.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.DataFlowNode">
            <summary>
            Node that contains the data-flow information.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.GeneratedDefinitions">
            <summary>
            Set of generated definitions.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.KilledDefinitions">
            <summary>
            Set of killed definitions.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.InputDefinitions">
            <summary>
            Set of input definitions.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.OutputDefinitions">
            <summary>
            Set of output definitions.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.TaintedDefinitions">
            <summary>
            Map containing tainted definitions.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.#ctor(Microsoft.PSharp.DataFlowAnalysis.DataFlowNode,Microsoft.PSharp.DataFlowAnalysis.AnalysisContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.GenerateDefinition(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Generates a new definition for the specified symbol.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.KillDefinitions(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Kills the definitions of the specified symbol.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.AssignInputDefinitions(System.Collections.Generic.ISet{Microsoft.PSharp.DataFlowAnalysis.SymbolDefinition})">
            <summary>
            Assigns the specified inputs definitions.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.AssignOutputDefinitions">
            <summary>
            Assigns the output definitions.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.AssignTypesToSymbol(System.Collections.Generic.ISet{Microsoft.CodeAnalysis.ITypeSymbol},Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Assigns the specified types to the symbol.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.AssignTypeToDefinition(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.PSharp.DataFlowAnalysis.SymbolDefinition)">
            <summary>
            Assigns the specified type to the definition.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.AssignTypesToDefinition(System.Collections.Generic.ISet{Microsoft.CodeAnalysis.ITypeSymbol},Microsoft.PSharp.DataFlowAnalysis.SymbolDefinition)">
            <summary>
            Assigns the specified types to the definition.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.GetCandidateTypesOfSymbol(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Returns the candidate types of the specified symbol.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.TaintSymbol(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Taints the specified symbol.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.TaintSymbol(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ISymbol},Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Taints the specified symbol.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.TaintDefinition(Microsoft.PSharp.DataFlowAnalysis.SymbolDefinition,Microsoft.PSharp.DataFlowAnalysis.SymbolDefinition)">
            <summary>
            Taints the specified definition.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.TaintDefinition(System.Collections.Generic.IEnumerable{Microsoft.PSharp.DataFlowAnalysis.SymbolDefinition},Microsoft.PSharp.DataFlowAnalysis.SymbolDefinition)">
            <summary>
            Taints the specified definition.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.ResolveInputAliases(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Resolves the aliases of the specified symbol in the input definitions of the data-flow node.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.ResolveOutputAliases(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Resolves the aliases of the specified symbol in
            the output definitions of the data-flow node.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.ResolveAliases(System.Collections.Generic.ISet{Microsoft.PSharp.DataFlowAnalysis.SymbolDefinition})">
            <summary>
            Resolves the aliases of the specified set of definitions.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.ResolveDirectAliases(Microsoft.PSharp.DataFlowAnalysis.SymbolDefinition)">
            <summary>
            Resolves the direct aliases of the specified definition.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.GetGeneratedDefinitionOfSymbol(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Returns the generated definition for the specified symbol.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.IsFreshSymbol(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Checks if the symbol is fresh.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.GetInputOrGeneratedDefinitions">
            <summary>
            Returns the input or generated definitions.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.GetOutputDefinitions">
            <summary>
            Returns the output definitions, which are the generated definitions,
            and the input definitions that have not be killed.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.GetKilledDefinitionsOfSymbol(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Returns the killed definitions for the specified symbol.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.GetInputDefinitionsOfSymbol(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Returns the input definitions for the specified symbol.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.GetInputOrGeneratedDefinitionsOfSymbol(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Returns the input or generated definitions for the specified symbol.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.GetOutputDefinitionsOfSymbol(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Returns the output definitions for the specified symbol.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.GetDefinitionsOfSymbol(Microsoft.CodeAnalysis.ISymbol,System.Collections.Generic.ISet{Microsoft.PSharp.DataFlowAnalysis.SymbolDefinition})">
            <summary>
            Returns the definitions for the specified symbol.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowInfo.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.DataFlowAnalysis.DataFlowNode">
            <summary>
            A data-flow graph node.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.DataFlowNode.Id">
            <summary>
            The unique id of the node.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.DataFlowNode.Summary">
            <summary>
            Method summary that contains this node.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.DataFlowNode.Graph">
            <summary>
            Graph that contains this node.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.DataFlowNode.ControlFlowNode">
            <summary>
            Control-flow graph node that contains this node.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.DataFlowNode.Statement">
            <summary>
            Statement contained in the node.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.DataFlowNode.ISuccessors">
            <summary>
            Set of the immediate successors.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.DataFlowNode.IPredecessors">
            <summary>
            Set of the immediate predecessors.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.DataFlowNode.DataFlowInfo">
            <summary>
            The data-flow information of this node.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.DataFlowNode.MethodSummaryCache">
            <summary>
            Map from call sites to cached method summaries.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.DataFlowNode.GivesUpOwnershipMap">
            <summary>
            Set of gives-up ownership syntax statements.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowNode.#ctor(Microsoft.PSharp.DataFlowAnalysis.IGraph{Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode},Microsoft.PSharp.DataFlowAnalysis.IControlFlowNode,Microsoft.PSharp.DataFlowAnalysis.MethodSummary)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.DataFlowAnalysis.DataFlowNode"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowNode.Create(Microsoft.PSharp.DataFlowAnalysis.DataFlowGraph,Microsoft.PSharp.DataFlowAnalysis.MethodSummary)">
            <summary>
            Creates the control-flow graph nodes of the specified method summary.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowNode.IsSuccessorOf(Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Checks the node is a successor of the specified node.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowNode.IsPredecessorOf(Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Checks the node is a predecessor of the specified node.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowNode.Contains``1(``0)">
            <summary>
            Checks if the node contains the specified item.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowNode.IsEmpty">
            <summary>
            Checks if the node is empty.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.DataFlowNode.Construct(Microsoft.PSharp.DataFlowAnalysis.IControlFlowNode,Microsoft.PSharp.DataFlowAnalysis.DataFlowNode,System.Collections.Generic.Dictionary{Microsoft.PSharp.DataFlowAnalysis.IControlFlowNode,Microsoft.PSharp.DataFlowAnalysis.DataFlowNode})">
            <summary>
            Constructs the data-flow graph node from the specified control-flow graph node.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.DataFlowAnalysis.IDataFlowAnalysis">
            <summary>
            Interface for performing data-flow analysis.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.IDataFlowAnalysis.FlowsFromMethodEntry(Microsoft.CodeAnalysis.ISymbol,Microsoft.PSharp.DataFlowAnalysis.Statement)">
            <summary>
            Checks if the target symbol flows from the entry of the method.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.IDataFlowAnalysis.FlowsFromParameterList(Microsoft.CodeAnalysis.ISymbol,Microsoft.PSharp.DataFlowAnalysis.Statement)">
            <summary>
            Checks if the target symbol flows from the parameter list.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.IDataFlowAnalysis.FlowsFromParameter(Microsoft.CodeAnalysis.IParameterSymbol,Microsoft.CodeAnalysis.ISymbol,Microsoft.PSharp.DataFlowAnalysis.Statement)">
            <summary>
            Checks if the target symbol flows from the parameter symbol.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.IDataFlowAnalysis.FlowsIntoSymbol(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,Microsoft.PSharp.DataFlowAnalysis.Statement,Microsoft.PSharp.DataFlowAnalysis.Statement)">
            <summary>
            Checks if the symbol flows into the target symbol.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode">
            <summary>
            Interface for a data-flow graph node.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode.Statement">
            <summary>
            Statement contained in the node.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode.Graph">
            <summary>
            Graph that contains this node.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode.ControlFlowNode">
            <summary>
            Control-flow graph node that contains this node.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode.Summary">
            <summary>
            Method summary that contains this node.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode.DataFlowInfo">
            <summary>
            The data-flow information of this node.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode.MethodSummaryCache">
            <summary>
            Map from call sites to cached method summaries.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode.GivesUpOwnershipMap">
            <summary>
            Set of gives-up ownership syntax statements.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.DataFlowAnalysis.Graph`1">
            <summary>
            Class implementing a generic graph.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.Graph`1.Id">
            <summary>
            The unique id of the graph.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.Graph`1.EntryNode">
            <summary>
            The entry node of the graph.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.Graph`1.Nodes">
            <summary>
            Set of nodes in the graph.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.Graph`1.IdCounter">
            <summary>
            A counter for creating unique ids.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.Graph`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.DataFlowAnalysis.Graph`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.Graph`1.IsSuccessorOf(`0,`0)">
            <summary>
            Checks if the node is a successor of the specified node.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.Graph`1.IsPredecessorOf(`0,`0)">
            <summary>
            Checks if the node is a predecessor of the specified node.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.Graph`1.TryGetNodeContaining``1(``0,`0@)">
            <summary>
            Checks for the node that contains the specified item.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.Graph`1.PrettyPrint">
            <summary>
            Pretty prints the graph.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.Graph`1.MergeEmptyNodes">
            <summary>
            Merges empty nodes.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.Graph`1.IsSuccessorOf(`0,`0,System.Collections.Generic.ISet{`0})">
            <summary>
            Checks if the node is a successor of the specified node.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.Graph`1.IsPredecessorOf(`0,`0,System.Collections.Generic.ISet{`0})">
            <summary>
            Checks if the node is a predecessor of the specified node.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.Graph`1.GetExitNodes(`0,System.Collections.Generic.ISet{`0})">
            <summary>
            Returns all exit nodes in the graph.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.Graph`1.PrettyPrint(`0,System.Collections.Generic.ISet{`0})">
            <summary>
            Pretty prints the graph.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.DataFlowAnalysis.IGraph`1">
            <summary>
            Interface of a generic graph.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.IGraph`1.EntryNode">
            <summary>
            The entry node of the graph.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.IGraph`1.Nodes">
            <summary>
            Set of nodes in the graph.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.IGraph`1.IsSuccessorOf(`0,`0)">
            <summary>
            Checks if the node is a successor of the specified node.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.IGraph`1.IsPredecessorOf(`0,`0)">
            <summary>
            Checks if the node is a predecessor of the specified node.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.IGraph`1.TryGetNodeContaining``1(``0,`0@)">
            <summary>
            Checks for the node that contains the specified item.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.IGraph`1.PrettyPrint">
            <summary>
            Pretty prints the graph.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.DataFlowAnalysis.INode">
            <summary>
            Interface for a node.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.INode.Contains``1(``0)">
            <summary>
            Checks if the node contains the specified item.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.INode.IsEmpty">
            <summary>
            Checks if the node has no contents.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.DataFlowAnalysis.ITraversable`1">
            <summary>
            Interface for a traversable node.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.ITraversable`1.ISuccessors">
            <summary>
            Set of the immediate successors.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.ITraversable`1.IPredecessors">
            <summary>
            Set of the immediate predecessors.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.ITraversable`1.IsSuccessorOf(`0)">
            <summary>
            Returns true if the node is a successor
            of the specified node.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.ITraversable`1.IsPredecessorOf(`0)">
            <summary>
            Returns true if the node is a predecessor
            of the specified node.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.DataFlowAnalysis.GivenUpOwnershipSymbol">
            <summary>
            Class implementing a symbol with given-up
            ownership symbol.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.GivenUpOwnershipSymbol.ContainingSymbol">
            <summary>
            Containing symbol.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.GivenUpOwnershipSymbol.Statement">
            <summary>
            Statement where the ownership is given up.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.GivenUpOwnershipSymbol.#ctor(Microsoft.CodeAnalysis.ISymbol,Microsoft.PSharp.DataFlowAnalysis.Statement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.DataFlowAnalysis.GivenUpOwnershipSymbol"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.DataFlowAnalysis.IAnalysisPass">
            <summary>
            Interface of a generic analysis pass.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.IAnalysisPass.Run">
            <summary>
            Runs the analysis.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.DataFlowAnalysis.MethodSideEffectsInfo">
            <summary>
            Method side-effects information.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.MethodSideEffectsInfo.Summary">
            <summary>
            Method summary that contains these side-effects.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.MethodSideEffectsInfo.FieldFlowParamIndexes">
            <summary>
            Dictionary containing all the indexes of parameters
            that flow into fields in the method.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.MethodSideEffectsInfo.FieldAccesses">
            <summary>
            Dictionary containing all read and write field accesses in the method.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.MethodSideEffectsInfo.ParameterAccesses">
            <summary>
            Dictionary containing all read and write parameters accesses in the method.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.MethodSideEffectsInfo.ReturnedFields">
            <summary>
            Fields that are returned to the caller of the method.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.MethodSideEffectsInfo.ReturnedParameters">
            <summary>
            Indexes of the parameters that are returned
            to the caller of the method.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.MethodSideEffectsInfo.ReturnTypes">
            <summary>
            Set of return types.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.MethodSideEffectsInfo.GivesUpOwnershipParamIndexes">
            <summary>
            Set of the indexes of parameters that the method
            gives up during its execution.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSideEffectsInfo.#ctor(Microsoft.PSharp.DataFlowAnalysis.MethodSummary)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.DataFlowAnalysis.MethodSideEffectsInfo"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSideEffectsInfo.GetResolvedReturnSymbols(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax,Microsoft.CodeAnalysis.SemanticModel)">
            <summary>
            Resolves and returns all possible return symbols at
            the point of the specified invocation.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.DataFlowAnalysis.MethodSummary">
            <summary>
            Class implementing a method summary.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.Id">
            <summary>
            The unique id of the summary.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.AnalysisContext">
            <summary>
            The analysis context.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.SemanticModel">
            <summary>
            The semantic model of this summary.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.Method">
            <summary>
            Method that this summary represents.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.ParameterTypes">
            <summary>
            The types of the input parameters.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.ControlFlowGraph">
            <summary>
            The control-flow graph of this summary.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.DataFlowGraph">
            <summary>
            The data-flow graph of this summary.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.DataFlowAnalysis">
            <summary>
            The data-flow analysis of this summary.
            </summary>
        </member>
        <member name="P:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.SideEffectsInfo">
            <summary>
            Side-effects information.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.IdCounter">
            <summary>
            A counter for creating unique IDs.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.#ctor(Microsoft.PSharp.DataFlowAnalysis.AnalysisContext,Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax,System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.ISet{Microsoft.CodeAnalysis.ITypeSymbol}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.DataFlowAnalysis.MethodSummary"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.Create(Microsoft.PSharp.DataFlowAnalysis.AnalysisContext,Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax)">
            <summary>
            Creates the summary of the specified method.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.Create(Microsoft.PSharp.DataFlowAnalysis.AnalysisContext,Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax,System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.ISet{Microsoft.CodeAnalysis.ITypeSymbol}})">
            <summary>
            Creates the summary of the specified method, using the
            specified parameter types.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.GetCachedSummaries(Microsoft.CodeAnalysis.ISymbol,Microsoft.PSharp.DataFlowAnalysis.Statement)">
            <summary>
            Returns all cached method summaries for the specified call symbol.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.GetResolvedReturnSymbols(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax,Microsoft.CodeAnalysis.SemanticModel)">
            <summary>
            Resolves and returns all possible return symbols at
            the point of the specified invocation.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.GetSymbolsWithGivenUpOwnership">
            <summary>
            Returns symbols with given-up ownership.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.BuildSummary">
            <summary>
            Builds the summary.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.AnalyzeSummary">
            <summary>
            Analyzes the summary.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.ResolveMethodParameterTypes(System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.ISet{Microsoft.CodeAnalysis.ITypeSymbol}})">
            <summary>
            Resolves the parameter types of the method, using the specified parameter types.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.PrintControlFlowGraph">
            <summary>
            Prints the control-flow graph.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.PrintDataFlowInformation(System.Boolean)">
            <summary>
            Prints the data-flow information.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.PrintDataFlowInformation(System.Boolean,System.Boolean)">
            <summary>
            Prints the data-flow information.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.PrintGeneratedDefinitions(System.String)">
            <summary>
            Prints the generated definitions.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.PrintKilledDefinitions(System.String)">
            <summary>
            Prints the killed definitions.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.PrintInputDefinitions(System.String)">
            <summary>
            Prints the input definitions.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.PrintOutputDefinitions(System.String)">
            <summary>
            Prints the output definitions.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.PrintTaintedDefinitions(System.String)">
            <summary>
            Prints the tainted definitions.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.PrintMethodSummaryCache(System.String)">
            <summary>
            Prints the method summary cache.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.PrintGivesUpOwnershipMap(System.String)">
            <summary>
            Prints the gives-up ownership map.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.PrintFieldFlowParamIndexes(System.String)">
            <summary>
            Prints the parameters flowig into fields.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.PrintFieldAccesses(System.String)">
            <summary>
            Prints the field accesses.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.PrintParameterAccesses(System.String)">
            <summary>
            Prints the parameter accesses.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.PrintReturnedFields(System.String)">
            <summary>
            Prints the returned fields.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.PrintReturnedParameters(System.String)">
            <summary>
            Prints the returned parameters.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.PrintReturnedTypes(System.String)">
            <summary>
            Prints the returned types.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.PrintGivesUpOwnershipParameterIndexes(System.String)">
            <summary>
            Prints the gives-up ownership parameter indexes.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummary.PrintCachedMethodSummaries(System.Boolean)">
            <summary>
            Prints all cached method summaries.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.DataFlowAnalysis.MethodSummaryResolver">
            <summary>
            Class implementing a method summary resolver.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummaryResolver.ResolveMethodSummaries(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Returns all cached method summaries for the specified invocation.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummaryResolver.ResolveMethodSummaries(Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Returns all cached method summaries for the specified object creation.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummaryResolver.ResolveMethodSummaries(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Returns all cached method summaries for the specified call.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummaryResolver.ResolveCandidateMethodsAtCallSite(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Returns the candidate callees after resolving the specified invocation.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummaryResolver.ResolveMethodDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Returns the method declaration after resolving the specified call.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummaryResolver.TryGetCandidateMethodOverriders(System.Collections.Generic.HashSet{Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax}@,Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Tries to get the list of candidate methods that can
            override the specified virtual call.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummaryResolver.TryGetMethodDeclarationFromType(Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax@,Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Tries to get the method declaration from the specified type and invocation.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.MethodSummaryResolver.GetCandidateParameterTypes(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax,Microsoft.PSharp.DataFlowAnalysis.IDataFlowNode)">
            <summary>
            Returns the candidate parameter types from the specified argument list.
            </summary>
        </member>
        <member name="T:Microsoft.PSharp.DataFlowAnalysis.SymbolDefinition">
            <summary>
            Class implementing a symbol definition.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.SymbolDefinition.DataFlowNode">
            <summary>
            Node that defined the symbol.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.SymbolDefinition.Symbol">
            <summary>
            The symbol.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.SymbolDefinition.CandidateTypes">
            <summary>
            Candidate types of the symbol.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.SymbolDefinition.Kind">
            <summary>
            Kind of the symbol.
            </summary>
        </member>
        <member name="F:Microsoft.PSharp.DataFlowAnalysis.SymbolDefinition.Name">
            <summary>
            Name of the symbol definition.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.SymbolDefinition.#ctor(Microsoft.CodeAnalysis.ISymbol,Microsoft.PSharp.DataFlowAnalysis.DataFlowNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PSharp.DataFlowAnalysis.SymbolDefinition"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PSharp.DataFlowAnalysis.SymbolDefinition.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
    </members>
</doc>
